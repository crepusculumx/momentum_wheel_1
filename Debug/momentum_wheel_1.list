
momentum_wheel_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009e18  08009e18  00019e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e4  0800a2e4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2ec  0800a2ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000002e8  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017649  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e75  00000000  00000000  0003785d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  0003a6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  0003b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002380d  00000000  00000000  0003c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fa7  00000000  00000000  0005ffb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf016  00000000  00000000  00075f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144f72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c00  00000000  00000000  00144fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e00 	.word	0x08009e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009e00 	.word	0x08009e00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <MX_GPIO_Init+0xec>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a25      	ldr	r2, [pc, #148]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_GPIO_Init+0xec>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_GPIO_Init+0xec>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_GPIO_Init+0xec>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <MX_GPIO_Init+0xec>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_GPIO_Init+0xec>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_EN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <MX_GPIO_Init+0xf0>)
 80010b0:	f001 fa72 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_DIR_Pin;
 80010b4:	2303      	movs	r3, #3
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0xf0>)
 80010cc:	f001 f8c8 	bl	8002260 <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40021400 	.word	0x40021400

080010e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f001 fa55 	bl	80025cc <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 f96a 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000214 	.word	0x20000214
 8001134:	40005400 	.word	0x40005400
 8001138:	00061a80 	.word	0x00061a80

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_I2C_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12b      	bne.n	80011b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800117a:	23c0      	movs	r3, #192	; 0xc0
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118a:	2304      	movs	r3, #4
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <HAL_I2C_MspInit+0x8c>)
 8001196:	f001 f863 	bl	8002260 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 80011a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f000 fe2f 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f84d 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f7ff ff07 	bl	8000fec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011de:	f000 fd73 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80011e2:	f7ff ff7d 	bl	80010e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011e6:	f000 fa59 	bl	800169c <MX_TIM2_Init>
  MX_TIM3_Init();
 80011ea:	f000 faab 	bl	8001744 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ee:	f000 fafd 	bl	80017ec <MX_TIM4_Init>
  MX_TIM6_Init();
 80011f2:	f000 fb55 	bl	80018a0 <MX_TIM6_Init>
  MX_TIM14_Init();
 80011f6:	f000 fbbd 	bl	8001974 <MX_TIM14_Init>
  MX_TIM7_Init();
 80011fa:	f000 fb87 	bl	800190c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, UART_Receive_buffer, 4);
 80011fe:	2204      	movs	r2, #4
 8001200:	4911      	ldr	r1, [pc, #68]	; (8001248 <main+0x7c>)
 8001202:	4812      	ldr	r0, [pc, #72]	; (800124c <main+0x80>)
 8001204:	f003 f851 	bl	80042aa <HAL_UART_Receive_IT>

  Motor_init(&motor,
 8001208:	2302      	movs	r3, #2
 800120a:	9304      	str	r3, [sp, #16]
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <main+0x84>)
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	2301      	movs	r3, #1
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <main+0x84>)
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <main+0x88>)
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <main+0x8c>)
 800121e:	2200      	movs	r2, #0
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <main+0x90>)
 8001222:	480f      	ldr	r0, [pc, #60]	; (8001260 <main+0x94>)
 8001224:	f004 f804 	bl	8005230 <Motor_init>
             MOTOR_EN_GPIO_Port,
             MOTOR_EN_Pin,
             MOTOR_DIR_GPIO_Port,
             MOTOR_DIR_Pin);

  Angular_init(&angular, &htim2);
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <main+0x98>)
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <main+0x9c>)
 800122c:	f003 ff26 	bl	800507c <Angular_init>

  Controller_init(&contorller, &htim7, &motor, &angular);
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <main+0x9c>)
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <main+0x94>)
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <main+0xa0>)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <main+0xa4>)
 8001238:	f003 ff40 	bl	80050bc <Controller_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    Controller_pid(&contorller, 100);
 800123c:	2164      	movs	r1, #100	; 0x64
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <main+0xa4>)
 8001240:	f003 ff56 	bl	80050f0 <Controller_pid>
 8001244:	e7fa      	b.n	800123c <main+0x70>
 8001246:	bf00      	nop
 8001248:	20000204 	.word	0x20000204
 800124c:	20000478 	.word	0x20000478
 8001250:	40021400 	.word	0x40021400
 8001254:	20000358 	.word	0x20000358
 8001258:	20000310 	.word	0x20000310
 800125c:	200003e8 	.word	0x200003e8
 8001260:	20000288 	.word	0x20000288
 8001264:	200003a0 	.word	0x200003a0
 8001268:	20000268 	.word	0x20000268
 800126c:	20000430 	.word	0x20000430
 8001270:	20000270 	.word	0x20000270

08001274 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	; 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 f98e 	bl	80055a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <SystemClock_Config+0xcc>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a21      	ldr	r2, [pc, #132]	; (8001344 <SystemClock_Config+0xd0>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2310      	movs	r3, #16
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e4:	2308      	movs	r3, #8
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e8:	23a8      	movs	r3, #168	; 0xa8
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 faab 	bl	8002854 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
    Error_Handler();
 8001304:	f000 f87c 	bl	8001400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001314:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2105      	movs	r1, #5
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fd0c 	bl	8002d44 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xc2>
    Error_Handler();
 8001332:	f000 f865 	bl	8001400 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	; 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if (!start_flag) return;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_TIM_PeriodElapsedCallback+0x22>
  if (htim == &htim6) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d105      	bne.n	800136c <HAL_TIM_PeriodElapsedCallback+0x24>
    Motor_update_cur_state(&motor, 10);
 8001360:	210a      	movs	r1, #10
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001364:	f004 f884 	bl	8005470 <Motor_update_cur_state>
 8001368:	e000      	b.n	800136c <HAL_TIM_PeriodElapsedCallback+0x24>
  if (!start_flag) return;
 800136a:	bf00      	nop
  } else if (htim == &htim7) {

//    printf("%ld", Angular_get_cur_angle(&angular));
  }
}
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000
 8001378:	20000358 	.word	0x20000358
 800137c:	20000288 	.word	0x20000288

08001380 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_UART_RxCpltCallback+0x6c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d127      	bne.n	80013e2 <HAL_UART_RxCpltCallback+0x62>
    if (UART_Receive_buffer[0] == '0') {
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_UART_RxCpltCallback+0x70>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b30      	cmp	r3, #48	; 0x30
 8001398:	d102      	bne.n	80013a0 <HAL_UART_RxCpltCallback+0x20>
      start_flag = 1;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_UART_RxCpltCallback+0x74>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
    }
    if (UART_Receive_buffer[0] == '1') {
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_UART_RxCpltCallback+0x70>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b31      	cmp	r3, #49	; 0x31
 80013a6:	d117      	bne.n	80013d8 <HAL_UART_RxCpltCallback+0x58>
      uint32_t
        num = (UART_Receive_buffer[1] - '0') * 100 + (UART_Receive_buffer[2] - '0') * 10 + UART_Receive_buffer[3] - '0';
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_UART_RxCpltCallback+0x70>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	3b30      	subs	r3, #48	; 0x30
 80013ae:	2264      	movs	r2, #100	; 0x64
 80013b0:	fb02 f103 	mul.w	r1, r2, r3
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_UART_RxCpltCallback+0x70>)
 80013b6:	789b      	ldrb	r3, [r3, #2]
 80013b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	440b      	add	r3, r1
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_UART_RxCpltCallback+0x70>)
 80013c8:	78d2      	ldrb	r2, [r2, #3]
 80013ca:	4413      	add	r3, r2
 80013cc:	3b30      	subs	r3, #48	; 0x30
 80013ce:	60fb      	str	r3, [r7, #12]
      Motor_set_pwm(&motor, num);
 80013d0:	68f9      	ldr	r1, [r7, #12]
 80013d2:	4809      	ldr	r0, [pc, #36]	; (80013f8 <HAL_UART_RxCpltCallback+0x78>)
 80013d4:	f003 ff85 	bl	80052e2 <Motor_set_pwm>
    }

    HAL_UART_Receive_IT(&huart1, UART_Receive_buffer, 4);
 80013d8:	2204      	movs	r2, #4
 80013da:	4905      	ldr	r1, [pc, #20]	; (80013f0 <HAL_UART_RxCpltCallback+0x70>)
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <HAL_UART_RxCpltCallback+0x7c>)
 80013de:	f002 ff64 	bl	80042aa <HAL_UART_Receive_IT>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40011000 	.word	0x40011000
 80013f0:	20000204 	.word	0x20000204
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000288 	.word	0x20000288
 80013fc:	20000478 	.word	0x20000478

08001400 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_MspInit+0x4c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_MspInit+0x4c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 fd16 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART1_IRQHandler+0x10>)
 80014b6:	f002 ff29 	bl	800430c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000478 	.word	0x20000478

080014c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM6_DAC_IRQHandler+0x10>)
 80014ca:	f002 f917 	bl	80036fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000358 	.word	0x20000358

080014d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM7_IRQHandler+0x10>)
 80014de:	f002 f90d 	bl	80036fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000430 	.word	0x20000430

080014ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	return 1;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_kill>:

int _kill(int pid, int sig)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001506:	f004 f823 	bl	8005550 <__errno>
 800150a:	4603      	mov	r3, r0
 800150c:	2216      	movs	r2, #22
 800150e:	601a      	str	r2, [r3, #0]
	return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_exit>:

void _exit (int status)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffe7 	bl	80014fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800152e:	e7fe      	b.n	800152e <_exit+0x12>

08001530 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e00a      	b.n	8001558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001542:	f3af 8000 	nop.w
 8001546:	4601      	mov	r1, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60ba      	str	r2, [r7, #8]
 800154e:	b2ca      	uxtb	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf0      	blt.n	8001542 <_read+0x12>
	}

return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e009      	b.n	8001590 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fc19 	bl	8001dbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf1      	blt.n	800157c <_write+0x12>
	}
	return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_close>:

int _close(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	return -1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ca:	605a      	str	r2, [r3, #4]
	return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_isatty>:

int _isatty(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f003 ff88 	bl	8005550 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20020000 	.word	0x20020000
 800166c:	00000400 	.word	0x00000400
 8001670:	20000208 	.word	0x20000208
 8001674:	200004d0 	.word	0x200004d0

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2224      	movs	r2, #36	; 0x24
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 ff7a 	bl	80055a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <MX_TIM2_Init+0xa4>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_TIM2_Init+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_TIM2_Init+0xa4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_TIM2_Init+0xa4>)
 80016ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM2_Init+0xa4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_TIM2_Init+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e0:	2303      	movs	r3, #3
 80016e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016f8:	2301      	movs	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001700:	230f      	movs	r3, #15
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_TIM2_Init+0xa4>)
 800170c:	f001 fec2 	bl	8003494 <HAL_TIM_Encoder_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001716:	f7ff fe73 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <MX_TIM2_Init+0xa4>)
 8001728:	f002 fc50 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001732:	f7ff fe65 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	3730      	adds	r7, #48	; 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200003a0 	.word	0x200003a0

08001744 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f003 ff26 	bl	80055a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <MX_TIM3_Init+0xa0>)
 8001762:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <MX_TIM3_Init+0xa4>)
 8001764:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <MX_TIM3_Init+0xa0>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_TIM3_Init+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <MX_TIM3_Init+0xa0>)
 8001774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001778:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_TIM3_Init+0xa0>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_TIM3_Init+0xa0>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001786:	2303      	movs	r3, #3
 8001788:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800178e:	2301      	movs	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80017a6:	230f      	movs	r3, #15
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <MX_TIM3_Init+0xa0>)
 80017b2:	f001 fe6f 	bl	8003494 <HAL_TIM_Encoder_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017bc:	f7ff fe20 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_TIM3_Init+0xa0>)
 80017ce:	f002 fbfd 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017d8:	f7ff fe12 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3730      	adds	r7, #48	; 0x30
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000310 	.word	0x20000310
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <MX_TIM4_Init+0xac>)
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <MX_TIM4_Init+0xb0>)
 8001812:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <MX_TIM4_Init+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_TIM4_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_TIM4_Init+0xac>)
 8001822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001826:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_TIM4_Init+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_TIM4_Init+0xac>)
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_TIM4_Init+0xac>)
 8001836:	f001 fd15 	bl	8003264 <HAL_TIM_PWM_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001840:	f7ff fdde 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4619      	mov	r1, r3
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_TIM4_Init+0xac>)
 8001854:	f002 fbba 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800185e:	f7ff fdcf 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM4_Init+0xac>)
 800187a:	f002 f847 	bl	800390c <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001884:	f7ff fdbc 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM4_Init+0xac>)
 800188a:	f000 f9b9 	bl	8001c00 <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002c8 	.word	0x200002c8
 800189c:	40000800 	.word	0x40000800

080018a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_TIM6_Init+0x64>)
 80018b0:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_TIM6_Init+0x68>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_TIM6_Init+0x64>)
 80018b6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80018ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_TIM6_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_TIM6_Init+0x64>)
 80018c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80018c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_TIM6_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <MX_TIM6_Init+0x64>)
 80018d2:	f001 fc07 	bl	80030e4 <HAL_TIM_Base_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018dc:	f7ff fd90 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_TIM6_Init+0x64>)
 80018ee:	f002 fb6d 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018f8:	f7ff fd82 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000358 	.word	0x20000358
 8001908:	40001000 	.word	0x40001000

0800190c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	463b      	mov	r3, r7
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_TIM7_Init+0x60>)
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <MX_TIM7_Init+0x64>)
 800191e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 168;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_TIM7_Init+0x60>)
 8001922:	22a8      	movs	r2, #168	; 0xa8
 8001924:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_TIM7_Init+0x60>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_TIM7_Init+0x60>)
 800192e:	2264      	movs	r2, #100	; 0x64
 8001930:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_TIM7_Init+0x60>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_TIM7_Init+0x60>)
 800193a:	f001 fbd3 	bl	80030e4 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001944:	f7ff fd5c 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_TIM7_Init+0x60>)
 8001956:	f002 fb39 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001960:	f7ff fd4e 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000430 	.word	0x20000430
 8001970:	40001400 	.word	0x40001400

08001974 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	615a      	str	r2, [r3, #20]
 800198a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_TIM14_Init+0x94>)
 800198e:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <MX_TIM14_Init+0x98>)
 8001990:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168;
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_TIM14_Init+0x94>)
 8001994:	22a8      	movs	r2, #168	; 0xa8
 8001996:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_TIM14_Init+0x94>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019b2:	4815      	ldr	r0, [pc, #84]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019b4:	f001 fb96 	bl	80030e4 <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80019be:	f7ff fd1f 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80019c2:	4811      	ldr	r0, [pc, #68]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019c4:	f001 fc4e 	bl	8003264 <HAL_TIM_PWM_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80019ce:	f7ff fd17 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d2:	2360      	movs	r3, #96	; 0x60
 80019d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019ea:	f001 ff8f 	bl	800390c <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80019f4:	f7ff fd04 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM14_Init+0x94>)
 80019fa:	f000 f901 	bl	8001c00 <HAL_TIM_MspPostInit>

}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200003e8 	.word	0x200003e8
 8001a0c:	40002000 	.word	0x40002000

08001a10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a30:	d12c      	bne.n	8001a8c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	481d      	ldr	r0, [pc, #116]	; (8001afc <HAL_TIM_Encoder_MspInit+0xec>)
 8001a86:	f000 fbeb 	bl	8002260 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a8a:	e030      	b.n	8001aee <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12b      	bne.n	8001aee <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ace:	23c0      	movs	r3, #192	; 0xc0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <HAL_TIM_Encoder_MspInit+0xec>)
 8001aea:	f000 fbb9 	bl	8002260 <HAL_GPIO_Init>
}
 8001aee:	bf00      	nop
 8001af0:	3730      	adds	r7, #48	; 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40000400 	.word	0x40000400

08001b04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10d      	bne.n	8001b32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_TIM_PWM_MspInit+0x40>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_TIM_PWM_MspInit+0x40>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_TIM_PWM_MspInit+0x40>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40000800 	.word	0x40000800
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d116      	bne.n	8001b88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2036      	movs	r0, #54	; 0x36
 8001b7c:	f000 faa7 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b80:	2036      	movs	r0, #54	; 0x36
 8001b82:	f000 fac0 	bl	8002106 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001b86:	e02e      	b.n	8001be6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d116      	bne.n	8001bc0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2037      	movs	r0, #55	; 0x37
 8001bb4:	f000 fa8b 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001bb8:	2037      	movs	r0, #55	; 0x37
 8001bba:	f000 faa4 	bl	8002106 <HAL_NVIC_EnableIRQ>
}
 8001bbe:	e012      	b.n	8001be6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM14)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10d      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_TIM_Base_MspInit+0xac>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40001000 	.word	0x40001000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40001400 	.word	0x40001400
 8001bfc:	40002000 	.word	0x40002000

08001c00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_TIM_MspPostInit+0xb4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11f      	bne.n	8001c62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_TIM_MspPostInit+0xb8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_TIM_MspPostInit+0xb8>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_TIM_MspPostInit+0xb8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c50:	2302      	movs	r3, #2
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4818      	ldr	r0, [pc, #96]	; (8001cbc <HAL_TIM_MspPostInit+0xbc>)
 8001c5c:	f000 fb00 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001c60:	e023      	b.n	8001caa <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_TIM_MspPostInit+0xc0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d11e      	bne.n	8001caa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_TIM_MspPostInit+0xb8>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <HAL_TIM_MspPostInit+0xb8>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_TIM_MspPostInit+0xb8>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <HAL_TIM_MspPostInit+0xc4>)
 8001ca6:	f000 fadb 	bl	8002260 <HAL_GPIO_Init>
}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40002000 	.word	0x40002000
 8001cc4:	40021400 	.word	0x40021400

08001cc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f002 f9f4 	bl	80040ec <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0a:	f7ff fb79 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000478 	.word	0x20000478
 8001d18:	40011000 	.word	0x40011000

08001d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_UART_MspInit+0x94>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d134      	bne.n	8001da8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4809      	ldr	r0, [pc, #36]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d94:	f000 fa64 	bl	8002260 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2025      	movs	r0, #37	; 0x25
 8001d9e:	f000 f996 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da2:	2025      	movs	r0, #37	; 0x25
 8001da4:	f000 f9af 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001dc4:	1d39      	adds	r1, r7, #4
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <__io_putchar+0x20>)
 8001dce:	f002 f9da 	bl	8004186 <HAL_UART_Transmit>
  return ch;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000478 	.word	0x20000478

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001de6:	490e      	ldr	r1, [pc, #56]	; (8001e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dfc:	4c0b      	ldr	r4, [pc, #44]	; (8001e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e0a:	f7ff fc35 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f003 fba5 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff f9db 	bl	80011cc <main>
  bx  lr    
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e24:	0800a2f4 	.word	0x0800a2f4
  ldr r2, =_sbss
 8001e28:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e2c:	200004d0 	.word	0x200004d0

08001e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_Init+0x40>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <HAL_Init+0x40>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x40>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f92b 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	200f      	movs	r0, #15
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fad0 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f943 	bl	8002122 <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb4:	f000 f90b 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	200004bc 	.word	0x200004bc

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200004bc 	.word	0x200004bc

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff feda 	bl	8001f00 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d008      	beq.n	800216c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e052      	b.n	8002212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0216 	bic.w	r2, r2, #22
 800217a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800218a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <HAL_DMA_Abort+0x62>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0208 	bic.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021bc:	e013      	b.n	80021e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021be:	f7ff fe9f 	bl	8001f00 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d90c      	bls.n	80021e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e015      	b.n	8002212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e4      	bne.n	80021be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	223f      	movs	r2, #63	; 0x3f
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e00c      	b.n	8002252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2205      	movs	r2, #5
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e16b      	b.n	8002554 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 815a 	bne.w	800254e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d005      	beq.n	80022b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80b4 	beq.w	800254e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b60      	ldr	r3, [pc, #384]	; (800256c <HAL_GPIO_Init+0x30c>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_GPIO_Init+0x30c>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_GPIO_Init+0x30c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <HAL_GPIO_Init+0x310>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_GPIO_Init+0x314>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d02b      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_GPIO_Init+0x318>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_GPIO_Init+0x31c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_GPIO_Init+0x320>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x21a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <HAL_GPIO_Init+0x324>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x216>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <HAL_GPIO_Init+0x328>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x212>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4c      	ldr	r2, [pc, #304]	; (800258c <HAL_GPIO_Init+0x32c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <HAL_GPIO_Init+0x330>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x20a>
 8002466:	2307      	movs	r3, #7
 8002468:	e00e      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800246a:	2308      	movs	r3, #8
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800246e:	2306      	movs	r3, #6
 8002470:	e00a      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002472:	2305      	movs	r3, #5
 8002474:	e008      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002476:	2304      	movs	r3, #4
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800247a:	2303      	movs	r3, #3
 800247c:	e004      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800247e:	2302      	movs	r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002486:	2300      	movs	r3, #0
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f002 0203 	and.w	r2, r2, #3
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4093      	lsls	r3, r2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x310>)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ca:	4a32      	ldr	r2, [pc, #200]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_GPIO_Init+0x334>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_GPIO_Init+0x334>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_GPIO_Init+0x334>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	f67f ae90 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40013800 	.word	0x40013800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40021400 	.word	0x40021400
 800258c:	40021800 	.word	0x40021800
 8002590:	40021c00 	.word	0x40021c00
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a8:	787b      	ldrb	r3, [r7, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b4:	e003      	b.n	80025be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	041a      	lsls	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e12b      	b.n	8002836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fda2 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002630:	f000 fd30 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a81      	ldr	r2, [pc, #516]	; (8002840 <HAL_I2C_Init+0x274>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d807      	bhi.n	8002650 <HAL_I2C_Init+0x84>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a80      	ldr	r2, [pc, #512]	; (8002844 <HAL_I2C_Init+0x278>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e006      	b.n	800265e <HAL_I2C_Init+0x92>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <HAL_I2C_Init+0x27c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0e7      	b.n	8002836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_I2C_Init+0x280>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_I2C_Init+0x274>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d802      	bhi.n	80026a0 <HAL_I2C_Init+0xd4>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	e009      	b.n	80026b4 <HAL_I2C_Init+0xe8>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_I2C_Init+0x284>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	495c      	ldr	r1, [pc, #368]	; (8002840 <HAL_I2C_Init+0x274>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d819      	bhi.n	8002708 <HAL_I2C_Init+0x13c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e59      	subs	r1, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_I2C_Init+0x138>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e59      	subs	r1, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	e051      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002704:	2304      	movs	r3, #4
 8002706:	e04f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <HAL_I2C_Init+0x168>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_I2C_Init+0x18e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Init+0x196>
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <HAL_I2C_Init+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e58      	subs	r0, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	e00f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6809      	ldr	r1, [r1, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6911      	ldr	r1, [r2, #16]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	000186a0 	.word	0x000186a0
 8002844:	001e847f 	.word	0x001e847f
 8002848:	003d08ff 	.word	0x003d08ff
 800284c:	431bde83 	.word	0x431bde83
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e264      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002872:	4ba3      	ldr	r3, [pc, #652]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d00c      	beq.n	8002898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b9d      	ldr	r3, [pc, #628]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b99      	ldr	r3, [pc, #612]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d05b      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d157      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e23f      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a90      	ldr	r2, [pc, #576]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b8b      	ldr	r3, [pc, #556]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a8a      	ldr	r2, [pc, #552]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a87      	ldr	r2, [pc, #540]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028ec:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff faf8 	bl	8001f00 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff faf4 	bl	8001f00 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e204      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xc0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff fae4 	bl	8001f00 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff fae0 	bl	8001f00 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1f0      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b6c      	ldr	r3, [pc, #432]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c4      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4952      	ldr	r1, [pc, #328]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_OscConfig+0x2b0>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff fa99 	bl	8001f00 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7ff fa95 	bl	8001f00 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1a5      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4940      	ldr	r1, [pc, #256]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_RCC_OscConfig+0x2b0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fa78 	bl	8001f00 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a14:	f7ff fa74 	bl	8001f00 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e184      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d030      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x2b4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7ff fa58 	bl	8001f00 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7ff fa54 	bl	8001f00 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e164      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x200>
 8002a72:	e015      	b.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x2b4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7ff fa41 	bl	8001f00 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a82:	f7ff fa3d 	bl	8001f00 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e14d      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a0 	beq.w	8002bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fa03 	bl	8001f00 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e011      	b.n	8002b22 <HAL_RCC_OscConfig+0x2ce>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470000 	.word	0x42470000
 8002b08:	42470e80 	.word	0x42470e80
 8002b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7ff f9f6 	bl	8001f00 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e106      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_RCC_OscConfig+0x4e4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
 8002b36:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a80      	ldr	r2, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	e01c      	b.n	8002b7e <HAL_RCC_OscConfig+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x312>
 8002b4c:	4b7b      	ldr	r3, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a7a      	ldr	r2, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a77      	ldr	r2, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x32a>
 8002b66:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a74      	ldr	r2, [pc, #464]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7ff f9bb 	bl	8001f00 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7ff f9b7 	bl	8001f00 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0c5      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ee      	beq.n	8002b8e <HAL_RCC_OscConfig+0x33a>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff f9a5 	bl	8001f00 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7ff f9a1 	bl	8001f00 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0af      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 809b 	beq.w	8002d2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d05c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d141      	bne.n	8002c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7ff f975 	bl	8001f00 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7ff f971 	bl	8001f00 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e081      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	4937      	ldr	r1, [pc, #220]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c62:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f94a 	bl	8001f00 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff f946 	bl	8001f00 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e056      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x41c>
 8002c8e:	e04e      	b.n	8002d2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff f933 	bl	8001f00 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7ff f92f 	bl	8001f00 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e03f      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x44a>
 8002cbc:	e037      	b.n	8002d2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e032      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d028      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d121      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d11a      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	42470060 	.word	0x42470060

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cc      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90c      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d044      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e067      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e34:	f7ff f864 	bl	8001f00 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7ff f860 	bl	8001f00 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20c      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f821 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe ffc4 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08009e18 	.word	0x08009e18
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f16:	2100      	movs	r1, #0
 8002f18:	6079      	str	r1, [r7, #4]
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	60f9      	str	r1, [r7, #12]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f22:	2100      	movs	r1, #0
 8002f24:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f26:	4952      	ldr	r1, [pc, #328]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f28:	6889      	ldr	r1, [r1, #8]
 8002f2a:	f001 010c 	and.w	r1, r1, #12
 8002f2e:	2908      	cmp	r1, #8
 8002f30:	d00d      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x3e>
 8002f32:	2908      	cmp	r1, #8
 8002f34:	f200 8094 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x150>
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x32>
 8002f3c:	2904      	cmp	r1, #4
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x38>
 8002f40:	e08e      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f42:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f44:	60bb      	str	r3, [r7, #8]
       break;
 8002f46:	e08e      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f4a:	60bb      	str	r3, [r7, #8]
      break;
 8002f4c:	e08b      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f4e:	4948      	ldr	r1, [pc, #288]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f50:	6849      	ldr	r1, [r1, #4]
 8002f52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f56:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f58:	4945      	ldr	r1, [pc, #276]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f5a:	6849      	ldr	r1, [r1, #4]
 8002f5c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d024      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4942      	ldr	r1, [pc, #264]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f66:	6849      	ldr	r1, [r1, #4]
 8002f68:	0989      	lsrs	r1, r1, #6
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f74:	f04f 0500 	mov.w	r5, #0
 8002f78:	ea00 0204 	and.w	r2, r0, r4
 8002f7c:	ea01 0305 	and.w	r3, r1, r5
 8002f80:	493d      	ldr	r1, [pc, #244]	; (8003078 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f82:	fb01 f003 	mul.w	r0, r1, r3
 8002f86:	2100      	movs	r1, #0
 8002f88:	fb01 f102 	mul.w	r1, r1, r2
 8002f8c:	1844      	adds	r4, r0, r1
 8002f8e:	493a      	ldr	r1, [pc, #232]	; (8003078 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f90:	fba2 0101 	umull	r0, r1, r2, r1
 8002f94:	1863      	adds	r3, r4, r1
 8002f96:	4619      	mov	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f7fd fe72 	bl	8000c88 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e04a      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	ea02 0400 	and.w	r4, r2, r0
 8002fc6:	ea03 0501 	and.w	r5, r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	014b      	lsls	r3, r1, #5
 8002fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fdc:	0142      	lsls	r2, r0, #5
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	1b00      	subs	r0, r0, r4
 8002fe4:	eb61 0105 	sbc.w	r1, r1, r5
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	018b      	lsls	r3, r1, #6
 8002ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff6:	0182      	lsls	r2, r0, #6
 8002ff8:	1a12      	subs	r2, r2, r0
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	00d9      	lsls	r1, r3, #3
 8003008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800300c:	00d0      	lsls	r0, r2, #3
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	1912      	adds	r2, r2, r4
 8003014:	eb45 0303 	adc.w	r3, r5, r3
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	0299      	lsls	r1, r3, #10
 8003022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003026:	0290      	lsls	r0, r2, #10
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f7fd fe26 	bl	8000c88 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	60bb      	str	r3, [r7, #8]
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCC_GetSysClockFreq+0x164>)
 8003062:	60bb      	str	r3, [r7, #8]
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	68bb      	ldr	r3, [r7, #8]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	017d7840 	.word	0x017d7840

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08009e28 	.word	0x08009e28

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08009e28 	.word	0x08009e28

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e041      	b.n	800317a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fd1c 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fcdc 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d001      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e04e      	b.n	800323a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_TIM_Base_Start_IT+0xc4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c6:	d01d      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1f      	ldr	r2, [pc, #124]	; (800324c <HAL_TIM_Base_Start_IT+0xc8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <HAL_TIM_Base_Start_IT+0xcc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_TIM_Base_Start_IT+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_TIM_Base_Start_IT+0xd4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <HAL_TIM_Base_Start_IT+0xd8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x80>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a18      	ldr	r2, [pc, #96]	; (8003260 <HAL_TIM_Base_Start_IT+0xdc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d111      	bne.n	8003228 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d010      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	e007      	b.n	8003238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40010400 	.word	0x40010400
 800325c:	40014000 	.word	0x40014000
 8003260:	40001800 	.word	0x40001800

08003264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e041      	b.n	80032fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fc3a 	bl	8001b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fc1c 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x24>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e022      	b.n	800336e <HAL_TIM_PWM_Start+0x6a>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d109      	bne.n	8003342 <HAL_TIM_PWM_Start+0x3e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e015      	b.n	800336e <HAL_TIM_PWM_Start+0x6a>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d109      	bne.n	800335c <HAL_TIM_PWM_Start+0x58>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e008      	b.n	800336e <HAL_TIM_PWM_Start+0x6a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07c      	b.n	8003470 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0x82>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	e013      	b.n	80033ae <HAL_TIM_PWM_Start+0xaa>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start+0x92>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	e00b      	b.n	80033ae <HAL_TIM_PWM_Start+0xaa>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start+0xa2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	e003      	b.n	80033ae <HAL_TIM_PWM_Start+0xaa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fde2 	bl	8003f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <HAL_TIM_PWM_Start+0x174>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_PWM_Start+0xcc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2c      	ldr	r2, [pc, #176]	; (800347c <HAL_TIM_PWM_Start+0x178>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_PWM_Start+0xd0>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_TIM_PWM_Start+0xd2>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_TIM_PWM_Start+0x174>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d022      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d01d      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <HAL_TIM_PWM_Start+0x17c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_TIM_PWM_Start+0x180>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_TIM_PWM_Start+0x184>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_TIM_PWM_Start+0x178>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <HAL_TIM_PWM_Start+0x188>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIM_PWM_Start+0x136>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_TIM_PWM_Start+0x18c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d010      	beq.n	800346e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	e007      	b.n	800346e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40010000 	.word	0x40010000
 800347c:	40010400 	.word	0x40010400
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40001800 	.word	0x40001800

08003494 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e097      	b.n	80035d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fe faa7 	bl	8001a10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d8:	f023 0307 	bic.w	r3, r3, #7
 80034dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 faf9 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4313      	orrs	r3, r2
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003534:	f023 030c 	bic.w	r3, r3, #12
 8003538:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4313      	orrs	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	011a      	lsls	r2, r3, #4
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	4313      	orrs	r3, r2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4313      	orrs	r3, r2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003600:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003608:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d110      	bne.n	8003632 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003616:	7b7b      	ldrb	r3, [r7, #13]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d001      	beq.n	8003620 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e069      	b.n	80036f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003630:	e031      	b.n	8003696 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d110      	bne.n	800365a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003638:	7bbb      	ldrb	r3, [r7, #14]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800363e:	7b3b      	ldrb	r3, [r7, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e055      	b.n	80036f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003658:	e01d      	b.n	8003696 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d108      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003666:	7b7b      	ldrb	r3, [r7, #13]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d102      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800366c:	7b3b      	ldrb	r3, [r7, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e03e      	b.n	80036f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_TIM_Encoder_Start+0xc4>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d008      	beq.n	80036b4 <HAL_TIM_Encoder_Start+0xd4>
 80036a2:	e00f      	b.n	80036c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fc67 	bl	8003f80 <TIM_CCxChannelCmd>
      break;
 80036b2:	e016      	b.n	80036e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	2104      	movs	r1, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fc5f 	bl	8003f80 <TIM_CCxChannelCmd>
      break;
 80036c2:	e00e      	b.n	80036e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fc57 	bl	8003f80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	2104      	movs	r1, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fc50 	bl	8003f80 <TIM_CCxChannelCmd>
      break;
 80036e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0202 	mvn.w	r2, #2
 8003728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f9b0 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f9a2 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f9b3 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0204 	mvn.w	r2, #4
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f986 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f978 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f989 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f95c 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f94e 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f95f 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b10      	cmp	r3, #16
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2208      	movs	r2, #8
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f932 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f924 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f935 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fd64 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fc16 	bl	80040d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f8fa 	bl	8003acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0220 	mvn.w	r2, #32
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fbe0 	bl	80040c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003926:	2302      	movs	r3, #2
 8003928:	e0ae      	b.n	8003a88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	f200 809f 	bhi.w	8003a78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003975 	.word	0x08003975
 8003944:	08003a79 	.word	0x08003a79
 8003948:	08003a79 	.word	0x08003a79
 800394c:	08003a79 	.word	0x08003a79
 8003950:	080039b5 	.word	0x080039b5
 8003954:	08003a79 	.word	0x08003a79
 8003958:	08003a79 	.word	0x08003a79
 800395c:	08003a79 	.word	0x08003a79
 8003960:	080039f7 	.word	0x080039f7
 8003964:	08003a79 	.word	0x08003a79
 8003968:	08003a79 	.word	0x08003a79
 800396c:	08003a79 	.word	0x08003a79
 8003970:	08003a37 	.word	0x08003a37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f950 	bl	8003c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0208 	orr.w	r2, r2, #8
 800398e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6999      	ldr	r1, [r3, #24]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	619a      	str	r2, [r3, #24]
      break;
 80039b2:	e064      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f9a0 	bl	8003d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6999      	ldr	r1, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	619a      	str	r2, [r3, #24]
      break;
 80039f4:	e043      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f9f5 	bl	8003dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0208 	orr.w	r2, r2, #8
 8003a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0204 	bic.w	r2, r2, #4
 8003a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69d9      	ldr	r1, [r3, #28]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
      break;
 8003a34:	e023      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fa49 	bl	8003ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69d9      	ldr	r1, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	61da      	str	r2, [r3, #28]
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d027      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d023      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d017      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <TIM_Base_SetConfig+0x128>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40010400 	.word	0x40010400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800
 8003c14:	40001800 	.word	0x40001800
 8003c18:	40001c00 	.word	0x40001c00
 8003c1c:	40002000 	.word	0x40002000

08003c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0302 	bic.w	r3, r3, #2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <TIM_OC1_SetConfig+0xd8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC1_SetConfig+0x64>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <TIM_OC1_SetConfig+0xdc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10c      	bne.n	8003c9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0308 	bic.w	r3, r3, #8
 8003c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <TIM_OC1_SetConfig+0xd8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC1_SetConfig+0x8e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <TIM_OC1_SetConfig+0xdc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010400 	.word	0x40010400

08003d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0210 	bic.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0320 	bic.w	r3, r3, #32
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <TIM_OC2_SetConfig+0xe4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_OC2_SetConfig+0x68>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <TIM_OC2_SetConfig+0xe8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10d      	bne.n	8003d84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <TIM_OC2_SetConfig+0xe4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC2_SetConfig+0x94>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <TIM_OC2_SetConfig+0xe8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d113      	bne.n	8003dbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40010400 	.word	0x40010400

08003dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <TIM_OC3_SetConfig+0xe0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_OC3_SetConfig+0x66>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <TIM_OC3_SetConfig+0xe4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10d      	bne.n	8003e6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <TIM_OC3_SetConfig+0xe0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC3_SetConfig+0x92>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <TIM_OC3_SetConfig+0xe4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d113      	bne.n	8003ea6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <TIM_OC4_SetConfig+0xa4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC4_SetConfig+0x68>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <TIM_OC4_SetConfig+0xa8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d109      	bne.n	8003f50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	019b      	lsls	r3, r3, #6
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2201      	movs	r2, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e05a      	b.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d01d      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10c      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800
 80040b4:	40000c00 	.word	0x40000c00
 80040b8:	40010400 	.word	0x40010400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40001800 	.word	0x40001800

080040c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e03f      	b.n	800417e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd fe02 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fddb 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08a      	sub	sp, #40	; 0x28
 800418a:	af02      	add	r7, sp, #8
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d17c      	bne.n	80042a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_UART_Transmit+0x2c>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e075      	b.n	80042a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Transmit+0x3e>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e06e      	b.n	80042a2 <HAL_UART_Transmit+0x11c>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2221      	movs	r2, #33	; 0x21
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041da:	f7fd fe91 	bl	8001f00 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d108      	bne.n	8004208 <HAL_UART_Transmit+0x82>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	e003      	b.n	8004210 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004218:	e02a      	b.n	8004270 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fb1f 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e036      	b.n	80042a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004248:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	3302      	adds	r3, #2
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	e007      	b.n	8004262 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3301      	adds	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1cf      	bne.n	800421a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2140      	movs	r1, #64	; 0x40
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 faef 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e006      	b.n	80042a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d11d      	bne.n	8004300 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_Receive_IT+0x26>
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e016      	b.n	8004302 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Receive_IT+0x38>
 80042de:	2302      	movs	r3, #2
 80042e0:	e00f      	b.n	8004302 <HAL_UART_Receive_IT+0x58>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fb24 	bl	8004944 <UART_Start_Receive_IT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	e000      	b.n	8004302 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b0ba      	sub	sp, #232	; 0xe8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800434a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_UART_IRQHandler+0x66>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fc03 	bl	8004b76 <UART_Receive_IT>
      return;
 8004370:	e256      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80de 	beq.w	8004538 <HAL_UART_IRQHandler+0x22c>
 800437c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80d1 	beq.w	8004538 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xae>
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_UART_IRQHandler+0xd2>
 80043c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_UART_IRQHandler+0xf6>
 80043ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0204 	orr.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d011      	beq.n	8004432 <HAL_UART_IRQHandler+0x126>
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800441a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f043 0208 	orr.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 81ed 	beq.w	8004816 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_UART_IRQHandler+0x14e>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb8e 	bl	8004b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_UART_IRQHandler+0x17a>
 800447e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04f      	beq.n	8004526 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa96 	bl	80049b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d141      	bne.n	800451e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1d9      	bne.n	800449a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d013      	beq.n	8004516 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	4a7d      	ldr	r2, [pc, #500]	; (80046e8 <HAL_UART_IRQHandler+0x3dc>)
 80044f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fd fe8d 	bl	800221a <HAL_DMA_Abort_IT>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	e00e      	b.n	8004534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f990 	bl	800483c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451c:	e00a      	b.n	8004534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f98c 	bl	800483c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	e006      	b.n	8004534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f988 	bl	800483c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004532:	e170      	b.n	8004816 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004534:	bf00      	nop
    return;
 8004536:	e16e      	b.n	8004816 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	2b01      	cmp	r3, #1
 800453e:	f040 814a 	bne.w	80047d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8143 	beq.w	80047d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 813c 	beq.w	80047d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	f040 80b4 	bne.w	80046ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8140 	beq.w	800481a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800459e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045a2:	429a      	cmp	r2, r3
 80045a4:	f080 8139 	bcs.w	800481a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	f000 8088 	beq.w	80046ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1d9      	bne.n	80045be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800461a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800462e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004632:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e1      	bne.n	800460a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3314      	adds	r3, #20
 8004666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800466a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800466c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004670:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469e:	f023 0310 	bic.w	r3, r3, #16
 80046a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e3      	bne.n	800468c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd fd36 	bl	800213a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8b6 	bl	8004850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046e4:	e099      	b.n	800481a <HAL_UART_IRQHandler+0x50e>
 80046e6:	bf00      	nop
 80046e8:	08004a7f 	.word	0x08004a7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 808b 	beq.w	800481e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8086 	beq.w	800481e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004736:	647a      	str	r2, [r7, #68]	; 0x44
 8004738:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800473c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e3      	bne.n	8004712 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	623b      	str	r3, [r7, #32]
   return(result);
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3314      	adds	r3, #20
 800476a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800476e:	633a      	str	r2, [r7, #48]	; 0x30
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e3      	bne.n	800474a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0310 	bic.w	r3, r3, #16
 80047a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	617b      	str	r3, [r7, #20]
   return(result);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e3      	bne.n	8004790 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f83e 	bl	8004850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047d4:	e023      	b.n	800481e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_UART_IRQHandler+0x4ea>
 80047e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f959 	bl	8004aa6 <UART_Transmit_IT>
    return;
 80047f4:	e014      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <HAL_UART_IRQHandler+0x514>
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f999 	bl	8004b46 <UART_EndTransmit_IT>
    return;
 8004814:	e004      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
    return;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
      return;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
      return;
 800481e:	bf00      	nop
  }
}
 8004820:	37e8      	adds	r7, #232	; 0xe8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b090      	sub	sp, #64	; 0x40
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	e050      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004880:	d04c      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <UART_WaitOnFlagUntilTimeout+0x30>
 8004888:	f7fd fb3a 	bl	8001f00 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004894:	429a      	cmp	r2, r3
 8004896:	d241      	bcs.n	800491c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b8:	637a      	str	r2, [r7, #52]	; 0x34
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ec:	623a      	str	r2, [r7, #32]
 80048ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	6a3a      	ldr	r2, [r7, #32]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e00f      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	429a      	cmp	r2, r3
 8004938:	d09f      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3740      	adds	r7, #64	; 0x40
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2222      	movs	r2, #34	; 0x22
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b095      	sub	sp, #84	; 0x54
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e0:	643a      	str	r2, [r7, #64]	; 0x40
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d119      	bne.n	8004a64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	647b      	str	r3, [r7, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a50:	61ba      	str	r2, [r7, #24]
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a72:	bf00      	nop
 8004a74:	3754      	adds	r7, #84	; 0x54
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fecf 	bl	800483c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b21      	cmp	r3, #33	; 0x21
 8004ab8:	d13e      	bne.n	8004b38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d114      	bne.n	8004aee <UART_Transmit_IT+0x48>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d110      	bne.n	8004aee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	1c9a      	adds	r2, r3, #2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]
 8004aec:	e008      	b.n	8004b00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6211      	str	r1, [r2, #32]
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b38:	2302      	movs	r3, #2
  }
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe5e 	bl	8004828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08c      	sub	sp, #48	; 0x30
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b22      	cmp	r3, #34	; 0x22
 8004b88:	f040 80ab 	bne.w	8004ce2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b94:	d117      	bne.n	8004bc6 <UART_Receive_IT+0x50>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc4:	e026      	b.n	8004c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d007      	beq.n	8004bea <UART_Receive_IT+0x74>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <UART_Receive_IT+0x82>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e008      	b.n	8004c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d15a      	bne.n	8004cde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0220 	bic.w	r2, r2, #32
 8004c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d135      	bne.n	8004cd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	623a      	str	r2, [r7, #32]
 8004c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	69f9      	ldr	r1, [r7, #28]
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d10a      	bne.n	8004cc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fdbf 	bl	8004850 <HAL_UARTEx_RxEventCallback>
 8004cd2:	e002      	b.n	8004cda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fc fb53 	bl	8001380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e002      	b.n	8004ce4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	b09f      	sub	sp, #124	; 0x7c
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	68d9      	ldr	r1, [r3, #12]
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	ea40 0301 	orr.w	r3, r0, r1
 8004d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d30:	f021 010c 	bic.w	r1, r1, #12
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	6999      	ldr	r1, [r3, #24]
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	ea40 0301 	orr.w	r3, r0, r1
 8004d54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4bc5      	ldr	r3, [pc, #788]	; (8005070 <UART_SetConfig+0x384>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d004      	beq.n	8004d6a <UART_SetConfig+0x7e>
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4bc3      	ldr	r3, [pc, #780]	; (8005074 <UART_SetConfig+0x388>)
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d103      	bne.n	8004d72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6a:	f7fe f9a7 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8004d6e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d70:	e002      	b.n	8004d78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d72:	f7fe f98f 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004d76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d80:	f040 80b6 	bne.w	8004ef0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d86:	461c      	mov	r4, r3
 8004d88:	f04f 0500 	mov.w	r5, #0
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	462b      	mov	r3, r5
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	6439      	str	r1, [r7, #64]	; 0x40
 8004d94:	415b      	adcs	r3, r3
 8004d96:	647b      	str	r3, [r7, #68]	; 0x44
 8004d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9c:	1912      	adds	r2, r2, r4
 8004d9e:	eb45 0303 	adc.w	r3, r5, r3
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	00d9      	lsls	r1, r3, #3
 8004dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db0:	00d0      	lsls	r0, r2, #3
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	1911      	adds	r1, r2, r4
 8004db8:	6639      	str	r1, [r7, #96]	; 0x60
 8004dba:	416b      	adcs	r3, r5
 8004dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	1891      	adds	r1, r2, r2
 8004dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dcc:	415b      	adcs	r3, r3
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004dd8:	f7fb ff56 	bl	8000c88 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4ba5      	ldr	r3, [pc, #660]	; (8005078 <UART_SetConfig+0x38c>)
 8004de2:	fba3 2302 	umull	r2, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	011e      	lsls	r6, r3, #4
 8004dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dec:	461c      	mov	r4, r3
 8004dee:	f04f 0500 	mov.w	r5, #0
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	1891      	adds	r1, r2, r2
 8004df8:	6339      	str	r1, [r7, #48]	; 0x30
 8004dfa:	415b      	adcs	r3, r3
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e02:	1912      	adds	r2, r2, r4
 8004e04:	eb45 0303 	adc.w	r3, r5, r3
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	00d9      	lsls	r1, r3, #3
 8004e12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e16:	00d0      	lsls	r0, r2, #3
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	1911      	adds	r1, r2, r4
 8004e1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e20:	416b      	adcs	r3, r5
 8004e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e32:	415b      	adcs	r3, r3
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e3e:	f7fb ff23 	bl	8000c88 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4b8c      	ldr	r3, [pc, #560]	; (8005078 <UART_SetConfig+0x38c>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	; 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	3332      	adds	r3, #50	; 0x32
 8004e5a:	4a87      	ldr	r2, [pc, #540]	; (8005078 <UART_SetConfig+0x38c>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e68:	441e      	add	r6, r3
 8004e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	1894      	adds	r4, r2, r2
 8004e78:	623c      	str	r4, [r7, #32]
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e82:	1812      	adds	r2, r2, r0
 8004e84:	eb41 0303 	adc.w	r3, r1, r3
 8004e88:	f04f 0400 	mov.w	r4, #0
 8004e8c:	f04f 0500 	mov.w	r5, #0
 8004e90:	00dd      	lsls	r5, r3, #3
 8004e92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e96:	00d4      	lsls	r4, r2, #3
 8004e98:	4622      	mov	r2, r4
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	1814      	adds	r4, r2, r0
 8004e9e:	653c      	str	r4, [r7, #80]	; 0x50
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	1891      	adds	r1, r2, r2
 8004eb0:	61b9      	str	r1, [r7, #24]
 8004eb2:	415b      	adcs	r3, r3
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ebe:	f7fb fee3 	bl	8000c88 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4b6c      	ldr	r3, [pc, #432]	; (8005078 <UART_SetConfig+0x38c>)
 8004ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	2164      	movs	r1, #100	; 0x64
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	3332      	adds	r3, #50	; 0x32
 8004eda:	4a67      	ldr	r2, [pc, #412]	; (8005078 <UART_SetConfig+0x38c>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	f003 0207 	and.w	r2, r3, #7
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4432      	add	r2, r6
 8004eec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eee:	e0b9      	b.n	8005064 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef2:	461c      	mov	r4, r3
 8004ef4:	f04f 0500 	mov.w	r5, #0
 8004ef8:	4622      	mov	r2, r4
 8004efa:	462b      	mov	r3, r5
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	6139      	str	r1, [r7, #16]
 8004f00:	415b      	adcs	r3, r3
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f08:	1912      	adds	r2, r2, r4
 8004f0a:	eb45 0303 	adc.w	r3, r5, r3
 8004f0e:	f04f 0000 	mov.w	r0, #0
 8004f12:	f04f 0100 	mov.w	r1, #0
 8004f16:	00d9      	lsls	r1, r3, #3
 8004f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f1c:	00d0      	lsls	r0, r2, #3
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	eb12 0804 	adds.w	r8, r2, r4
 8004f26:	eb43 0905 	adc.w	r9, r3, r5
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f04f 0100 	mov.w	r1, #0
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	008b      	lsls	r3, r1, #2
 8004f3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f42:	0082      	lsls	r2, r0, #2
 8004f44:	4640      	mov	r0, r8
 8004f46:	4649      	mov	r1, r9
 8004f48:	f7fb fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b49      	ldr	r3, [pc, #292]	; (8005078 <UART_SetConfig+0x38c>)
 8004f52:	fba3 2302 	umull	r2, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	011e      	lsls	r6, r3, #4
 8004f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	1894      	adds	r4, r2, r2
 8004f68:	60bc      	str	r4, [r7, #8]
 8004f6a:	415b      	adcs	r3, r3
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f72:	1812      	adds	r2, r2, r0
 8004f74:	eb41 0303 	adc.w	r3, r1, r3
 8004f78:	f04f 0400 	mov.w	r4, #0
 8004f7c:	f04f 0500 	mov.w	r5, #0
 8004f80:	00dd      	lsls	r5, r3, #3
 8004f82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f86:	00d4      	lsls	r4, r2, #3
 8004f88:	4622      	mov	r2, r4
 8004f8a:	462b      	mov	r3, r5
 8004f8c:	1814      	adds	r4, r2, r0
 8004f8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f90:	414b      	adcs	r3, r1
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f04f 0100 	mov.w	r1, #0
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	008b      	lsls	r3, r1, #2
 8004fa8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fac:	0082      	lsls	r2, r0, #2
 8004fae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fb2:	f7fb fe69 	bl	8000c88 <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <UART_SetConfig+0x38c>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2164      	movs	r1, #100	; 0x64
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	3332      	adds	r3, #50	; 0x32
 8004fce:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <UART_SetConfig+0x38c>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fda:	441e      	add	r6, r3
 8004fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	1894      	adds	r4, r2, r2
 8004fea:	603c      	str	r4, [r7, #0]
 8004fec:	415b      	adcs	r3, r3
 8004fee:	607b      	str	r3, [r7, #4]
 8004ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ff4:	1812      	adds	r2, r2, r0
 8004ff6:	eb41 0303 	adc.w	r3, r1, r3
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	f04f 0500 	mov.w	r5, #0
 8005002:	00dd      	lsls	r5, r3, #3
 8005004:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005008:	00d4      	lsls	r4, r2, #3
 800500a:	4622      	mov	r2, r4
 800500c:	462b      	mov	r3, r5
 800500e:	eb12 0a00 	adds.w	sl, r2, r0
 8005012:	eb43 0b01 	adc.w	fp, r3, r1
 8005016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4618      	mov	r0, r3
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	008b      	lsls	r3, r1, #2
 800502a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800502e:	0082      	lsls	r2, r0, #2
 8005030:	4650      	mov	r0, sl
 8005032:	4659      	mov	r1, fp
 8005034:	f7fb fe28 	bl	8000c88 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <UART_SetConfig+0x38c>)
 800503e:	fba3 1302 	umull	r1, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	2164      	movs	r1, #100	; 0x64
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	3332      	adds	r3, #50	; 0x32
 8005050:	4a09      	ldr	r2, [pc, #36]	; (8005078 <UART_SetConfig+0x38c>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4432      	add	r2, r6
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	377c      	adds	r7, #124	; 0x7c
 8005068:	46bd      	mov	sp, r7
 800506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506e:	bf00      	nop
 8005070:	40011000 	.word	0x40011000
 8005074:	40011400 	.word	0x40011400
 8005078:	51eb851f 	.word	0x51eb851f

0800507c <Angular_init>:
// Created by crepusculumx on 2021/10/19.
//

#include "angular.h"

void Angular_init(Angular *angular, TIM_HandleTypeDef *ENCODER_TIM_HANDLE) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  angular->ENCODER_TIM_HANDLE = ENCODER_TIM_HANDLE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	601a      	str	r2, [r3, #0]

  // start encoder
  HAL_TIM_Encoder_Start(angular->ENCODER_TIM_HANDLE, TIM_CHANNEL_ALL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	213c      	movs	r1, #60	; 0x3c
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe faa4 	bl	80035e0 <HAL_TIM_Encoder_Start>
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <Angular_get_cur_angle>:

int32_t Angular_get_cur_angle(Angular *angular) {
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  return (int32_t) __HAL_TIM_GET_COUNTER(angular->ENCODER_TIM_HANDLE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <Controller_init>:
//

#include "controller.h"
#include "stdio.h"

void Controller_init(Controller *controller, TIM_HandleTypeDef *COUNTER_TIM_HANDLE, Motor *motor, Angular *angular) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  controller->COUNTER_TIM_HANDLE = COUNTER_TIM_HANDLE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	609a      	str	r2, [r3, #8]
  controller->motor = motor;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
  controller->angular = angular;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	605a      	str	r2, [r3, #4]

  // start counter
  HAL_TIM_Base_Start_IT(controller->COUNTER_TIM_HANDLE);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe f84f 	bl	8003184 <HAL_TIM_Base_Start_IT>
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <Controller_pid>:

void Controller_pid(Controller *controller, uint32_t rate) {
 80050f0:	b5b0      	push	{r4, r5, r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  double kp = 7, ki = 0, kd = 7;
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	4b3b      	ldr	r3, [pc, #236]	; (80051ec <Controller_pid+0xfc>)
 8005100:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	4b35      	ldr	r3, [pc, #212]	; (80051ec <Controller_pid+0xfc>)
 8005116:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int32_t cur_pos = Angular_get_cur_angle(controller->angular);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff ffbe 	bl	80050a0 <Angular_get_cur_angle>
 8005124:	61f8      	str	r0, [r7, #28]
//  printf("cur_pos %ld", cur_pos);
  int32_t cur_err;
  cur_err = 5000 - cur_pos;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800512c:	3308      	adds	r3, #8
 800512e:	61bb      	str	r3, [r7, #24]

//  printf("cur_err = %ld\n", cur_err);
  double u = kp * cur_err + ki * controller->integral + kd * (cur_err - controller->lst_err);
 8005130:	69b8      	ldr	r0, [r7, #24]
 8005132:	f7fb f9f7 	bl	8000524 <__aeabi_i2d>
 8005136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800513a:	f7fb fa5d 	bl	80005f8 <__aeabi_dmul>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4614      	mov	r4, r2
 8005144:	461d      	mov	r5, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb f9ea 	bl	8000524 <__aeabi_i2d>
 8005150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005154:	f7fb fa50 	bl	80005f8 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb f894 	bl	800028c <__adddf3>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4614      	mov	r4, r2
 800516a:	461d      	mov	r5, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f9d5 	bl	8000524 <__aeabi_i2d>
 800517a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517e:	f7fb fa3b 	bl	80005f8 <__aeabi_dmul>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	f7fb f87f 	bl	800028c <__adddf3>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double vel = -u;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	60fb      	str	r3, [r7, #12]
//  printf("p = %lf\n", kp * cur_err);
//  printf("d = %lf\n", kd * (cur_err - controller->lst_err));
//  printf("vel = %lf\n", vel);
  if (-1000 < cur_err && cur_err < 1000) {
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80051a8:	dd0b      	ble.n	80051c2 <Controller_pid+0xd2>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b0:	da07      	bge.n	80051c2 <Controller_pid+0xd2>
    Motor_set_target_state(controller->motor, vel);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	ed97 0b02 	vldr	d0, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f8fc 	bl	80053b8 <Motor_set_target_state>
 80051c0:	e006      	b.n	80051d0 <Controller_pid+0xe0>
  } else {
    Motor_set_pwm(controller->motor, 1000);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f889 	bl	80052e2 <Motor_set_pwm>
  }

  controller->lst_err = cur_err;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	611a      	str	r2, [r3, #16]
  controller->integral += cur_err;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	441a      	add	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
}
 80051e2:	bf00      	nop
 80051e4:	3738      	adds	r7, #56	; 0x38
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ea:	bf00      	nop
 80051ec:	401c0000 	.word	0x401c0000

080051f0 <max>:
//

#include <stdio.h>
#include "motor.h"

uint32_t max(uint32_t a, uint32_t b) {
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  return a > b ? a : b;
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4293      	cmp	r3, r2
 8005200:	bf38      	it	cc
 8005202:	4613      	movcc	r3, r2
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <min>:

uint32_t min(uint32_t a, uint32_t b) {
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  return a > b ? b : a;
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4293      	cmp	r3, r2
 8005220:	bf28      	it	cs
 8005222:	4613      	movcs	r3, r2
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <Motor_init>:
                TIM_HandleTypeDef *COUNTER_TIM_HANDLE,
                GPIO_TypeDef *EN_GPIO_Port,
                uint16_t EN_GPIO_Pin,
                GPIO_TypeDef *DIR_GPIO_Port,
                uint16_t DIR_GPIO_Pin
) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  motor->PWM_TIM_HANDLE = PWM_TIM_HANDLE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	601a      	str	r2, [r3, #0]
  motor->PWM_TIM_CHANNEL = PWM_TIM_CHANNEL;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]

  motor->ENCODER_TIM_HANDLE = ENCODER_TIM_HANDLE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	609a      	str	r2, [r3, #8]

  motor->COUNTER_TIM_HANDLE = COUNTER_TIM_HANDLE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	60da      	str	r2, [r3, #12]

  motor->EN_GPIO_Port = EN_GPIO_Port;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	611a      	str	r2, [r3, #16]
  motor->EN_GPIO_Pin = EN_GPIO_Pin;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8c3a      	ldrh	r2, [r7, #32]
 8005260:	829a      	strh	r2, [r3, #20]

  motor->DIR_GPIO_Port = DIR_GPIO_Port;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	619a      	str	r2, [r3, #24]
  motor->DIR_GPIO_Pin = DIR_GPIO_Pin;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800526c:	839a      	strh	r2, [r3, #28]

  // start pwm
  HAL_TIM_PWM_Start(motor->PWM_TIM_HANDLE, motor->PWM_TIM_CHANNEL);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7fe f843 	bl	8003304 <HAL_TIM_PWM_Start>

  // start encoder
  motor->lst_encoder_cnt = 0;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_Encoder_Start(motor->ENCODER_TIM_HANDLE, TIM_CHANNEL_ALL);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	213c      	movs	r1, #60	; 0x3c
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe f9a8 	bl	80035e0 <HAL_TIM_Encoder_Start>

  // start counter
  HAL_TIM_Base_Start_IT(motor->COUNTER_TIM_HANDLE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd ff75 	bl	8003184 <HAL_TIM_Base_Start_IT>

  // start EN
  HAL_GPIO_WritePin(motor->EN_GPIO_Port, motor->EN_GPIO_Pin, GPIO_PIN_SET);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6918      	ldr	r0, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8a9b      	ldrh	r3, [r3, #20]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4619      	mov	r1, r3
 80052a6:	f7fd f977 	bl	8002598 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor->DIR_GPIO_Port, motor->DIR_GPIO_Pin, GPIO_PIN_SET);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6998      	ldr	r0, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8b9b      	ldrh	r3, [r3, #28]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7fd f96f 	bl	8002598 <HAL_GPIO_WritePin>
  // start

  // default target
  motor->target_vel = 0;
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  Motor_set_pwm(motor, 1000);
 80052c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f808 	bl	80052e2 <Motor_set_pwm>
  Motor_set_dir(motor, CCW);
 80052d2:	2101      	movs	r1, #1
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f83e 	bl	8005356 <Motor_set_dir>
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <Motor_set_pwm>:

void Motor_set_pwm(Motor *motor, uint32_t pwm) {
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  motor->pwm = pwm;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (motor->pwm > 1000) motor->pwm = 1000;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fa:	d903      	bls.n	8005304 <Motor_set_pwm+0x22>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005302:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_TIM_SetCompare(motor->PWM_TIM_HANDLE, motor->PWM_TIM_CHANNEL, pwm);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <Motor_set_pwm+0x36>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005316:	e018      	b.n	800534a <Motor_set_pwm+0x68>
    __HAL_TIM_SetCompare(motor->PWM_TIM_HANDLE, motor->PWM_TIM_CHANNEL, pwm);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d105      	bne.n	800532c <Motor_set_pwm+0x4a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6393      	str	r3, [r2, #56]	; 0x38
}
 800532a:	e00e      	b.n	800534a <Motor_set_pwm+0x68>
    __HAL_TIM_SetCompare(motor->PWM_TIM_HANDLE, motor->PWM_TIM_CHANNEL, pwm);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d105      	bne.n	8005340 <Motor_set_pwm+0x5e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800533e:	e004      	b.n	800534a <Motor_set_pwm+0x68>
    __HAL_TIM_SetCompare(motor->PWM_TIM_HANDLE, motor->PWM_TIM_CHANNEL, pwm);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6413      	str	r3, [r2, #64]	; 0x40
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <Motor_set_dir>:

void Motor_set_dir(Motor *motor, rot_dir dir) {
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  switch (dir) {
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <Motor_set_dir+0x28>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d111      	bne.n	8005390 <Motor_set_dir+0x3a>
    case CCW:HAL_GPIO_WritePin(motor->DIR_GPIO_Port, motor->DIR_GPIO_Pin, GPIO_PIN_SET);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6998      	ldr	r0, [r3, #24]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8b9b      	ldrh	r3, [r3, #28]
 8005374:	2201      	movs	r2, #1
 8005376:	4619      	mov	r1, r3
 8005378:	f7fd f90e 	bl	8002598 <HAL_GPIO_WritePin>
      break;
 800537c:	e009      	b.n	8005392 <Motor_set_dir+0x3c>
    case CW:HAL_GPIO_WritePin(motor->DIR_GPIO_Port, motor->DIR_GPIO_Pin, GPIO_PIN_RESET);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6998      	ldr	r0, [r3, #24]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8b9b      	ldrh	r3, [r3, #28]
 8005386:	2200      	movs	r2, #0
 8005388:	4619      	mov	r1, r3
 800538a:	f7fd f905 	bl	8002598 <HAL_GPIO_WritePin>
      break;
 800538e:	e000      	b.n	8005392 <Motor_set_dir+0x3c>
    default:return;
 8005390:	bf00      	nop
  }
}
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <Motor_set_cur_state>:

void Motor_set_cur_state(Motor *motor, double vel, double acc, rot_dir dir) {
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6178      	str	r0, [r7, #20]
 80053a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80053a4:	ed87 1b00 	vstr	d1, [r7]
 80053a8:	460b      	mov	r3, r1
 80053aa:	74fb      	strb	r3, [r7, #19]
//  motor->cur_vel = vel;
//  motor->cur_dir = dir;
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <Motor_set_target_state>:

void Motor_set_target_state(Motor *motor, double target_vel) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	ed87 0b00 	vstr	d0, [r7]
  motor->target_vel = target_vel;
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  int32_t pwm = (int32_t) target_vel;
 80053ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053d2:	f7fb fbc1 	bl	8000b58 <__aeabi_d2iz>
 80053d6:	4603      	mov	r3, r0
 80053d8:	617b      	str	r3, [r7, #20]
  if (target_vel > 1000) pwm = 1000;
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <Motor_set_target_state+0xb0>)
 80053e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053e4:	f7fb fb98 	bl	8000b18 <__aeabi_dcmpgt>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <Motor_set_target_state+0x3e>
 80053ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e00b      	b.n	800540e <Motor_set_target_state+0x56>
  else if (target_vel < -1000) pwm = -1000;
 80053f6:	a31a      	add	r3, pc, #104	; (adr r3, 8005460 <Motor_set_target_state+0xa8>)
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005400:	f7fb fb6c 	bl	8000adc <__aeabi_dcmplt>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <Motor_set_target_state+0x56>
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <Motor_set_target_state+0xb4>)
 800540c:	617b      	str	r3, [r7, #20]

  if (target_vel >= 0) {
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800541a:	f7fb fb73 	bl	8000b04 <__aeabi_dcmpge>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <Motor_set_target_state+0x84>
    Motor_set_pwm(motor, 1000 - pwm);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800542a:	4619      	mov	r1, r3
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ff58 	bl	80052e2 <Motor_set_pwm>
    Motor_set_dir(motor, CCW);
 8005432:	2101      	movs	r1, #1
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff ff8e 	bl	8005356 <Motor_set_dir>
  } else {
    Motor_set_pwm(motor, 1000 + pwm);
    Motor_set_dir(motor, CW);
  }
}
 800543a:	e00a      	b.n	8005452 <Motor_set_target_state+0x9a>
    Motor_set_pwm(motor, 1000 + pwm);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005442:	4619      	mov	r1, r3
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7ff ff4c 	bl	80052e2 <Motor_set_pwm>
    Motor_set_dir(motor, CW);
 800544a:	2100      	movs	r1, #0
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff ff82 	bl	8005356 <Motor_set_dir>
}
 8005452:	bf00      	nop
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	f3af 8000 	nop.w
 8005460:	00000000 	.word	0x00000000
 8005464:	c08f4000 	.word	0xc08f4000
 8005468:	408f4000 	.word	0x408f4000
 800546c:	fffffc18 	.word	0xfffffc18

08005470 <Motor_update_cur_state>:

void Motor_update_cur_state(Motor *motor, uint32_t rate) {
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t cur_cnt = __HAL_TIM_GET_COUNTER(motor->ENCODER_TIM_HANDLE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cur_dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(motor->ENCODER_TIM_HANDLE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	623b      	str	r3, [r7, #32]
  uint32_t d_cnt = max(motor->lst_encoder_cnt, cur_cnt) - min(motor->lst_encoder_cnt, cur_cnt);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fea4 	bl	80051f0 <max>
 80054a8:	4604      	mov	r4, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fead 	bl	8005210 <min>
 80054b6:	4603      	mov	r3, r0
 80054b8:	1ae3      	subs	r3, r4, r3
 80054ba:	61fb      	str	r3, [r7, #28]
  double cur_vel = (double) d_cnt / 400 * rate;
 80054bc:	69f8      	ldr	r0, [r7, #28]
 80054be:	f7fb f821 	bl	8000504 <__aeabi_ui2d>
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <Motor_update_cur_state+0xdc>)
 80054c8:	f7fb f9c0 	bl	800084c <__aeabi_ddiv>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	6838      	ldr	r0, [r7, #0]
 80054d6:	f7fb f815 	bl	8000504 <__aeabi_ui2d>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb f889 	bl	80005f8 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double cur_acc = (motor->lst_vel - cur_vel) * rate;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80054f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054f8:	f7fa fec6 	bl	8000288 <__aeabi_dsub>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4614      	mov	r4, r2
 8005502:	461d      	mov	r5, r3
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f7fa fffd 	bl	8000504 <__aeabi_ui2d>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	f7fb f871 	bl	80005f8 <__aeabi_dmul>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  Motor_set_cur_state(motor, cur_vel, cur_acc, cur_dir);
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4619      	mov	r1, r3
 8005524:	ed97 1b02 	vldr	d1, [r7, #8]
 8005528:	ed97 0b04 	vldr	d0, [r7, #16]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff33 	bl	8005398 <Motor_set_cur_state>
//  if (cur_vel >= 0 && cur_vel <= 8000 && cur_acc < 100000) {
//    printf("vel %lf\n", cur_vel);
//    printf("acc %lf\n", cur_acc);
//  }

  motor->lst_encoder_cnt = cur_cnt;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
  motor->lst_vel = cur_vel;
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800553e:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8005542:	bf00      	nop
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bdb0      	pop	{r4, r5, r7, pc}
 800554a:	bf00      	nop
 800554c:	40790000 	.word	0x40790000

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	; (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000010 	.word	0x20000010

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f004 fc46 	bl	8009e00 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	0800a2ec 	.word	0x0800a2ec
 8005598:	0800a2ec 	.word	0x0800a2ec
 800559c:	0800a2ec 	.word	0x0800a2ec
 80055a0:	0800a2f0 	.word	0x0800a2f0

080055a4 <memset>:
 80055a4:	4402      	add	r2, r0
 80055a6:	4603      	mov	r3, r0
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d100      	bne.n	80055ae <memset+0xa>
 80055ac:	4770      	bx	lr
 80055ae:	f803 1b01 	strb.w	r1, [r3], #1
 80055b2:	e7f9      	b.n	80055a8 <memset+0x4>

080055b4 <__cvt>:
 80055b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	ec55 4b10 	vmov	r4, r5, d0
 80055bc:	2d00      	cmp	r5, #0
 80055be:	460e      	mov	r6, r1
 80055c0:	4619      	mov	r1, r3
 80055c2:	462b      	mov	r3, r5
 80055c4:	bfbb      	ittet	lt
 80055c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055ca:	461d      	movlt	r5, r3
 80055cc:	2300      	movge	r3, #0
 80055ce:	232d      	movlt	r3, #45	; 0x2d
 80055d0:	700b      	strb	r3, [r1, #0]
 80055d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055d8:	4691      	mov	r9, r2
 80055da:	f023 0820 	bic.w	r8, r3, #32
 80055de:	bfbc      	itt	lt
 80055e0:	4622      	movlt	r2, r4
 80055e2:	4614      	movlt	r4, r2
 80055e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055e8:	d005      	beq.n	80055f6 <__cvt+0x42>
 80055ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055ee:	d100      	bne.n	80055f2 <__cvt+0x3e>
 80055f0:	3601      	adds	r6, #1
 80055f2:	2102      	movs	r1, #2
 80055f4:	e000      	b.n	80055f8 <__cvt+0x44>
 80055f6:	2103      	movs	r1, #3
 80055f8:	ab03      	add	r3, sp, #12
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	ab02      	add	r3, sp, #8
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	ec45 4b10 	vmov	d0, r4, r5
 8005604:	4653      	mov	r3, sl
 8005606:	4632      	mov	r2, r6
 8005608:	f001 fdb6 	bl	8007178 <_dtoa_r>
 800560c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005610:	4607      	mov	r7, r0
 8005612:	d102      	bne.n	800561a <__cvt+0x66>
 8005614:	f019 0f01 	tst.w	r9, #1
 8005618:	d022      	beq.n	8005660 <__cvt+0xac>
 800561a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800561e:	eb07 0906 	add.w	r9, r7, r6
 8005622:	d110      	bne.n	8005646 <__cvt+0x92>
 8005624:	783b      	ldrb	r3, [r7, #0]
 8005626:	2b30      	cmp	r3, #48	; 0x30
 8005628:	d10a      	bne.n	8005640 <__cvt+0x8c>
 800562a:	2200      	movs	r2, #0
 800562c:	2300      	movs	r3, #0
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	f7fb fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8005636:	b918      	cbnz	r0, 8005640 <__cvt+0x8c>
 8005638:	f1c6 0601 	rsb	r6, r6, #1
 800563c:	f8ca 6000 	str.w	r6, [sl]
 8005640:	f8da 3000 	ldr.w	r3, [sl]
 8005644:	4499      	add	r9, r3
 8005646:	2200      	movs	r2, #0
 8005648:	2300      	movs	r3, #0
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	f7fb fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005652:	b108      	cbz	r0, 8005658 <__cvt+0xa4>
 8005654:	f8cd 900c 	str.w	r9, [sp, #12]
 8005658:	2230      	movs	r2, #48	; 0x30
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	454b      	cmp	r3, r9
 800565e:	d307      	bcc.n	8005670 <__cvt+0xbc>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005664:	1bdb      	subs	r3, r3, r7
 8005666:	4638      	mov	r0, r7
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	b004      	add	sp, #16
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	9103      	str	r1, [sp, #12]
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e7f0      	b.n	800565a <__cvt+0xa6>

08005678 <__exponent>:
 8005678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567a:	4603      	mov	r3, r0
 800567c:	2900      	cmp	r1, #0
 800567e:	bfb8      	it	lt
 8005680:	4249      	neglt	r1, r1
 8005682:	f803 2b02 	strb.w	r2, [r3], #2
 8005686:	bfb4      	ite	lt
 8005688:	222d      	movlt	r2, #45	; 0x2d
 800568a:	222b      	movge	r2, #43	; 0x2b
 800568c:	2909      	cmp	r1, #9
 800568e:	7042      	strb	r2, [r0, #1]
 8005690:	dd2a      	ble.n	80056e8 <__exponent+0x70>
 8005692:	f10d 0407 	add.w	r4, sp, #7
 8005696:	46a4      	mov	ip, r4
 8005698:	270a      	movs	r7, #10
 800569a:	46a6      	mov	lr, r4
 800569c:	460a      	mov	r2, r1
 800569e:	fb91 f6f7 	sdiv	r6, r1, r7
 80056a2:	fb07 1516 	mls	r5, r7, r6, r1
 80056a6:	3530      	adds	r5, #48	; 0x30
 80056a8:	2a63      	cmp	r2, #99	; 0x63
 80056aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80056ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056b2:	4631      	mov	r1, r6
 80056b4:	dcf1      	bgt.n	800569a <__exponent+0x22>
 80056b6:	3130      	adds	r1, #48	; 0x30
 80056b8:	f1ae 0502 	sub.w	r5, lr, #2
 80056bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056c0:	1c44      	adds	r4, r0, #1
 80056c2:	4629      	mov	r1, r5
 80056c4:	4561      	cmp	r1, ip
 80056c6:	d30a      	bcc.n	80056de <__exponent+0x66>
 80056c8:	f10d 0209 	add.w	r2, sp, #9
 80056cc:	eba2 020e 	sub.w	r2, r2, lr
 80056d0:	4565      	cmp	r5, ip
 80056d2:	bf88      	it	hi
 80056d4:	2200      	movhi	r2, #0
 80056d6:	4413      	add	r3, r2
 80056d8:	1a18      	subs	r0, r3, r0
 80056da:	b003      	add	sp, #12
 80056dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056e6:	e7ed      	b.n	80056c4 <__exponent+0x4c>
 80056e8:	2330      	movs	r3, #48	; 0x30
 80056ea:	3130      	adds	r1, #48	; 0x30
 80056ec:	7083      	strb	r3, [r0, #2]
 80056ee:	70c1      	strb	r1, [r0, #3]
 80056f0:	1d03      	adds	r3, r0, #4
 80056f2:	e7f1      	b.n	80056d8 <__exponent+0x60>

080056f4 <_printf_float>:
 80056f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f8:	ed2d 8b02 	vpush	{d8}
 80056fc:	b08d      	sub	sp, #52	; 0x34
 80056fe:	460c      	mov	r4, r1
 8005700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005704:	4616      	mov	r6, r2
 8005706:	461f      	mov	r7, r3
 8005708:	4605      	mov	r5, r0
 800570a:	f002 fe91 	bl	8008430 <_localeconv_r>
 800570e:	f8d0 a000 	ldr.w	sl, [r0]
 8005712:	4650      	mov	r0, sl
 8005714:	f7fa fd5c 	bl	80001d0 <strlen>
 8005718:	2300      	movs	r3, #0
 800571a:	930a      	str	r3, [sp, #40]	; 0x28
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	f8d8 3000 	ldr.w	r3, [r8]
 8005724:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005728:	3307      	adds	r3, #7
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	f103 0208 	add.w	r2, r3, #8
 8005732:	f8c8 2000 	str.w	r2, [r8]
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800573e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005746:	9307      	str	r3, [sp, #28]
 8005748:	f8cd 8018 	str.w	r8, [sp, #24]
 800574c:	ee08 0a10 	vmov	s16, r0
 8005750:	4b9f      	ldr	r3, [pc, #636]	; (80059d0 <_printf_float+0x2dc>)
 8005752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800575a:	f7fb f9e7 	bl	8000b2c <__aeabi_dcmpun>
 800575e:	bb88      	cbnz	r0, 80057c4 <_printf_float+0xd0>
 8005760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005764:	4b9a      	ldr	r3, [pc, #616]	; (80059d0 <_printf_float+0x2dc>)
 8005766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800576a:	f7fb f9c1 	bl	8000af0 <__aeabi_dcmple>
 800576e:	bb48      	cbnz	r0, 80057c4 <_printf_float+0xd0>
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	4640      	mov	r0, r8
 8005776:	4649      	mov	r1, r9
 8005778:	f7fb f9b0 	bl	8000adc <__aeabi_dcmplt>
 800577c:	b110      	cbz	r0, 8005784 <_printf_float+0x90>
 800577e:	232d      	movs	r3, #45	; 0x2d
 8005780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005784:	4b93      	ldr	r3, [pc, #588]	; (80059d4 <_printf_float+0x2e0>)
 8005786:	4894      	ldr	r0, [pc, #592]	; (80059d8 <_printf_float+0x2e4>)
 8005788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800578c:	bf94      	ite	ls
 800578e:	4698      	movls	r8, r3
 8005790:	4680      	movhi	r8, r0
 8005792:	2303      	movs	r3, #3
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	9b05      	ldr	r3, [sp, #20]
 8005798:	f023 0204 	bic.w	r2, r3, #4
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	f04f 0900 	mov.w	r9, #0
 80057a2:	9700      	str	r7, [sp, #0]
 80057a4:	4633      	mov	r3, r6
 80057a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f9d8 	bl	8005b60 <_printf_common>
 80057b0:	3001      	adds	r0, #1
 80057b2:	f040 8090 	bne.w	80058d6 <_printf_float+0x1e2>
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ba:	b00d      	add	sp, #52	; 0x34
 80057bc:	ecbd 8b02 	vpop	{d8}
 80057c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f7fb f9ae 	bl	8000b2c <__aeabi_dcmpun>
 80057d0:	b140      	cbz	r0, 80057e4 <_printf_float+0xf0>
 80057d2:	464b      	mov	r3, r9
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfbc      	itt	lt
 80057d8:	232d      	movlt	r3, #45	; 0x2d
 80057da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057de:	487f      	ldr	r0, [pc, #508]	; (80059dc <_printf_float+0x2e8>)
 80057e0:	4b7f      	ldr	r3, [pc, #508]	; (80059e0 <_printf_float+0x2ec>)
 80057e2:	e7d1      	b.n	8005788 <_printf_float+0x94>
 80057e4:	6863      	ldr	r3, [r4, #4]
 80057e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057ea:	9206      	str	r2, [sp, #24]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	d13f      	bne.n	8005870 <_printf_float+0x17c>
 80057f0:	2306      	movs	r3, #6
 80057f2:	6063      	str	r3, [r4, #4]
 80057f4:	9b05      	ldr	r3, [sp, #20]
 80057f6:	6861      	ldr	r1, [r4, #4]
 80057f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057fc:	2300      	movs	r3, #0
 80057fe:	9303      	str	r3, [sp, #12]
 8005800:	ab0a      	add	r3, sp, #40	; 0x28
 8005802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005806:	ab09      	add	r3, sp, #36	; 0x24
 8005808:	ec49 8b10 	vmov	d0, r8, r9
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005814:	4628      	mov	r0, r5
 8005816:	f7ff fecd 	bl	80055b4 <__cvt>
 800581a:	9b06      	ldr	r3, [sp, #24]
 800581c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800581e:	2b47      	cmp	r3, #71	; 0x47
 8005820:	4680      	mov	r8, r0
 8005822:	d108      	bne.n	8005836 <_printf_float+0x142>
 8005824:	1cc8      	adds	r0, r1, #3
 8005826:	db02      	blt.n	800582e <_printf_float+0x13a>
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	4299      	cmp	r1, r3
 800582c:	dd41      	ble.n	80058b2 <_printf_float+0x1be>
 800582e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005832:	fa5f fb8b 	uxtb.w	fp, fp
 8005836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800583a:	d820      	bhi.n	800587e <_printf_float+0x18a>
 800583c:	3901      	subs	r1, #1
 800583e:	465a      	mov	r2, fp
 8005840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005844:	9109      	str	r1, [sp, #36]	; 0x24
 8005846:	f7ff ff17 	bl	8005678 <__exponent>
 800584a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584c:	1813      	adds	r3, r2, r0
 800584e:	2a01      	cmp	r2, #1
 8005850:	4681      	mov	r9, r0
 8005852:	6123      	str	r3, [r4, #16]
 8005854:	dc02      	bgt.n	800585c <_printf_float+0x168>
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	07d2      	lsls	r2, r2, #31
 800585a:	d501      	bpl.n	8005860 <_printf_float+0x16c>
 800585c:	3301      	adds	r3, #1
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005864:	2b00      	cmp	r3, #0
 8005866:	d09c      	beq.n	80057a2 <_printf_float+0xae>
 8005868:	232d      	movs	r3, #45	; 0x2d
 800586a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586e:	e798      	b.n	80057a2 <_printf_float+0xae>
 8005870:	9a06      	ldr	r2, [sp, #24]
 8005872:	2a47      	cmp	r2, #71	; 0x47
 8005874:	d1be      	bne.n	80057f4 <_printf_float+0x100>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1bc      	bne.n	80057f4 <_printf_float+0x100>
 800587a:	2301      	movs	r3, #1
 800587c:	e7b9      	b.n	80057f2 <_printf_float+0xfe>
 800587e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005882:	d118      	bne.n	80058b6 <_printf_float+0x1c2>
 8005884:	2900      	cmp	r1, #0
 8005886:	6863      	ldr	r3, [r4, #4]
 8005888:	dd0b      	ble.n	80058a2 <_printf_float+0x1ae>
 800588a:	6121      	str	r1, [r4, #16]
 800588c:	b913      	cbnz	r3, 8005894 <_printf_float+0x1a0>
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	07d0      	lsls	r0, r2, #31
 8005892:	d502      	bpl.n	800589a <_printf_float+0x1a6>
 8005894:	3301      	adds	r3, #1
 8005896:	440b      	add	r3, r1
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	65a1      	str	r1, [r4, #88]	; 0x58
 800589c:	f04f 0900 	mov.w	r9, #0
 80058a0:	e7de      	b.n	8005860 <_printf_float+0x16c>
 80058a2:	b913      	cbnz	r3, 80058aa <_printf_float+0x1b6>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	07d2      	lsls	r2, r2, #31
 80058a8:	d501      	bpl.n	80058ae <_printf_float+0x1ba>
 80058aa:	3302      	adds	r3, #2
 80058ac:	e7f4      	b.n	8005898 <_printf_float+0x1a4>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e7f2      	b.n	8005898 <_printf_float+0x1a4>
 80058b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b8:	4299      	cmp	r1, r3
 80058ba:	db05      	blt.n	80058c8 <_printf_float+0x1d4>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	6121      	str	r1, [r4, #16]
 80058c0:	07d8      	lsls	r0, r3, #31
 80058c2:	d5ea      	bpl.n	800589a <_printf_float+0x1a6>
 80058c4:	1c4b      	adds	r3, r1, #1
 80058c6:	e7e7      	b.n	8005898 <_printf_float+0x1a4>
 80058c8:	2900      	cmp	r1, #0
 80058ca:	bfd4      	ite	le
 80058cc:	f1c1 0202 	rsble	r2, r1, #2
 80058d0:	2201      	movgt	r2, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	e7e0      	b.n	8005898 <_printf_float+0x1a4>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	055a      	lsls	r2, r3, #21
 80058da:	d407      	bmi.n	80058ec <_printf_float+0x1f8>
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	4642      	mov	r2, r8
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	d12c      	bne.n	8005944 <_printf_float+0x250>
 80058ea:	e764      	b.n	80057b6 <_printf_float+0xc2>
 80058ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058f0:	f240 80e0 	bls.w	8005ab4 <_printf_float+0x3c0>
 80058f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	f7fb f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005900:	2800      	cmp	r0, #0
 8005902:	d034      	beq.n	800596e <_printf_float+0x27a>
 8005904:	4a37      	ldr	r2, [pc, #220]	; (80059e4 <_printf_float+0x2f0>)
 8005906:	2301      	movs	r3, #1
 8005908:	4631      	mov	r1, r6
 800590a:	4628      	mov	r0, r5
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	f43f af51 	beq.w	80057b6 <_printf_float+0xc2>
 8005914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005918:	429a      	cmp	r2, r3
 800591a:	db02      	blt.n	8005922 <_printf_float+0x22e>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	07d8      	lsls	r0, r3, #31
 8005920:	d510      	bpl.n	8005944 <_printf_float+0x250>
 8005922:	ee18 3a10 	vmov	r3, s16
 8005926:	4652      	mov	r2, sl
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	f43f af41 	beq.w	80057b6 <_printf_float+0xc2>
 8005934:	f04f 0800 	mov.w	r8, #0
 8005938:	f104 091a 	add.w	r9, r4, #26
 800593c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	4543      	cmp	r3, r8
 8005942:	dc09      	bgt.n	8005958 <_printf_float+0x264>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	079b      	lsls	r3, r3, #30
 8005948:	f100 8105 	bmi.w	8005b56 <_printf_float+0x462>
 800594c:	68e0      	ldr	r0, [r4, #12]
 800594e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005950:	4298      	cmp	r0, r3
 8005952:	bfb8      	it	lt
 8005954:	4618      	movlt	r0, r3
 8005956:	e730      	b.n	80057ba <_printf_float+0xc6>
 8005958:	2301      	movs	r3, #1
 800595a:	464a      	mov	r2, r9
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f af27 	beq.w	80057b6 <_printf_float+0xc2>
 8005968:	f108 0801 	add.w	r8, r8, #1
 800596c:	e7e6      	b.n	800593c <_printf_float+0x248>
 800596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	dc39      	bgt.n	80059e8 <_printf_float+0x2f4>
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <_printf_float+0x2f0>)
 8005976:	2301      	movs	r3, #1
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	f43f af19 	beq.w	80057b6 <_printf_float+0xc2>
 8005984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005988:	4313      	orrs	r3, r2
 800598a:	d102      	bne.n	8005992 <_printf_float+0x29e>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d5d8      	bpl.n	8005944 <_printf_float+0x250>
 8005992:	ee18 3a10 	vmov	r3, s16
 8005996:	4652      	mov	r2, sl
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f af09 	beq.w	80057b6 <_printf_float+0xc2>
 80059a4:	f04f 0900 	mov.w	r9, #0
 80059a8:	f104 0a1a 	add.w	sl, r4, #26
 80059ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ae:	425b      	negs	r3, r3
 80059b0:	454b      	cmp	r3, r9
 80059b2:	dc01      	bgt.n	80059b8 <_printf_float+0x2c4>
 80059b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b6:	e792      	b.n	80058de <_printf_float+0x1ea>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4652      	mov	r2, sl
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f aef7 	beq.w	80057b6 <_printf_float+0xc2>
 80059c8:	f109 0901 	add.w	r9, r9, #1
 80059cc:	e7ee      	b.n	80059ac <_printf_float+0x2b8>
 80059ce:	bf00      	nop
 80059d0:	7fefffff 	.word	0x7fefffff
 80059d4:	08009e34 	.word	0x08009e34
 80059d8:	08009e38 	.word	0x08009e38
 80059dc:	08009e40 	.word	0x08009e40
 80059e0:	08009e3c 	.word	0x08009e3c
 80059e4:	08009e44 	.word	0x08009e44
 80059e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059ec:	429a      	cmp	r2, r3
 80059ee:	bfa8      	it	ge
 80059f0:	461a      	movge	r2, r3
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	4691      	mov	r9, r2
 80059f6:	dc37      	bgt.n	8005a68 <_printf_float+0x374>
 80059f8:	f04f 0b00 	mov.w	fp, #0
 80059fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a00:	f104 021a 	add.w	r2, r4, #26
 8005a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	eba3 0309 	sub.w	r3, r3, r9
 8005a0c:	455b      	cmp	r3, fp
 8005a0e:	dc33      	bgt.n	8005a78 <_printf_float+0x384>
 8005a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a14:	429a      	cmp	r2, r3
 8005a16:	db3b      	blt.n	8005a90 <_printf_float+0x39c>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	07da      	lsls	r2, r3, #31
 8005a1c:	d438      	bmi.n	8005a90 <_printf_float+0x39c>
 8005a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a20:	9b05      	ldr	r3, [sp, #20]
 8005a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	eba2 0901 	sub.w	r9, r2, r1
 8005a2a:	4599      	cmp	r9, r3
 8005a2c:	bfa8      	it	ge
 8005a2e:	4699      	movge	r9, r3
 8005a30:	f1b9 0f00 	cmp.w	r9, #0
 8005a34:	dc35      	bgt.n	8005aa2 <_printf_float+0x3ae>
 8005a36:	f04f 0800 	mov.w	r8, #0
 8005a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a3e:	f104 0a1a 	add.w	sl, r4, #26
 8005a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	eba3 0309 	sub.w	r3, r3, r9
 8005a4c:	4543      	cmp	r3, r8
 8005a4e:	f77f af79 	ble.w	8005944 <_printf_float+0x250>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4652      	mov	r2, sl
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f aeaa 	beq.w	80057b6 <_printf_float+0xc2>
 8005a62:	f108 0801 	add.w	r8, r8, #1
 8005a66:	e7ec      	b.n	8005a42 <_printf_float+0x34e>
 8005a68:	4613      	mov	r3, r2
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	d1c0      	bne.n	80059f8 <_printf_float+0x304>
 8005a76:	e69e      	b.n	80057b6 <_printf_float+0xc2>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	9205      	str	r2, [sp, #20]
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f ae97 	beq.w	80057b6 <_printf_float+0xc2>
 8005a88:	9a05      	ldr	r2, [sp, #20]
 8005a8a:	f10b 0b01 	add.w	fp, fp, #1
 8005a8e:	e7b9      	b.n	8005a04 <_printf_float+0x310>
 8005a90:	ee18 3a10 	vmov	r3, s16
 8005a94:	4652      	mov	r2, sl
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1be      	bne.n	8005a1e <_printf_float+0x32a>
 8005aa0:	e689      	b.n	80057b6 <_printf_float+0xc2>
 8005aa2:	9a05      	ldr	r2, [sp, #20]
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	4442      	add	r2, r8
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d1c1      	bne.n	8005a36 <_printf_float+0x342>
 8005ab2:	e680      	b.n	80057b6 <_printf_float+0xc2>
 8005ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab6:	2a01      	cmp	r2, #1
 8005ab8:	dc01      	bgt.n	8005abe <_printf_float+0x3ca>
 8005aba:	07db      	lsls	r3, r3, #31
 8005abc:	d538      	bpl.n	8005b30 <_printf_float+0x43c>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b8      	blx	r7
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f43f ae74 	beq.w	80057b6 <_printf_float+0xc2>
 8005ace:	ee18 3a10 	vmov	r3, s16
 8005ad2:	4652      	mov	r2, sl
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f ae6b 	beq.w	80057b6 <_printf_float+0xc2>
 8005ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f7fa ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_printf_float+0x432>
 8005aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af0:	f108 0201 	add.w	r2, r8, #1
 8005af4:	3b01      	subs	r3, #1
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	d10e      	bne.n	8005b1e <_printf_float+0x42a>
 8005b00:	e659      	b.n	80057b6 <_printf_float+0xc2>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4652      	mov	r2, sl
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f ae52 	beq.w	80057b6 <_printf_float+0xc2>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	4543      	cmp	r3, r8
 8005b1c:	dcf1      	bgt.n	8005b02 <_printf_float+0x40e>
 8005b1e:	464b      	mov	r3, r9
 8005b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b24:	e6dc      	b.n	80058e0 <_printf_float+0x1ec>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	f104 0a1a 	add.w	sl, r4, #26
 8005b2e:	e7f2      	b.n	8005b16 <_printf_float+0x422>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4642      	mov	r2, r8
 8005b34:	e7df      	b.n	8005af6 <_printf_float+0x402>
 8005b36:	2301      	movs	r3, #1
 8005b38:	464a      	mov	r2, r9
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f ae38 	beq.w	80057b6 <_printf_float+0xc2>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b4e:	1a5b      	subs	r3, r3, r1
 8005b50:	4543      	cmp	r3, r8
 8005b52:	dcf0      	bgt.n	8005b36 <_printf_float+0x442>
 8005b54:	e6fa      	b.n	800594c <_printf_float+0x258>
 8005b56:	f04f 0800 	mov.w	r8, #0
 8005b5a:	f104 0919 	add.w	r9, r4, #25
 8005b5e:	e7f4      	b.n	8005b4a <_printf_float+0x456>

08005b60 <_printf_common>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	4616      	mov	r6, r2
 8005b66:	4699      	mov	r9, r3
 8005b68:	688a      	ldr	r2, [r1, #8]
 8005b6a:	690b      	ldr	r3, [r1, #16]
 8005b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bfb8      	it	lt
 8005b74:	4613      	movlt	r3, r2
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	b10a      	cbz	r2, 8005b86 <_printf_common+0x26>
 8005b82:	3301      	adds	r3, #1
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	0699      	lsls	r1, r3, #26
 8005b8a:	bf42      	ittt	mi
 8005b8c:	6833      	ldrmi	r3, [r6, #0]
 8005b8e:	3302      	addmi	r3, #2
 8005b90:	6033      	strmi	r3, [r6, #0]
 8005b92:	6825      	ldr	r5, [r4, #0]
 8005b94:	f015 0506 	ands.w	r5, r5, #6
 8005b98:	d106      	bne.n	8005ba8 <_printf_common+0x48>
 8005b9a:	f104 0a19 	add.w	sl, r4, #25
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	6832      	ldr	r2, [r6, #0]
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dc26      	bgt.n	8005bf6 <_printf_common+0x96>
 8005ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bac:	1e13      	subs	r3, r2, #0
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	bf18      	it	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	0692      	lsls	r2, r2, #26
 8005bb6:	d42b      	bmi.n	8005c10 <_printf_common+0xb0>
 8005bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d01e      	beq.n	8005c04 <_printf_common+0xa4>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	68e5      	ldr	r5, [r4, #12]
 8005bca:	6832      	ldr	r2, [r6, #0]
 8005bcc:	f003 0306 	and.w	r3, r3, #6
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	bf08      	it	eq
 8005bd4:	1aad      	subeq	r5, r5, r2
 8005bd6:	68a3      	ldr	r3, [r4, #8]
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	bf0c      	ite	eq
 8005bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be0:	2500      	movne	r5, #0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	bfc4      	itt	gt
 8005be6:	1a9b      	subgt	r3, r3, r2
 8005be8:	18ed      	addgt	r5, r5, r3
 8005bea:	2600      	movs	r6, #0
 8005bec:	341a      	adds	r4, #26
 8005bee:	42b5      	cmp	r5, r6
 8005bf0:	d11a      	bne.n	8005c28 <_printf_common+0xc8>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e008      	b.n	8005c08 <_printf_common+0xa8>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	47c0      	blx	r8
 8005c00:	3001      	adds	r0, #1
 8005c02:	d103      	bne.n	8005c0c <_printf_common+0xac>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	e7c6      	b.n	8005b9e <_printf_common+0x3e>
 8005c10:	18e1      	adds	r1, r4, r3
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	2030      	movs	r0, #48	; 0x30
 8005c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c1a:	4422      	add	r2, r4
 8005c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c24:	3302      	adds	r3, #2
 8005c26:	e7c7      	b.n	8005bb8 <_printf_common+0x58>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	4638      	mov	r0, r7
 8005c30:	47c0      	blx	r8
 8005c32:	3001      	adds	r0, #1
 8005c34:	d0e6      	beq.n	8005c04 <_printf_common+0xa4>
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7d9      	b.n	8005bee <_printf_common+0x8e>
	...

08005c3c <_printf_i>:
 8005c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	460c      	mov	r4, r1
 8005c42:	4691      	mov	r9, r2
 8005c44:	7e27      	ldrb	r7, [r4, #24]
 8005c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c48:	2f78      	cmp	r7, #120	; 0x78
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c52:	d807      	bhi.n	8005c64 <_printf_i+0x28>
 8005c54:	2f62      	cmp	r7, #98	; 0x62
 8005c56:	d80a      	bhi.n	8005c6e <_printf_i+0x32>
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	f000 80d8 	beq.w	8005e0e <_printf_i+0x1d2>
 8005c5e:	2f58      	cmp	r7, #88	; 0x58
 8005c60:	f000 80a3 	beq.w	8005daa <_printf_i+0x16e>
 8005c64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c6c:	e03a      	b.n	8005ce4 <_printf_i+0xa8>
 8005c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c72:	2b15      	cmp	r3, #21
 8005c74:	d8f6      	bhi.n	8005c64 <_printf_i+0x28>
 8005c76:	a001      	add	r0, pc, #4	; (adr r0, 8005c7c <_printf_i+0x40>)
 8005c78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005c65 	.word	0x08005c65
 8005c88:	08005c65 	.word	0x08005c65
 8005c8c:	08005c65 	.word	0x08005c65
 8005c90:	08005c65 	.word	0x08005c65
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005c65 	.word	0x08005c65
 8005c9c:	08005c65 	.word	0x08005c65
 8005ca0:	08005c65 	.word	0x08005c65
 8005ca4:	08005c65 	.word	0x08005c65
 8005ca8:	08005df5 	.word	0x08005df5
 8005cac:	08005d19 	.word	0x08005d19
 8005cb0:	08005dd7 	.word	0x08005dd7
 8005cb4:	08005c65 	.word	0x08005c65
 8005cb8:	08005c65 	.word	0x08005c65
 8005cbc:	08005e17 	.word	0x08005e17
 8005cc0:	08005c65 	.word	0x08005c65
 8005cc4:	08005d19 	.word	0x08005d19
 8005cc8:	08005c65 	.word	0x08005c65
 8005ccc:	08005c65 	.word	0x08005c65
 8005cd0:	08005ddf 	.word	0x08005ddf
 8005cd4:	680b      	ldr	r3, [r1, #0]
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	600a      	str	r2, [r1, #0]
 8005cdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0a3      	b.n	8005e30 <_printf_i+0x1f4>
 8005ce8:	6825      	ldr	r5, [r4, #0]
 8005cea:	6808      	ldr	r0, [r1, #0]
 8005cec:	062e      	lsls	r6, r5, #24
 8005cee:	f100 0304 	add.w	r3, r0, #4
 8005cf2:	d50a      	bpl.n	8005d0a <_printf_i+0xce>
 8005cf4:	6805      	ldr	r5, [r0, #0]
 8005cf6:	600b      	str	r3, [r1, #0]
 8005cf8:	2d00      	cmp	r5, #0
 8005cfa:	da03      	bge.n	8005d04 <_printf_i+0xc8>
 8005cfc:	232d      	movs	r3, #45	; 0x2d
 8005cfe:	426d      	negs	r5, r5
 8005d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d04:	485e      	ldr	r0, [pc, #376]	; (8005e80 <_printf_i+0x244>)
 8005d06:	230a      	movs	r3, #10
 8005d08:	e019      	b.n	8005d3e <_printf_i+0x102>
 8005d0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d0e:	6805      	ldr	r5, [r0, #0]
 8005d10:	600b      	str	r3, [r1, #0]
 8005d12:	bf18      	it	ne
 8005d14:	b22d      	sxthne	r5, r5
 8005d16:	e7ef      	b.n	8005cf8 <_printf_i+0xbc>
 8005d18:	680b      	ldr	r3, [r1, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	1d18      	adds	r0, r3, #4
 8005d1e:	6008      	str	r0, [r1, #0]
 8005d20:	0628      	lsls	r0, r5, #24
 8005d22:	d501      	bpl.n	8005d28 <_printf_i+0xec>
 8005d24:	681d      	ldr	r5, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <_printf_i+0xf2>
 8005d28:	0669      	lsls	r1, r5, #25
 8005d2a:	d5fb      	bpl.n	8005d24 <_printf_i+0xe8>
 8005d2c:	881d      	ldrh	r5, [r3, #0]
 8005d2e:	4854      	ldr	r0, [pc, #336]	; (8005e80 <_printf_i+0x244>)
 8005d30:	2f6f      	cmp	r7, #111	; 0x6f
 8005d32:	bf0c      	ite	eq
 8005d34:	2308      	moveq	r3, #8
 8005d36:	230a      	movne	r3, #10
 8005d38:	2100      	movs	r1, #0
 8005d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d3e:	6866      	ldr	r6, [r4, #4]
 8005d40:	60a6      	str	r6, [r4, #8]
 8005d42:	2e00      	cmp	r6, #0
 8005d44:	bfa2      	ittt	ge
 8005d46:	6821      	ldrge	r1, [r4, #0]
 8005d48:	f021 0104 	bicge.w	r1, r1, #4
 8005d4c:	6021      	strge	r1, [r4, #0]
 8005d4e:	b90d      	cbnz	r5, 8005d54 <_printf_i+0x118>
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	d04d      	beq.n	8005df0 <_printf_i+0x1b4>
 8005d54:	4616      	mov	r6, r2
 8005d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d5e:	5dc7      	ldrb	r7, [r0, r7]
 8005d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d64:	462f      	mov	r7, r5
 8005d66:	42bb      	cmp	r3, r7
 8005d68:	460d      	mov	r5, r1
 8005d6a:	d9f4      	bls.n	8005d56 <_printf_i+0x11a>
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d10b      	bne.n	8005d88 <_printf_i+0x14c>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	07df      	lsls	r7, r3, #31
 8005d74:	d508      	bpl.n	8005d88 <_printf_i+0x14c>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	6861      	ldr	r1, [r4, #4]
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	bfde      	ittt	le
 8005d7e:	2330      	movle	r3, #48	; 0x30
 8005d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d84:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005d88:	1b92      	subs	r2, r2, r6
 8005d8a:	6122      	str	r2, [r4, #16]
 8005d8c:	f8cd a000 	str.w	sl, [sp]
 8005d90:	464b      	mov	r3, r9
 8005d92:	aa03      	add	r2, sp, #12
 8005d94:	4621      	mov	r1, r4
 8005d96:	4640      	mov	r0, r8
 8005d98:	f7ff fee2 	bl	8005b60 <_printf_common>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d14c      	bne.n	8005e3a <_printf_i+0x1fe>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da4:	b004      	add	sp, #16
 8005da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005daa:	4835      	ldr	r0, [pc, #212]	; (8005e80 <_printf_i+0x244>)
 8005dac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	680e      	ldr	r6, [r1, #0]
 8005db4:	061f      	lsls	r7, r3, #24
 8005db6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dba:	600e      	str	r6, [r1, #0]
 8005dbc:	d514      	bpl.n	8005de8 <_printf_i+0x1ac>
 8005dbe:	07d9      	lsls	r1, r3, #31
 8005dc0:	bf44      	itt	mi
 8005dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8005dc6:	6023      	strmi	r3, [r4, #0]
 8005dc8:	b91d      	cbnz	r5, 8005dd2 <_printf_i+0x196>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f023 0320 	bic.w	r3, r3, #32
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	2310      	movs	r3, #16
 8005dd4:	e7b0      	b.n	8005d38 <_printf_i+0xfc>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	f043 0320 	orr.w	r3, r3, #32
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	2378      	movs	r3, #120	; 0x78
 8005de0:	4828      	ldr	r0, [pc, #160]	; (8005e84 <_printf_i+0x248>)
 8005de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005de6:	e7e3      	b.n	8005db0 <_printf_i+0x174>
 8005de8:	065e      	lsls	r6, r3, #25
 8005dea:	bf48      	it	mi
 8005dec:	b2ad      	uxthmi	r5, r5
 8005dee:	e7e6      	b.n	8005dbe <_printf_i+0x182>
 8005df0:	4616      	mov	r6, r2
 8005df2:	e7bb      	b.n	8005d6c <_printf_i+0x130>
 8005df4:	680b      	ldr	r3, [r1, #0]
 8005df6:	6826      	ldr	r6, [r4, #0]
 8005df8:	6960      	ldr	r0, [r4, #20]
 8005dfa:	1d1d      	adds	r5, r3, #4
 8005dfc:	600d      	str	r5, [r1, #0]
 8005dfe:	0635      	lsls	r5, r6, #24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0x1cc>
 8005e04:	6018      	str	r0, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <_printf_i+0x1d2>
 8005e08:	0671      	lsls	r1, r6, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0x1c8>
 8005e0c:	8018      	strh	r0, [r3, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	4616      	mov	r6, r2
 8005e14:	e7ba      	b.n	8005d8c <_printf_i+0x150>
 8005e16:	680b      	ldr	r3, [r1, #0]
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	600a      	str	r2, [r1, #0]
 8005e1c:	681e      	ldr	r6, [r3, #0]
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	2100      	movs	r1, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7fa f9dc 	bl	80001e0 <memchr>
 8005e28:	b108      	cbz	r0, 8005e2e <_printf_i+0x1f2>
 8005e2a:	1b80      	subs	r0, r0, r6
 8005e2c:	6060      	str	r0, [r4, #4]
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	2300      	movs	r3, #0
 8005e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e38:	e7a8      	b.n	8005d8c <_printf_i+0x150>
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	47d0      	blx	sl
 8005e44:	3001      	adds	r0, #1
 8005e46:	d0ab      	beq.n	8005da0 <_printf_i+0x164>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	079b      	lsls	r3, r3, #30
 8005e4c:	d413      	bmi.n	8005e76 <_printf_i+0x23a>
 8005e4e:	68e0      	ldr	r0, [r4, #12]
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	4298      	cmp	r0, r3
 8005e54:	bfb8      	it	lt
 8005e56:	4618      	movlt	r0, r3
 8005e58:	e7a4      	b.n	8005da4 <_printf_i+0x168>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	47d0      	blx	sl
 8005e64:	3001      	adds	r0, #1
 8005e66:	d09b      	beq.n	8005da0 <_printf_i+0x164>
 8005e68:	3501      	adds	r5, #1
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	9903      	ldr	r1, [sp, #12]
 8005e6e:	1a5b      	subs	r3, r3, r1
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	dcf2      	bgt.n	8005e5a <_printf_i+0x21e>
 8005e74:	e7eb      	b.n	8005e4e <_printf_i+0x212>
 8005e76:	2500      	movs	r5, #0
 8005e78:	f104 0619 	add.w	r6, r4, #25
 8005e7c:	e7f5      	b.n	8005e6a <_printf_i+0x22e>
 8005e7e:	bf00      	nop
 8005e80:	08009e46 	.word	0x08009e46
 8005e84:	08009e57 	.word	0x08009e57

08005e88 <_scanf_float>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	4617      	mov	r7, r2
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	688b      	ldr	r3, [r1, #8]
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e9a:	bf83      	ittte	hi
 8005e9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ea0:	195b      	addhi	r3, r3, r5
 8005ea2:	9302      	strhi	r3, [sp, #8]
 8005ea4:	2300      	movls	r3, #0
 8005ea6:	bf86      	itte	hi
 8005ea8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005eac:	608b      	strhi	r3, [r1, #8]
 8005eae:	9302      	strls	r3, [sp, #8]
 8005eb0:	680b      	ldr	r3, [r1, #0]
 8005eb2:	468b      	mov	fp, r1
 8005eb4:	2500      	movs	r5, #0
 8005eb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005eba:	f84b 3b1c 	str.w	r3, [fp], #28
 8005ebe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	465e      	mov	r6, fp
 8005ec8:	46aa      	mov	sl, r5
 8005eca:	46a9      	mov	r9, r5
 8005ecc:	9501      	str	r5, [sp, #4]
 8005ece:	68a2      	ldr	r2, [r4, #8]
 8005ed0:	b152      	cbz	r2, 8005ee8 <_scanf_float+0x60>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8005ed8:	d864      	bhi.n	8005fa4 <_scanf_float+0x11c>
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d83c      	bhi.n	8005f58 <_scanf_float+0xd0>
 8005ede:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ee2:	b2c8      	uxtb	r0, r1
 8005ee4:	280e      	cmp	r0, #14
 8005ee6:	d93a      	bls.n	8005f5e <_scanf_float+0xd6>
 8005ee8:	f1b9 0f00 	cmp.w	r9, #0
 8005eec:	d003      	beq.n	8005ef6 <_scanf_float+0x6e>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005efa:	f1ba 0f01 	cmp.w	sl, #1
 8005efe:	f200 8113 	bhi.w	8006128 <_scanf_float+0x2a0>
 8005f02:	455e      	cmp	r6, fp
 8005f04:	f200 8105 	bhi.w	8006112 <_scanf_float+0x28a>
 8005f08:	2501      	movs	r5, #1
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	b007      	add	sp, #28
 8005f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f16:	2a0d      	cmp	r2, #13
 8005f18:	d8e6      	bhi.n	8005ee8 <_scanf_float+0x60>
 8005f1a:	a101      	add	r1, pc, #4	; (adr r1, 8005f20 <_scanf_float+0x98>)
 8005f1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f20:	0800605f 	.word	0x0800605f
 8005f24:	08005ee9 	.word	0x08005ee9
 8005f28:	08005ee9 	.word	0x08005ee9
 8005f2c:	08005ee9 	.word	0x08005ee9
 8005f30:	080060bf 	.word	0x080060bf
 8005f34:	08006097 	.word	0x08006097
 8005f38:	08005ee9 	.word	0x08005ee9
 8005f3c:	08005ee9 	.word	0x08005ee9
 8005f40:	0800606d 	.word	0x0800606d
 8005f44:	08005ee9 	.word	0x08005ee9
 8005f48:	08005ee9 	.word	0x08005ee9
 8005f4c:	08005ee9 	.word	0x08005ee9
 8005f50:	08005ee9 	.word	0x08005ee9
 8005f54:	08006025 	.word	0x08006025
 8005f58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f5c:	e7db      	b.n	8005f16 <_scanf_float+0x8e>
 8005f5e:	290e      	cmp	r1, #14
 8005f60:	d8c2      	bhi.n	8005ee8 <_scanf_float+0x60>
 8005f62:	a001      	add	r0, pc, #4	; (adr r0, 8005f68 <_scanf_float+0xe0>)
 8005f64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f68:	08006017 	.word	0x08006017
 8005f6c:	08005ee9 	.word	0x08005ee9
 8005f70:	08006017 	.word	0x08006017
 8005f74:	080060ab 	.word	0x080060ab
 8005f78:	08005ee9 	.word	0x08005ee9
 8005f7c:	08005fc5 	.word	0x08005fc5
 8005f80:	08006001 	.word	0x08006001
 8005f84:	08006001 	.word	0x08006001
 8005f88:	08006001 	.word	0x08006001
 8005f8c:	08006001 	.word	0x08006001
 8005f90:	08006001 	.word	0x08006001
 8005f94:	08006001 	.word	0x08006001
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	08006001 	.word	0x08006001
 8005fa4:	2b6e      	cmp	r3, #110	; 0x6e
 8005fa6:	d809      	bhi.n	8005fbc <_scanf_float+0x134>
 8005fa8:	2b60      	cmp	r3, #96	; 0x60
 8005faa:	d8b2      	bhi.n	8005f12 <_scanf_float+0x8a>
 8005fac:	2b54      	cmp	r3, #84	; 0x54
 8005fae:	d077      	beq.n	80060a0 <_scanf_float+0x218>
 8005fb0:	2b59      	cmp	r3, #89	; 0x59
 8005fb2:	d199      	bne.n	8005ee8 <_scanf_float+0x60>
 8005fb4:	2d07      	cmp	r5, #7
 8005fb6:	d197      	bne.n	8005ee8 <_scanf_float+0x60>
 8005fb8:	2508      	movs	r5, #8
 8005fba:	e029      	b.n	8006010 <_scanf_float+0x188>
 8005fbc:	2b74      	cmp	r3, #116	; 0x74
 8005fbe:	d06f      	beq.n	80060a0 <_scanf_float+0x218>
 8005fc0:	2b79      	cmp	r3, #121	; 0x79
 8005fc2:	e7f6      	b.n	8005fb2 <_scanf_float+0x12a>
 8005fc4:	6821      	ldr	r1, [r4, #0]
 8005fc6:	05c8      	lsls	r0, r1, #23
 8005fc8:	d51a      	bpl.n	8006000 <_scanf_float+0x178>
 8005fca:	9b02      	ldr	r3, [sp, #8]
 8005fcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005fd0:	6021      	str	r1, [r4, #0]
 8005fd2:	f109 0901 	add.w	r9, r9, #1
 8005fd6:	b11b      	cbz	r3, 8005fe0 <_scanf_float+0x158>
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	3201      	adds	r2, #1
 8005fdc:	9302      	str	r3, [sp, #8]
 8005fde:	60a2      	str	r2, [r4, #8]
 8005fe0:	68a3      	ldr	r3, [r4, #8]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	f340 8084 	ble.w	8006100 <_scanf_float+0x278>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	e766      	b.n	8005ece <_scanf_float+0x46>
 8006000:	eb1a 0f05 	cmn.w	sl, r5
 8006004:	f47f af70 	bne.w	8005ee8 <_scanf_float+0x60>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800600e:	6022      	str	r2, [r4, #0]
 8006010:	f806 3b01 	strb.w	r3, [r6], #1
 8006014:	e7e4      	b.n	8005fe0 <_scanf_float+0x158>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	0610      	lsls	r0, r2, #24
 800601a:	f57f af65 	bpl.w	8005ee8 <_scanf_float+0x60>
 800601e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006022:	e7f4      	b.n	800600e <_scanf_float+0x186>
 8006024:	f1ba 0f00 	cmp.w	sl, #0
 8006028:	d10e      	bne.n	8006048 <_scanf_float+0x1c0>
 800602a:	f1b9 0f00 	cmp.w	r9, #0
 800602e:	d10e      	bne.n	800604e <_scanf_float+0x1c6>
 8006030:	6822      	ldr	r2, [r4, #0]
 8006032:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006036:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800603a:	d108      	bne.n	800604e <_scanf_float+0x1c6>
 800603c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006040:	6022      	str	r2, [r4, #0]
 8006042:	f04f 0a01 	mov.w	sl, #1
 8006046:	e7e3      	b.n	8006010 <_scanf_float+0x188>
 8006048:	f1ba 0f02 	cmp.w	sl, #2
 800604c:	d055      	beq.n	80060fa <_scanf_float+0x272>
 800604e:	2d01      	cmp	r5, #1
 8006050:	d002      	beq.n	8006058 <_scanf_float+0x1d0>
 8006052:	2d04      	cmp	r5, #4
 8006054:	f47f af48 	bne.w	8005ee8 <_scanf_float+0x60>
 8006058:	3501      	adds	r5, #1
 800605a:	b2ed      	uxtb	r5, r5
 800605c:	e7d8      	b.n	8006010 <_scanf_float+0x188>
 800605e:	f1ba 0f01 	cmp.w	sl, #1
 8006062:	f47f af41 	bne.w	8005ee8 <_scanf_float+0x60>
 8006066:	f04f 0a02 	mov.w	sl, #2
 800606a:	e7d1      	b.n	8006010 <_scanf_float+0x188>
 800606c:	b97d      	cbnz	r5, 800608e <_scanf_float+0x206>
 800606e:	f1b9 0f00 	cmp.w	r9, #0
 8006072:	f47f af3c 	bne.w	8005eee <_scanf_float+0x66>
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800607c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006080:	f47f af39 	bne.w	8005ef6 <_scanf_float+0x6e>
 8006084:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	2501      	movs	r5, #1
 800608c:	e7c0      	b.n	8006010 <_scanf_float+0x188>
 800608e:	2d03      	cmp	r5, #3
 8006090:	d0e2      	beq.n	8006058 <_scanf_float+0x1d0>
 8006092:	2d05      	cmp	r5, #5
 8006094:	e7de      	b.n	8006054 <_scanf_float+0x1cc>
 8006096:	2d02      	cmp	r5, #2
 8006098:	f47f af26 	bne.w	8005ee8 <_scanf_float+0x60>
 800609c:	2503      	movs	r5, #3
 800609e:	e7b7      	b.n	8006010 <_scanf_float+0x188>
 80060a0:	2d06      	cmp	r5, #6
 80060a2:	f47f af21 	bne.w	8005ee8 <_scanf_float+0x60>
 80060a6:	2507      	movs	r5, #7
 80060a8:	e7b2      	b.n	8006010 <_scanf_float+0x188>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	0591      	lsls	r1, r2, #22
 80060ae:	f57f af1b 	bpl.w	8005ee8 <_scanf_float+0x60>
 80060b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80060bc:	e7a8      	b.n	8006010 <_scanf_float+0x188>
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80060c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060c8:	d006      	beq.n	80060d8 <_scanf_float+0x250>
 80060ca:	0550      	lsls	r0, r2, #21
 80060cc:	f57f af0c 	bpl.w	8005ee8 <_scanf_float+0x60>
 80060d0:	f1b9 0f00 	cmp.w	r9, #0
 80060d4:	f43f af0f 	beq.w	8005ef6 <_scanf_float+0x6e>
 80060d8:	0591      	lsls	r1, r2, #22
 80060da:	bf58      	it	pl
 80060dc:	9901      	ldrpl	r1, [sp, #4]
 80060de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060e2:	bf58      	it	pl
 80060e4:	eba9 0101 	subpl.w	r1, r9, r1
 80060e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80060ec:	bf58      	it	pl
 80060ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060f2:	6022      	str	r2, [r4, #0]
 80060f4:	f04f 0900 	mov.w	r9, #0
 80060f8:	e78a      	b.n	8006010 <_scanf_float+0x188>
 80060fa:	f04f 0a03 	mov.w	sl, #3
 80060fe:	e787      	b.n	8006010 <_scanf_float+0x188>
 8006100:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006104:	4639      	mov	r1, r7
 8006106:	4640      	mov	r0, r8
 8006108:	4798      	blx	r3
 800610a:	2800      	cmp	r0, #0
 800610c:	f43f aedf 	beq.w	8005ece <_scanf_float+0x46>
 8006110:	e6ea      	b.n	8005ee8 <_scanf_float+0x60>
 8006112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800611a:	463a      	mov	r2, r7
 800611c:	4640      	mov	r0, r8
 800611e:	4798      	blx	r3
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	3b01      	subs	r3, #1
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	e6ec      	b.n	8005f02 <_scanf_float+0x7a>
 8006128:	1e6b      	subs	r3, r5, #1
 800612a:	2b06      	cmp	r3, #6
 800612c:	d825      	bhi.n	800617a <_scanf_float+0x2f2>
 800612e:	2d02      	cmp	r5, #2
 8006130:	d836      	bhi.n	80061a0 <_scanf_float+0x318>
 8006132:	455e      	cmp	r6, fp
 8006134:	f67f aee8 	bls.w	8005f08 <_scanf_float+0x80>
 8006138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800613c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006140:	463a      	mov	r2, r7
 8006142:	4640      	mov	r0, r8
 8006144:	4798      	blx	r3
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	3b01      	subs	r3, #1
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	e7f1      	b.n	8006132 <_scanf_float+0x2aa>
 800614e:	9802      	ldr	r0, [sp, #8]
 8006150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006154:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006158:	9002      	str	r0, [sp, #8]
 800615a:	463a      	mov	r2, r7
 800615c:	4640      	mov	r0, r8
 800615e:	4798      	blx	r3
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	3b01      	subs	r3, #1
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800616a:	fa5f fa8a 	uxtb.w	sl, sl
 800616e:	f1ba 0f02 	cmp.w	sl, #2
 8006172:	d1ec      	bne.n	800614e <_scanf_float+0x2c6>
 8006174:	3d03      	subs	r5, #3
 8006176:	b2ed      	uxtb	r5, r5
 8006178:	1b76      	subs	r6, r6, r5
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	05da      	lsls	r2, r3, #23
 800617e:	d52f      	bpl.n	80061e0 <_scanf_float+0x358>
 8006180:	055b      	lsls	r3, r3, #21
 8006182:	d510      	bpl.n	80061a6 <_scanf_float+0x31e>
 8006184:	455e      	cmp	r6, fp
 8006186:	f67f aebf 	bls.w	8005f08 <_scanf_float+0x80>
 800618a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800618e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006192:	463a      	mov	r2, r7
 8006194:	4640      	mov	r0, r8
 8006196:	4798      	blx	r3
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	3b01      	subs	r3, #1
 800619c:	6123      	str	r3, [r4, #16]
 800619e:	e7f1      	b.n	8006184 <_scanf_float+0x2fc>
 80061a0:	46aa      	mov	sl, r5
 80061a2:	9602      	str	r6, [sp, #8]
 80061a4:	e7df      	b.n	8006166 <_scanf_float+0x2de>
 80061a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	2965      	cmp	r1, #101	; 0x65
 80061ae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80061b2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	d00c      	beq.n	80061d4 <_scanf_float+0x34c>
 80061ba:	2945      	cmp	r1, #69	; 0x45
 80061bc:	d00a      	beq.n	80061d4 <_scanf_float+0x34c>
 80061be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c2:	463a      	mov	r2, r7
 80061c4:	4640      	mov	r0, r8
 80061c6:	4798      	blx	r3
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	1eb5      	subs	r5, r6, #2
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061d8:	463a      	mov	r2, r7
 80061da:	4640      	mov	r0, r8
 80061dc:	4798      	blx	r3
 80061de:	462e      	mov	r6, r5
 80061e0:	6825      	ldr	r5, [r4, #0]
 80061e2:	f015 0510 	ands.w	r5, r5, #16
 80061e6:	d158      	bne.n	800629a <_scanf_float+0x412>
 80061e8:	7035      	strb	r5, [r6, #0]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f4:	d11c      	bne.n	8006230 <_scanf_float+0x3a8>
 80061f6:	9b01      	ldr	r3, [sp, #4]
 80061f8:	454b      	cmp	r3, r9
 80061fa:	eba3 0209 	sub.w	r2, r3, r9
 80061fe:	d124      	bne.n	800624a <_scanf_float+0x3c2>
 8006200:	2200      	movs	r2, #0
 8006202:	4659      	mov	r1, fp
 8006204:	4640      	mov	r0, r8
 8006206:	f000 fe9d 	bl	8006f44 <_strtod_r>
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	6821      	ldr	r1, [r4, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f011 0f02 	tst.w	r1, #2
 8006214:	ec57 6b10 	vmov	r6, r7, d0
 8006218:	f103 0204 	add.w	r2, r3, #4
 800621c:	d020      	beq.n	8006260 <_scanf_float+0x3d8>
 800621e:	9903      	ldr	r1, [sp, #12]
 8006220:	600a      	str	r2, [r1, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	e9c3 6700 	strd	r6, r7, [r3]
 8006228:	68e3      	ldr	r3, [r4, #12]
 800622a:	3301      	adds	r3, #1
 800622c:	60e3      	str	r3, [r4, #12]
 800622e:	e66c      	b.n	8005f0a <_scanf_float+0x82>
 8006230:	9b04      	ldr	r3, [sp, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0e4      	beq.n	8006200 <_scanf_float+0x378>
 8006236:	9905      	ldr	r1, [sp, #20]
 8006238:	230a      	movs	r3, #10
 800623a:	462a      	mov	r2, r5
 800623c:	3101      	adds	r1, #1
 800623e:	4640      	mov	r0, r8
 8006240:	f000 ff0a 	bl	8007058 <_strtol_r>
 8006244:	9b04      	ldr	r3, [sp, #16]
 8006246:	9e05      	ldr	r6, [sp, #20]
 8006248:	1ac2      	subs	r2, r0, r3
 800624a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800624e:	429e      	cmp	r6, r3
 8006250:	bf28      	it	cs
 8006252:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006256:	4912      	ldr	r1, [pc, #72]	; (80062a0 <_scanf_float+0x418>)
 8006258:	4630      	mov	r0, r6
 800625a:	f000 f82b 	bl	80062b4 <siprintf>
 800625e:	e7cf      	b.n	8006200 <_scanf_float+0x378>
 8006260:	f011 0f04 	tst.w	r1, #4
 8006264:	9903      	ldr	r1, [sp, #12]
 8006266:	600a      	str	r2, [r1, #0]
 8006268:	d1db      	bne.n	8006222 <_scanf_float+0x39a>
 800626a:	f8d3 8000 	ldr.w	r8, [r3]
 800626e:	ee10 2a10 	vmov	r2, s0
 8006272:	ee10 0a10 	vmov	r0, s0
 8006276:	463b      	mov	r3, r7
 8006278:	4639      	mov	r1, r7
 800627a:	f7fa fc57 	bl	8000b2c <__aeabi_dcmpun>
 800627e:	b128      	cbz	r0, 800628c <_scanf_float+0x404>
 8006280:	4808      	ldr	r0, [pc, #32]	; (80062a4 <_scanf_float+0x41c>)
 8006282:	f000 f811 	bl	80062a8 <nanf>
 8006286:	ed88 0a00 	vstr	s0, [r8]
 800628a:	e7cd      	b.n	8006228 <_scanf_float+0x3a0>
 800628c:	4630      	mov	r0, r6
 800628e:	4639      	mov	r1, r7
 8006290:	f7fa fcaa 	bl	8000be8 <__aeabi_d2f>
 8006294:	f8c8 0000 	str.w	r0, [r8]
 8006298:	e7c6      	b.n	8006228 <_scanf_float+0x3a0>
 800629a:	2500      	movs	r5, #0
 800629c:	e635      	b.n	8005f0a <_scanf_float+0x82>
 800629e:	bf00      	nop
 80062a0:	08009e68 	.word	0x08009e68
 80062a4:	0800a280 	.word	0x0800a280

080062a8 <nanf>:
 80062a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80062b0 <nanf+0x8>
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	7fc00000 	.word	0x7fc00000

080062b4 <siprintf>:
 80062b4:	b40e      	push	{r1, r2, r3}
 80062b6:	b500      	push	{lr}
 80062b8:	b09c      	sub	sp, #112	; 0x70
 80062ba:	ab1d      	add	r3, sp, #116	; 0x74
 80062bc:	9002      	str	r0, [sp, #8]
 80062be:	9006      	str	r0, [sp, #24]
 80062c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062c4:	4809      	ldr	r0, [pc, #36]	; (80062ec <siprintf+0x38>)
 80062c6:	9107      	str	r1, [sp, #28]
 80062c8:	9104      	str	r1, [sp, #16]
 80062ca:	4909      	ldr	r1, [pc, #36]	; (80062f0 <siprintf+0x3c>)
 80062cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d0:	9105      	str	r1, [sp, #20]
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	a902      	add	r1, sp, #8
 80062d8:	f002 fea6 	bl	8009028 <_svfiprintf_r>
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	b01c      	add	sp, #112	; 0x70
 80062e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e8:	b003      	add	sp, #12
 80062ea:	4770      	bx	lr
 80062ec:	20000010 	.word	0x20000010
 80062f0:	ffff0208 	.word	0xffff0208

080062f4 <sulp>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
 80062fa:	ec45 4b10 	vmov	d0, r4, r5
 80062fe:	4616      	mov	r6, r2
 8006300:	f002 fc2e 	bl	8008b60 <__ulp>
 8006304:	ec51 0b10 	vmov	r0, r1, d0
 8006308:	b17e      	cbz	r6, 800632a <sulp+0x36>
 800630a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800630e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006312:	2b00      	cmp	r3, #0
 8006314:	dd09      	ble.n	800632a <sulp+0x36>
 8006316:	051b      	lsls	r3, r3, #20
 8006318:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800631c:	2400      	movs	r4, #0
 800631e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006322:	4622      	mov	r2, r4
 8006324:	462b      	mov	r3, r5
 8006326:	f7fa f967 	bl	80005f8 <__aeabi_dmul>
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	0000      	movs	r0, r0
	...

08006330 <_strtod_l>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	b0a3      	sub	sp, #140	; 0x8c
 8006336:	461f      	mov	r7, r3
 8006338:	2300      	movs	r3, #0
 800633a:	931e      	str	r3, [sp, #120]	; 0x78
 800633c:	4ba4      	ldr	r3, [pc, #656]	; (80065d0 <_strtod_l+0x2a0>)
 800633e:	9219      	str	r2, [sp, #100]	; 0x64
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	4604      	mov	r4, r0
 8006346:	4618      	mov	r0, r3
 8006348:	4688      	mov	r8, r1
 800634a:	f7f9 ff41 	bl	80001d0 <strlen>
 800634e:	f04f 0a00 	mov.w	sl, #0
 8006352:	4605      	mov	r5, r0
 8006354:	f04f 0b00 	mov.w	fp, #0
 8006358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800635c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	2a2b      	cmp	r2, #43	; 0x2b
 8006362:	d04c      	beq.n	80063fe <_strtod_l+0xce>
 8006364:	d839      	bhi.n	80063da <_strtod_l+0xaa>
 8006366:	2a0d      	cmp	r2, #13
 8006368:	d832      	bhi.n	80063d0 <_strtod_l+0xa0>
 800636a:	2a08      	cmp	r2, #8
 800636c:	d832      	bhi.n	80063d4 <_strtod_l+0xa4>
 800636e:	2a00      	cmp	r2, #0
 8006370:	d03c      	beq.n	80063ec <_strtod_l+0xbc>
 8006372:	2300      	movs	r3, #0
 8006374:	930e      	str	r3, [sp, #56]	; 0x38
 8006376:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006378:	7833      	ldrb	r3, [r6, #0]
 800637a:	2b30      	cmp	r3, #48	; 0x30
 800637c:	f040 80b4 	bne.w	80064e8 <_strtod_l+0x1b8>
 8006380:	7873      	ldrb	r3, [r6, #1]
 8006382:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006386:	2b58      	cmp	r3, #88	; 0x58
 8006388:	d16c      	bne.n	8006464 <_strtod_l+0x134>
 800638a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	ab1e      	add	r3, sp, #120	; 0x78
 8006390:	9702      	str	r7, [sp, #8]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4a8f      	ldr	r2, [pc, #572]	; (80065d4 <_strtod_l+0x2a4>)
 8006396:	ab1f      	add	r3, sp, #124	; 0x7c
 8006398:	a91d      	add	r1, sp, #116	; 0x74
 800639a:	4620      	mov	r0, r4
 800639c:	f001 fd40 	bl	8007e20 <__gethex>
 80063a0:	f010 0707 	ands.w	r7, r0, #7
 80063a4:	4605      	mov	r5, r0
 80063a6:	d005      	beq.n	80063b4 <_strtod_l+0x84>
 80063a8:	2f06      	cmp	r7, #6
 80063aa:	d12a      	bne.n	8006402 <_strtod_l+0xd2>
 80063ac:	3601      	adds	r6, #1
 80063ae:	2300      	movs	r3, #0
 80063b0:	961d      	str	r6, [sp, #116]	; 0x74
 80063b2:	930e      	str	r3, [sp, #56]	; 0x38
 80063b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8596 	bne.w	8006ee8 <_strtod_l+0xbb8>
 80063bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063be:	b1db      	cbz	r3, 80063f8 <_strtod_l+0xc8>
 80063c0:	4652      	mov	r2, sl
 80063c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80063c6:	ec43 2b10 	vmov	d0, r2, r3
 80063ca:	b023      	add	sp, #140	; 0x8c
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	2a20      	cmp	r2, #32
 80063d2:	d1ce      	bne.n	8006372 <_strtod_l+0x42>
 80063d4:	3301      	adds	r3, #1
 80063d6:	931d      	str	r3, [sp, #116]	; 0x74
 80063d8:	e7c0      	b.n	800635c <_strtod_l+0x2c>
 80063da:	2a2d      	cmp	r2, #45	; 0x2d
 80063dc:	d1c9      	bne.n	8006372 <_strtod_l+0x42>
 80063de:	2201      	movs	r2, #1
 80063e0:	920e      	str	r2, [sp, #56]	; 0x38
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	921d      	str	r2, [sp, #116]	; 0x74
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1c4      	bne.n	8006376 <_strtod_l+0x46>
 80063ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f040 8576 	bne.w	8006ee4 <_strtod_l+0xbb4>
 80063f8:	4652      	mov	r2, sl
 80063fa:	465b      	mov	r3, fp
 80063fc:	e7e3      	b.n	80063c6 <_strtod_l+0x96>
 80063fe:	2200      	movs	r2, #0
 8006400:	e7ee      	b.n	80063e0 <_strtod_l+0xb0>
 8006402:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006404:	b13a      	cbz	r2, 8006416 <_strtod_l+0xe6>
 8006406:	2135      	movs	r1, #53	; 0x35
 8006408:	a820      	add	r0, sp, #128	; 0x80
 800640a:	f002 fcb4 	bl	8008d76 <__copybits>
 800640e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006410:	4620      	mov	r0, r4
 8006412:	f002 f879 	bl	8008508 <_Bfree>
 8006416:	3f01      	subs	r7, #1
 8006418:	2f05      	cmp	r7, #5
 800641a:	d807      	bhi.n	800642c <_strtod_l+0xfc>
 800641c:	e8df f007 	tbb	[pc, r7]
 8006420:	1d180b0e 	.word	0x1d180b0e
 8006424:	030e      	.short	0x030e
 8006426:	f04f 0b00 	mov.w	fp, #0
 800642a:	46da      	mov	sl, fp
 800642c:	0728      	lsls	r0, r5, #28
 800642e:	d5c1      	bpl.n	80063b4 <_strtod_l+0x84>
 8006430:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006434:	e7be      	b.n	80063b4 <_strtod_l+0x84>
 8006436:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800643a:	e7f7      	b.n	800642c <_strtod_l+0xfc>
 800643c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006440:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800644a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800644e:	e7ed      	b.n	800642c <_strtod_l+0xfc>
 8006450:	f8df b184 	ldr.w	fp, [pc, #388]	; 80065d8 <_strtod_l+0x2a8>
 8006454:	f04f 0a00 	mov.w	sl, #0
 8006458:	e7e8      	b.n	800642c <_strtod_l+0xfc>
 800645a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800645e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006462:	e7e3      	b.n	800642c <_strtod_l+0xfc>
 8006464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	921d      	str	r2, [sp, #116]	; 0x74
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b30      	cmp	r3, #48	; 0x30
 800646e:	d0f9      	beq.n	8006464 <_strtod_l+0x134>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d09f      	beq.n	80063b4 <_strtod_l+0x84>
 8006474:	2301      	movs	r3, #1
 8006476:	f04f 0900 	mov.w	r9, #0
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800647e:	930a      	str	r3, [sp, #40]	; 0x28
 8006480:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006484:	464f      	mov	r7, r9
 8006486:	220a      	movs	r2, #10
 8006488:	981d      	ldr	r0, [sp, #116]	; 0x74
 800648a:	7806      	ldrb	r6, [r0, #0]
 800648c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006490:	b2d9      	uxtb	r1, r3
 8006492:	2909      	cmp	r1, #9
 8006494:	d92a      	bls.n	80064ec <_strtod_l+0x1bc>
 8006496:	9907      	ldr	r1, [sp, #28]
 8006498:	462a      	mov	r2, r5
 800649a:	f002 fedd 	bl	8009258 <strncmp>
 800649e:	b398      	cbz	r0, 8006508 <_strtod_l+0x1d8>
 80064a0:	2000      	movs	r0, #0
 80064a2:	4633      	mov	r3, r6
 80064a4:	463d      	mov	r5, r7
 80064a6:	9007      	str	r0, [sp, #28]
 80064a8:	4602      	mov	r2, r0
 80064aa:	2b65      	cmp	r3, #101	; 0x65
 80064ac:	d001      	beq.n	80064b2 <_strtod_l+0x182>
 80064ae:	2b45      	cmp	r3, #69	; 0x45
 80064b0:	d118      	bne.n	80064e4 <_strtod_l+0x1b4>
 80064b2:	b91d      	cbnz	r5, 80064bc <_strtod_l+0x18c>
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	4303      	orrs	r3, r0
 80064b8:	d098      	beq.n	80063ec <_strtod_l+0xbc>
 80064ba:	2500      	movs	r5, #0
 80064bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80064c0:	f108 0301 	add.w	r3, r8, #1
 80064c4:	931d      	str	r3, [sp, #116]	; 0x74
 80064c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80064ca:	2b2b      	cmp	r3, #43	; 0x2b
 80064cc:	d075      	beq.n	80065ba <_strtod_l+0x28a>
 80064ce:	2b2d      	cmp	r3, #45	; 0x2d
 80064d0:	d07b      	beq.n	80065ca <_strtod_l+0x29a>
 80064d2:	f04f 0c00 	mov.w	ip, #0
 80064d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80064da:	2909      	cmp	r1, #9
 80064dc:	f240 8082 	bls.w	80065e4 <_strtod_l+0x2b4>
 80064e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80064e4:	2600      	movs	r6, #0
 80064e6:	e09d      	b.n	8006624 <_strtod_l+0x2f4>
 80064e8:	2300      	movs	r3, #0
 80064ea:	e7c4      	b.n	8006476 <_strtod_l+0x146>
 80064ec:	2f08      	cmp	r7, #8
 80064ee:	bfd8      	it	le
 80064f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80064f2:	f100 0001 	add.w	r0, r0, #1
 80064f6:	bfda      	itte	le
 80064f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80064fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80064fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006502:	3701      	adds	r7, #1
 8006504:	901d      	str	r0, [sp, #116]	; 0x74
 8006506:	e7bf      	b.n	8006488 <_strtod_l+0x158>
 8006508:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800650a:	195a      	adds	r2, r3, r5
 800650c:	921d      	str	r2, [sp, #116]	; 0x74
 800650e:	5d5b      	ldrb	r3, [r3, r5]
 8006510:	2f00      	cmp	r7, #0
 8006512:	d037      	beq.n	8006584 <_strtod_l+0x254>
 8006514:	9007      	str	r0, [sp, #28]
 8006516:	463d      	mov	r5, r7
 8006518:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800651c:	2a09      	cmp	r2, #9
 800651e:	d912      	bls.n	8006546 <_strtod_l+0x216>
 8006520:	2201      	movs	r2, #1
 8006522:	e7c2      	b.n	80064aa <_strtod_l+0x17a>
 8006524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	921d      	str	r2, [sp, #116]	; 0x74
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	3001      	adds	r0, #1
 800652e:	2b30      	cmp	r3, #48	; 0x30
 8006530:	d0f8      	beq.n	8006524 <_strtod_l+0x1f4>
 8006532:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006536:	2a08      	cmp	r2, #8
 8006538:	f200 84db 	bhi.w	8006ef2 <_strtod_l+0xbc2>
 800653c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800653e:	9007      	str	r0, [sp, #28]
 8006540:	2000      	movs	r0, #0
 8006542:	920a      	str	r2, [sp, #40]	; 0x28
 8006544:	4605      	mov	r5, r0
 8006546:	3b30      	subs	r3, #48	; 0x30
 8006548:	f100 0201 	add.w	r2, r0, #1
 800654c:	d014      	beq.n	8006578 <_strtod_l+0x248>
 800654e:	9907      	ldr	r1, [sp, #28]
 8006550:	4411      	add	r1, r2
 8006552:	9107      	str	r1, [sp, #28]
 8006554:	462a      	mov	r2, r5
 8006556:	eb00 0e05 	add.w	lr, r0, r5
 800655a:	210a      	movs	r1, #10
 800655c:	4572      	cmp	r2, lr
 800655e:	d113      	bne.n	8006588 <_strtod_l+0x258>
 8006560:	182a      	adds	r2, r5, r0
 8006562:	2a08      	cmp	r2, #8
 8006564:	f105 0501 	add.w	r5, r5, #1
 8006568:	4405      	add	r5, r0
 800656a:	dc1c      	bgt.n	80065a6 <_strtod_l+0x276>
 800656c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800656e:	220a      	movs	r2, #10
 8006570:	fb02 3301 	mla	r3, r2, r1, r3
 8006574:	9309      	str	r3, [sp, #36]	; 0x24
 8006576:	2200      	movs	r2, #0
 8006578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	911d      	str	r1, [sp, #116]	; 0x74
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	4610      	mov	r0, r2
 8006582:	e7c9      	b.n	8006518 <_strtod_l+0x1e8>
 8006584:	4638      	mov	r0, r7
 8006586:	e7d2      	b.n	800652e <_strtod_l+0x1fe>
 8006588:	2a08      	cmp	r2, #8
 800658a:	dc04      	bgt.n	8006596 <_strtod_l+0x266>
 800658c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800658e:	434e      	muls	r6, r1
 8006590:	9609      	str	r6, [sp, #36]	; 0x24
 8006592:	3201      	adds	r2, #1
 8006594:	e7e2      	b.n	800655c <_strtod_l+0x22c>
 8006596:	f102 0c01 	add.w	ip, r2, #1
 800659a:	f1bc 0f10 	cmp.w	ip, #16
 800659e:	bfd8      	it	le
 80065a0:	fb01 f909 	mulle.w	r9, r1, r9
 80065a4:	e7f5      	b.n	8006592 <_strtod_l+0x262>
 80065a6:	2d10      	cmp	r5, #16
 80065a8:	bfdc      	itt	le
 80065aa:	220a      	movle	r2, #10
 80065ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80065b0:	e7e1      	b.n	8006576 <_strtod_l+0x246>
 80065b2:	2300      	movs	r3, #0
 80065b4:	9307      	str	r3, [sp, #28]
 80065b6:	2201      	movs	r2, #1
 80065b8:	e77c      	b.n	80064b4 <_strtod_l+0x184>
 80065ba:	f04f 0c00 	mov.w	ip, #0
 80065be:	f108 0302 	add.w	r3, r8, #2
 80065c2:	931d      	str	r3, [sp, #116]	; 0x74
 80065c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80065c8:	e785      	b.n	80064d6 <_strtod_l+0x1a6>
 80065ca:	f04f 0c01 	mov.w	ip, #1
 80065ce:	e7f6      	b.n	80065be <_strtod_l+0x28e>
 80065d0:	0800a0c0 	.word	0x0800a0c0
 80065d4:	08009e70 	.word	0x08009e70
 80065d8:	7ff00000 	.word	0x7ff00000
 80065dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	911d      	str	r1, [sp, #116]	; 0x74
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d0f9      	beq.n	80065dc <_strtod_l+0x2ac>
 80065e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80065ec:	2908      	cmp	r1, #8
 80065ee:	f63f af79 	bhi.w	80064e4 <_strtod_l+0x1b4>
 80065f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80065f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065f8:	9308      	str	r3, [sp, #32]
 80065fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065fc:	1c59      	adds	r1, r3, #1
 80065fe:	911d      	str	r1, [sp, #116]	; 0x74
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006606:	2e09      	cmp	r6, #9
 8006608:	d937      	bls.n	800667a <_strtod_l+0x34a>
 800660a:	9e08      	ldr	r6, [sp, #32]
 800660c:	1b89      	subs	r1, r1, r6
 800660e:	2908      	cmp	r1, #8
 8006610:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006614:	dc02      	bgt.n	800661c <_strtod_l+0x2ec>
 8006616:	4576      	cmp	r6, lr
 8006618:	bfa8      	it	ge
 800661a:	4676      	movge	r6, lr
 800661c:	f1bc 0f00 	cmp.w	ip, #0
 8006620:	d000      	beq.n	8006624 <_strtod_l+0x2f4>
 8006622:	4276      	negs	r6, r6
 8006624:	2d00      	cmp	r5, #0
 8006626:	d14f      	bne.n	80066c8 <_strtod_l+0x398>
 8006628:	9904      	ldr	r1, [sp, #16]
 800662a:	4301      	orrs	r1, r0
 800662c:	f47f aec2 	bne.w	80063b4 <_strtod_l+0x84>
 8006630:	2a00      	cmp	r2, #0
 8006632:	f47f aedb 	bne.w	80063ec <_strtod_l+0xbc>
 8006636:	2b69      	cmp	r3, #105	; 0x69
 8006638:	d027      	beq.n	800668a <_strtod_l+0x35a>
 800663a:	dc24      	bgt.n	8006686 <_strtod_l+0x356>
 800663c:	2b49      	cmp	r3, #73	; 0x49
 800663e:	d024      	beq.n	800668a <_strtod_l+0x35a>
 8006640:	2b4e      	cmp	r3, #78	; 0x4e
 8006642:	f47f aed3 	bne.w	80063ec <_strtod_l+0xbc>
 8006646:	499e      	ldr	r1, [pc, #632]	; (80068c0 <_strtod_l+0x590>)
 8006648:	a81d      	add	r0, sp, #116	; 0x74
 800664a:	f001 fe41 	bl	80082d0 <__match>
 800664e:	2800      	cmp	r0, #0
 8006650:	f43f aecc 	beq.w	80063ec <_strtod_l+0xbc>
 8006654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b28      	cmp	r3, #40	; 0x28
 800665a:	d12d      	bne.n	80066b8 <_strtod_l+0x388>
 800665c:	4999      	ldr	r1, [pc, #612]	; (80068c4 <_strtod_l+0x594>)
 800665e:	aa20      	add	r2, sp, #128	; 0x80
 8006660:	a81d      	add	r0, sp, #116	; 0x74
 8006662:	f001 fe49 	bl	80082f8 <__hexnan>
 8006666:	2805      	cmp	r0, #5
 8006668:	d126      	bne.n	80066b8 <_strtod_l+0x388>
 800666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006670:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006674:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006678:	e69c      	b.n	80063b4 <_strtod_l+0x84>
 800667a:	210a      	movs	r1, #10
 800667c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006680:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006684:	e7b9      	b.n	80065fa <_strtod_l+0x2ca>
 8006686:	2b6e      	cmp	r3, #110	; 0x6e
 8006688:	e7db      	b.n	8006642 <_strtod_l+0x312>
 800668a:	498f      	ldr	r1, [pc, #572]	; (80068c8 <_strtod_l+0x598>)
 800668c:	a81d      	add	r0, sp, #116	; 0x74
 800668e:	f001 fe1f 	bl	80082d0 <__match>
 8006692:	2800      	cmp	r0, #0
 8006694:	f43f aeaa 	beq.w	80063ec <_strtod_l+0xbc>
 8006698:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800669a:	498c      	ldr	r1, [pc, #560]	; (80068cc <_strtod_l+0x59c>)
 800669c:	3b01      	subs	r3, #1
 800669e:	a81d      	add	r0, sp, #116	; 0x74
 80066a0:	931d      	str	r3, [sp, #116]	; 0x74
 80066a2:	f001 fe15 	bl	80082d0 <__match>
 80066a6:	b910      	cbnz	r0, 80066ae <_strtod_l+0x37e>
 80066a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066aa:	3301      	adds	r3, #1
 80066ac:	931d      	str	r3, [sp, #116]	; 0x74
 80066ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80068dc <_strtod_l+0x5ac>
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	e67d      	b.n	80063b4 <_strtod_l+0x84>
 80066b8:	4885      	ldr	r0, [pc, #532]	; (80068d0 <_strtod_l+0x5a0>)
 80066ba:	f002 fdb5 	bl	8009228 <nan>
 80066be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80066c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80066c6:	e675      	b.n	80063b4 <_strtod_l+0x84>
 80066c8:	9b07      	ldr	r3, [sp, #28]
 80066ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066cc:	1af3      	subs	r3, r6, r3
 80066ce:	2f00      	cmp	r7, #0
 80066d0:	bf08      	it	eq
 80066d2:	462f      	moveq	r7, r5
 80066d4:	2d10      	cmp	r5, #16
 80066d6:	9308      	str	r3, [sp, #32]
 80066d8:	46a8      	mov	r8, r5
 80066da:	bfa8      	it	ge
 80066dc:	f04f 0810 	movge.w	r8, #16
 80066e0:	f7f9 ff10 	bl	8000504 <__aeabi_ui2d>
 80066e4:	2d09      	cmp	r5, #9
 80066e6:	4682      	mov	sl, r0
 80066e8:	468b      	mov	fp, r1
 80066ea:	dd13      	ble.n	8006714 <_strtod_l+0x3e4>
 80066ec:	4b79      	ldr	r3, [pc, #484]	; (80068d4 <_strtod_l+0x5a4>)
 80066ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80066f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80066f6:	f7f9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80066fa:	4682      	mov	sl, r0
 80066fc:	4648      	mov	r0, r9
 80066fe:	468b      	mov	fp, r1
 8006700:	f7f9 ff00 	bl	8000504 <__aeabi_ui2d>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4650      	mov	r0, sl
 800670a:	4659      	mov	r1, fp
 800670c:	f7f9 fdbe 	bl	800028c <__adddf3>
 8006710:	4682      	mov	sl, r0
 8006712:	468b      	mov	fp, r1
 8006714:	2d0f      	cmp	r5, #15
 8006716:	dc38      	bgt.n	800678a <_strtod_l+0x45a>
 8006718:	9b08      	ldr	r3, [sp, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f43f ae4a 	beq.w	80063b4 <_strtod_l+0x84>
 8006720:	dd24      	ble.n	800676c <_strtod_l+0x43c>
 8006722:	2b16      	cmp	r3, #22
 8006724:	dc0b      	bgt.n	800673e <_strtod_l+0x40e>
 8006726:	4d6b      	ldr	r5, [pc, #428]	; (80068d4 <_strtod_l+0x5a4>)
 8006728:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800672c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006730:	4652      	mov	r2, sl
 8006732:	465b      	mov	r3, fp
 8006734:	f7f9 ff60 	bl	80005f8 <__aeabi_dmul>
 8006738:	4682      	mov	sl, r0
 800673a:	468b      	mov	fp, r1
 800673c:	e63a      	b.n	80063b4 <_strtod_l+0x84>
 800673e:	9a08      	ldr	r2, [sp, #32]
 8006740:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006744:	4293      	cmp	r3, r2
 8006746:	db20      	blt.n	800678a <_strtod_l+0x45a>
 8006748:	4c62      	ldr	r4, [pc, #392]	; (80068d4 <_strtod_l+0x5a4>)
 800674a:	f1c5 050f 	rsb	r5, r5, #15
 800674e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006752:	4652      	mov	r2, sl
 8006754:	465b      	mov	r3, fp
 8006756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675a:	f7f9 ff4d 	bl	80005f8 <__aeabi_dmul>
 800675e:	9b08      	ldr	r3, [sp, #32]
 8006760:	1b5d      	subs	r5, r3, r5
 8006762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006766:	e9d4 2300 	ldrd	r2, r3, [r4]
 800676a:	e7e3      	b.n	8006734 <_strtod_l+0x404>
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	3316      	adds	r3, #22
 8006770:	db0b      	blt.n	800678a <_strtod_l+0x45a>
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	4a57      	ldr	r2, [pc, #348]	; (80068d4 <_strtod_l+0x5a4>)
 8006776:	1b9e      	subs	r6, r3, r6
 8006778:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800677c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006780:	4650      	mov	r0, sl
 8006782:	4659      	mov	r1, fp
 8006784:	f7fa f862 	bl	800084c <__aeabi_ddiv>
 8006788:	e7d6      	b.n	8006738 <_strtod_l+0x408>
 800678a:	9b08      	ldr	r3, [sp, #32]
 800678c:	eba5 0808 	sub.w	r8, r5, r8
 8006790:	4498      	add	r8, r3
 8006792:	f1b8 0f00 	cmp.w	r8, #0
 8006796:	dd71      	ble.n	800687c <_strtod_l+0x54c>
 8006798:	f018 030f 	ands.w	r3, r8, #15
 800679c:	d00a      	beq.n	80067b4 <_strtod_l+0x484>
 800679e:	494d      	ldr	r1, [pc, #308]	; (80068d4 <_strtod_l+0x5a4>)
 80067a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067a4:	4652      	mov	r2, sl
 80067a6:	465b      	mov	r3, fp
 80067a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ac:	f7f9 ff24 	bl	80005f8 <__aeabi_dmul>
 80067b0:	4682      	mov	sl, r0
 80067b2:	468b      	mov	fp, r1
 80067b4:	f038 080f 	bics.w	r8, r8, #15
 80067b8:	d04d      	beq.n	8006856 <_strtod_l+0x526>
 80067ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80067be:	dd22      	ble.n	8006806 <_strtod_l+0x4d6>
 80067c0:	2500      	movs	r5, #0
 80067c2:	462e      	mov	r6, r5
 80067c4:	9509      	str	r5, [sp, #36]	; 0x24
 80067c6:	9507      	str	r5, [sp, #28]
 80067c8:	2322      	movs	r3, #34	; 0x22
 80067ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80068dc <_strtod_l+0x5ac>
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	f04f 0a00 	mov.w	sl, #0
 80067d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f43f adec 	beq.w	80063b4 <_strtod_l+0x84>
 80067dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80067de:	4620      	mov	r0, r4
 80067e0:	f001 fe92 	bl	8008508 <_Bfree>
 80067e4:	9907      	ldr	r1, [sp, #28]
 80067e6:	4620      	mov	r0, r4
 80067e8:	f001 fe8e 	bl	8008508 <_Bfree>
 80067ec:	4631      	mov	r1, r6
 80067ee:	4620      	mov	r0, r4
 80067f0:	f001 fe8a 	bl	8008508 <_Bfree>
 80067f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f6:	4620      	mov	r0, r4
 80067f8:	f001 fe86 	bl	8008508 <_Bfree>
 80067fc:	4629      	mov	r1, r5
 80067fe:	4620      	mov	r0, r4
 8006800:	f001 fe82 	bl	8008508 <_Bfree>
 8006804:	e5d6      	b.n	80063b4 <_strtod_l+0x84>
 8006806:	2300      	movs	r3, #0
 8006808:	ea4f 1828 	mov.w	r8, r8, asr #4
 800680c:	4650      	mov	r0, sl
 800680e:	4659      	mov	r1, fp
 8006810:	4699      	mov	r9, r3
 8006812:	f1b8 0f01 	cmp.w	r8, #1
 8006816:	dc21      	bgt.n	800685c <_strtod_l+0x52c>
 8006818:	b10b      	cbz	r3, 800681e <_strtod_l+0x4ee>
 800681a:	4682      	mov	sl, r0
 800681c:	468b      	mov	fp, r1
 800681e:	4b2e      	ldr	r3, [pc, #184]	; (80068d8 <_strtod_l+0x5a8>)
 8006820:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006824:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006828:	4652      	mov	r2, sl
 800682a:	465b      	mov	r3, fp
 800682c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	4b29      	ldr	r3, [pc, #164]	; (80068dc <_strtod_l+0x5ac>)
 8006836:	460a      	mov	r2, r1
 8006838:	400b      	ands	r3, r1
 800683a:	4929      	ldr	r1, [pc, #164]	; (80068e0 <_strtod_l+0x5b0>)
 800683c:	428b      	cmp	r3, r1
 800683e:	4682      	mov	sl, r0
 8006840:	d8be      	bhi.n	80067c0 <_strtod_l+0x490>
 8006842:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006846:	428b      	cmp	r3, r1
 8006848:	bf86      	itte	hi
 800684a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80068e4 <_strtod_l+0x5b4>
 800684e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006852:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006856:	2300      	movs	r3, #0
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	e081      	b.n	8006960 <_strtod_l+0x630>
 800685c:	f018 0f01 	tst.w	r8, #1
 8006860:	d007      	beq.n	8006872 <_strtod_l+0x542>
 8006862:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <_strtod_l+0x5a8>)
 8006864:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fec4 	bl	80005f8 <__aeabi_dmul>
 8006870:	2301      	movs	r3, #1
 8006872:	f109 0901 	add.w	r9, r9, #1
 8006876:	ea4f 0868 	mov.w	r8, r8, asr #1
 800687a:	e7ca      	b.n	8006812 <_strtod_l+0x4e2>
 800687c:	d0eb      	beq.n	8006856 <_strtod_l+0x526>
 800687e:	f1c8 0800 	rsb	r8, r8, #0
 8006882:	f018 020f 	ands.w	r2, r8, #15
 8006886:	d00a      	beq.n	800689e <_strtod_l+0x56e>
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <_strtod_l+0x5a4>)
 800688a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800688e:	4650      	mov	r0, sl
 8006890:	4659      	mov	r1, fp
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 ffd9 	bl	800084c <__aeabi_ddiv>
 800689a:	4682      	mov	sl, r0
 800689c:	468b      	mov	fp, r1
 800689e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80068a2:	d0d8      	beq.n	8006856 <_strtod_l+0x526>
 80068a4:	f1b8 0f1f 	cmp.w	r8, #31
 80068a8:	dd1e      	ble.n	80068e8 <_strtod_l+0x5b8>
 80068aa:	2500      	movs	r5, #0
 80068ac:	462e      	mov	r6, r5
 80068ae:	9509      	str	r5, [sp, #36]	; 0x24
 80068b0:	9507      	str	r5, [sp, #28]
 80068b2:	2322      	movs	r3, #34	; 0x22
 80068b4:	f04f 0a00 	mov.w	sl, #0
 80068b8:	f04f 0b00 	mov.w	fp, #0
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	e789      	b.n	80067d4 <_strtod_l+0x4a4>
 80068c0:	08009e41 	.word	0x08009e41
 80068c4:	08009e84 	.word	0x08009e84
 80068c8:	08009e39 	.word	0x08009e39
 80068cc:	08009fc4 	.word	0x08009fc4
 80068d0:	0800a280 	.word	0x0800a280
 80068d4:	0800a160 	.word	0x0800a160
 80068d8:	0800a138 	.word	0x0800a138
 80068dc:	7ff00000 	.word	0x7ff00000
 80068e0:	7ca00000 	.word	0x7ca00000
 80068e4:	7fefffff 	.word	0x7fefffff
 80068e8:	f018 0310 	ands.w	r3, r8, #16
 80068ec:	bf18      	it	ne
 80068ee:	236a      	movne	r3, #106	; 0x6a
 80068f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006ca8 <_strtod_l+0x978>
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	4650      	mov	r0, sl
 80068f8:	4659      	mov	r1, fp
 80068fa:	2300      	movs	r3, #0
 80068fc:	f018 0f01 	tst.w	r8, #1
 8006900:	d004      	beq.n	800690c <_strtod_l+0x5dc>
 8006902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	2301      	movs	r3, #1
 800690c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006910:	f109 0908 	add.w	r9, r9, #8
 8006914:	d1f2      	bne.n	80068fc <_strtod_l+0x5cc>
 8006916:	b10b      	cbz	r3, 800691c <_strtod_l+0x5ec>
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	b1bb      	cbz	r3, 8006950 <_strtod_l+0x620>
 8006920:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006924:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006928:	2b00      	cmp	r3, #0
 800692a:	4659      	mov	r1, fp
 800692c:	dd10      	ble.n	8006950 <_strtod_l+0x620>
 800692e:	2b1f      	cmp	r3, #31
 8006930:	f340 8128 	ble.w	8006b84 <_strtod_l+0x854>
 8006934:	2b34      	cmp	r3, #52	; 0x34
 8006936:	bfde      	ittt	le
 8006938:	3b20      	suble	r3, #32
 800693a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800693e:	fa02 f303 	lslle.w	r3, r2, r3
 8006942:	f04f 0a00 	mov.w	sl, #0
 8006946:	bfcc      	ite	gt
 8006948:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800694c:	ea03 0b01 	andle.w	fp, r3, r1
 8006950:	2200      	movs	r2, #0
 8006952:	2300      	movs	r3, #0
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7fa f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800695c:	2800      	cmp	r0, #0
 800695e:	d1a4      	bne.n	80068aa <_strtod_l+0x57a>
 8006960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006966:	462b      	mov	r3, r5
 8006968:	463a      	mov	r2, r7
 800696a:	4620      	mov	r0, r4
 800696c:	f001 fe38 	bl	80085e0 <__s2b>
 8006970:	9009      	str	r0, [sp, #36]	; 0x24
 8006972:	2800      	cmp	r0, #0
 8006974:	f43f af24 	beq.w	80067c0 <_strtod_l+0x490>
 8006978:	9b07      	ldr	r3, [sp, #28]
 800697a:	1b9e      	subs	r6, r3, r6
 800697c:	9b08      	ldr	r3, [sp, #32]
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb4      	ite	lt
 8006982:	4633      	movlt	r3, r6
 8006984:	2300      	movge	r3, #0
 8006986:	9310      	str	r3, [sp, #64]	; 0x40
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	2500      	movs	r5, #0
 800698c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006990:	9318      	str	r3, [sp, #96]	; 0x60
 8006992:	462e      	mov	r6, r5
 8006994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006996:	4620      	mov	r0, r4
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	f001 fd75 	bl	8008488 <_Balloc>
 800699e:	9007      	str	r0, [sp, #28]
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f43f af11 	beq.w	80067c8 <_strtod_l+0x498>
 80069a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	3202      	adds	r2, #2
 80069ac:	f103 010c 	add.w	r1, r3, #12
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	300c      	adds	r0, #12
 80069b4:	f001 fd5a 	bl	800846c <memcpy>
 80069b8:	ec4b ab10 	vmov	d0, sl, fp
 80069bc:	aa20      	add	r2, sp, #128	; 0x80
 80069be:	a91f      	add	r1, sp, #124	; 0x7c
 80069c0:	4620      	mov	r0, r4
 80069c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80069c6:	f002 f947 	bl	8008c58 <__d2b>
 80069ca:	901e      	str	r0, [sp, #120]	; 0x78
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f43f aefb 	beq.w	80067c8 <_strtod_l+0x498>
 80069d2:	2101      	movs	r1, #1
 80069d4:	4620      	mov	r0, r4
 80069d6:	f001 fe9d 	bl	8008714 <__i2b>
 80069da:	4606      	mov	r6, r0
 80069dc:	2800      	cmp	r0, #0
 80069de:	f43f aef3 	beq.w	80067c8 <_strtod_l+0x498>
 80069e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069e4:	9904      	ldr	r1, [sp, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfab      	itete	ge
 80069ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80069ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80069ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80069f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80069f4:	bfac      	ite	ge
 80069f6:	eb03 0902 	addge.w	r9, r3, r2
 80069fa:	1ad7      	sublt	r7, r2, r3
 80069fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069fe:	eba3 0801 	sub.w	r8, r3, r1
 8006a02:	4490      	add	r8, r2
 8006a04:	4ba3      	ldr	r3, [pc, #652]	; (8006c94 <_strtod_l+0x964>)
 8006a06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006a0a:	4598      	cmp	r8, r3
 8006a0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a10:	f280 80cc 	bge.w	8006bac <_strtod_l+0x87c>
 8006a14:	eba3 0308 	sub.w	r3, r3, r8
 8006a18:	2b1f      	cmp	r3, #31
 8006a1a:	eba2 0203 	sub.w	r2, r2, r3
 8006a1e:	f04f 0101 	mov.w	r1, #1
 8006a22:	f300 80b6 	bgt.w	8006b92 <_strtod_l+0x862>
 8006a26:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2a:	9311      	str	r3, [sp, #68]	; 0x44
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a30:	eb09 0802 	add.w	r8, r9, r2
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	45c1      	cmp	r9, r8
 8006a38:	4417      	add	r7, r2
 8006a3a:	441f      	add	r7, r3
 8006a3c:	464b      	mov	r3, r9
 8006a3e:	bfa8      	it	ge
 8006a40:	4643      	movge	r3, r8
 8006a42:	42bb      	cmp	r3, r7
 8006a44:	bfa8      	it	ge
 8006a46:	463b      	movge	r3, r7
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bfc2      	ittt	gt
 8006a4c:	eba8 0803 	subgt.w	r8, r8, r3
 8006a50:	1aff      	subgt	r7, r7, r3
 8006a52:	eba9 0903 	subgt.w	r9, r9, r3
 8006a56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dd17      	ble.n	8006a8c <_strtod_l+0x75c>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4620      	mov	r0, r4
 8006a62:	f001 ff13 	bl	800888c <__pow5mult>
 8006a66:	4606      	mov	r6, r0
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f43f aead 	beq.w	80067c8 <_strtod_l+0x498>
 8006a6e:	4601      	mov	r1, r0
 8006a70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a72:	4620      	mov	r0, r4
 8006a74:	f001 fe64 	bl	8008740 <__multiply>
 8006a78:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f43f aea4 	beq.w	80067c8 <_strtod_l+0x498>
 8006a80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a82:	4620      	mov	r0, r4
 8006a84:	f001 fd40 	bl	8008508 <_Bfree>
 8006a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a8a:	931e      	str	r3, [sp, #120]	; 0x78
 8006a8c:	f1b8 0f00 	cmp.w	r8, #0
 8006a90:	f300 8091 	bgt.w	8006bb6 <_strtod_l+0x886>
 8006a94:	9b08      	ldr	r3, [sp, #32]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd08      	ble.n	8006aac <_strtod_l+0x77c>
 8006a9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a9c:	9907      	ldr	r1, [sp, #28]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 fef4 	bl	800888c <__pow5mult>
 8006aa4:	9007      	str	r0, [sp, #28]
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f43f ae8e 	beq.w	80067c8 <_strtod_l+0x498>
 8006aac:	2f00      	cmp	r7, #0
 8006aae:	dd08      	ble.n	8006ac2 <_strtod_l+0x792>
 8006ab0:	9907      	ldr	r1, [sp, #28]
 8006ab2:	463a      	mov	r2, r7
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f001 ff43 	bl	8008940 <__lshift>
 8006aba:	9007      	str	r0, [sp, #28]
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f43f ae83 	beq.w	80067c8 <_strtod_l+0x498>
 8006ac2:	f1b9 0f00 	cmp.w	r9, #0
 8006ac6:	dd08      	ble.n	8006ada <_strtod_l+0x7aa>
 8006ac8:	4631      	mov	r1, r6
 8006aca:	464a      	mov	r2, r9
 8006acc:	4620      	mov	r0, r4
 8006ace:	f001 ff37 	bl	8008940 <__lshift>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f43f ae77 	beq.w	80067c8 <_strtod_l+0x498>
 8006ada:	9a07      	ldr	r2, [sp, #28]
 8006adc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f001 ffb6 	bl	8008a50 <__mdiff>
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f43f ae6e 	beq.w	80067c8 <_strtod_l+0x498>
 8006aec:	68c3      	ldr	r3, [r0, #12]
 8006aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006af0:	2300      	movs	r3, #0
 8006af2:	60c3      	str	r3, [r0, #12]
 8006af4:	4631      	mov	r1, r6
 8006af6:	f001 ff8f 	bl	8008a18 <__mcmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	da65      	bge.n	8006bca <_strtod_l+0x89a>
 8006afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b00:	ea53 030a 	orrs.w	r3, r3, sl
 8006b04:	f040 8087 	bne.w	8006c16 <_strtod_l+0x8e6>
 8006b08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8082 	bne.w	8006c16 <_strtod_l+0x8e6>
 8006b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b16:	0d1b      	lsrs	r3, r3, #20
 8006b18:	051b      	lsls	r3, r3, #20
 8006b1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b1e:	d97a      	bls.n	8006c16 <_strtod_l+0x8e6>
 8006b20:	696b      	ldr	r3, [r5, #20]
 8006b22:	b913      	cbnz	r3, 8006b2a <_strtod_l+0x7fa>
 8006b24:	692b      	ldr	r3, [r5, #16]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	dd75      	ble.n	8006c16 <_strtod_l+0x8e6>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f001 ff06 	bl	8008940 <__lshift>
 8006b34:	4631      	mov	r1, r6
 8006b36:	4605      	mov	r5, r0
 8006b38:	f001 ff6e 	bl	8008a18 <__mcmp>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	dd6a      	ble.n	8006c16 <_strtod_l+0x8e6>
 8006b40:	9904      	ldr	r1, [sp, #16]
 8006b42:	4a55      	ldr	r2, [pc, #340]	; (8006c98 <_strtod_l+0x968>)
 8006b44:	465b      	mov	r3, fp
 8006b46:	2900      	cmp	r1, #0
 8006b48:	f000 8085 	beq.w	8006c56 <_strtod_l+0x926>
 8006b4c:	ea02 010b 	and.w	r1, r2, fp
 8006b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b54:	dc7f      	bgt.n	8006c56 <_strtod_l+0x926>
 8006b56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b5a:	f77f aeaa 	ble.w	80068b2 <_strtod_l+0x582>
 8006b5e:	4a4f      	ldr	r2, [pc, #316]	; (8006c9c <_strtod_l+0x96c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006b66:	4650      	mov	r0, sl
 8006b68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006b6c:	4659      	mov	r1, fp
 8006b6e:	f7f9 fd43 	bl	80005f8 <__aeabi_dmul>
 8006b72:	460b      	mov	r3, r1
 8006b74:	4303      	orrs	r3, r0
 8006b76:	bf08      	it	eq
 8006b78:	2322      	moveq	r3, #34	; 0x22
 8006b7a:	4682      	mov	sl, r0
 8006b7c:	468b      	mov	fp, r1
 8006b7e:	bf08      	it	eq
 8006b80:	6023      	streq	r3, [r4, #0]
 8006b82:	e62b      	b.n	80067dc <_strtod_l+0x4ac>
 8006b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	ea03 0a0a 	and.w	sl, r3, sl
 8006b90:	e6de      	b.n	8006950 <_strtod_l+0x620>
 8006b92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006b96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006b9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006b9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ba2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba8:	9111      	str	r1, [sp, #68]	; 0x44
 8006baa:	e741      	b.n	8006a30 <_strtod_l+0x700>
 8006bac:	2300      	movs	r3, #0
 8006bae:	930c      	str	r3, [sp, #48]	; 0x30
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	9311      	str	r3, [sp, #68]	; 0x44
 8006bb4:	e73c      	b.n	8006a30 <_strtod_l+0x700>
 8006bb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006bb8:	4642      	mov	r2, r8
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f001 fec0 	bl	8008940 <__lshift>
 8006bc0:	901e      	str	r0, [sp, #120]	; 0x78
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f47f af66 	bne.w	8006a94 <_strtod_l+0x764>
 8006bc8:	e5fe      	b.n	80067c8 <_strtod_l+0x498>
 8006bca:	465f      	mov	r7, fp
 8006bcc:	d16e      	bne.n	8006cac <_strtod_l+0x97c>
 8006bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bd4:	b342      	cbz	r2, 8006c28 <_strtod_l+0x8f8>
 8006bd6:	4a32      	ldr	r2, [pc, #200]	; (8006ca0 <_strtod_l+0x970>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d128      	bne.n	8006c2e <_strtod_l+0x8fe>
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	4650      	mov	r0, sl
 8006be0:	b1eb      	cbz	r3, 8006c1e <_strtod_l+0x8ee>
 8006be2:	4a2d      	ldr	r2, [pc, #180]	; (8006c98 <_strtod_l+0x968>)
 8006be4:	403a      	ands	r2, r7
 8006be6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006bea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bee:	d819      	bhi.n	8006c24 <_strtod_l+0x8f4>
 8006bf0:	0d12      	lsrs	r2, r2, #20
 8006bf2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	4298      	cmp	r0, r3
 8006bfc:	d117      	bne.n	8006c2e <_strtod_l+0x8fe>
 8006bfe:	4b29      	ldr	r3, [pc, #164]	; (8006ca4 <_strtod_l+0x974>)
 8006c00:	429f      	cmp	r7, r3
 8006c02:	d102      	bne.n	8006c0a <_strtod_l+0x8da>
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f addf 	beq.w	80067c8 <_strtod_l+0x498>
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <_strtod_l+0x968>)
 8006c0c:	403b      	ands	r3, r7
 8006c0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006c12:	f04f 0a00 	mov.w	sl, #0
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1a0      	bne.n	8006b5e <_strtod_l+0x82e>
 8006c1c:	e5de      	b.n	80067dc <_strtod_l+0x4ac>
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c22:	e7ea      	b.n	8006bfa <_strtod_l+0x8ca>
 8006c24:	460b      	mov	r3, r1
 8006c26:	e7e8      	b.n	8006bfa <_strtod_l+0x8ca>
 8006c28:	ea53 030a 	orrs.w	r3, r3, sl
 8006c2c:	d088      	beq.n	8006b40 <_strtod_l+0x810>
 8006c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c30:	b1db      	cbz	r3, 8006c6a <_strtod_l+0x93a>
 8006c32:	423b      	tst	r3, r7
 8006c34:	d0ef      	beq.n	8006c16 <_strtod_l+0x8e6>
 8006c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c38:	9a04      	ldr	r2, [sp, #16]
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	4659      	mov	r1, fp
 8006c3e:	b1c3      	cbz	r3, 8006c72 <_strtod_l+0x942>
 8006c40:	f7ff fb58 	bl	80062f4 <sulp>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c4c:	f7f9 fb1e 	bl	800028c <__adddf3>
 8006c50:	4682      	mov	sl, r0
 8006c52:	468b      	mov	fp, r1
 8006c54:	e7df      	b.n	8006c16 <_strtod_l+0x8e6>
 8006c56:	4013      	ands	r3, r2
 8006c58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006c60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006c64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006c68:	e7d5      	b.n	8006c16 <_strtod_l+0x8e6>
 8006c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c6c:	ea13 0f0a 	tst.w	r3, sl
 8006c70:	e7e0      	b.n	8006c34 <_strtod_l+0x904>
 8006c72:	f7ff fb3f 	bl	80062f4 <sulp>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c7e:	f7f9 fb03 	bl	8000288 <__aeabi_dsub>
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	4682      	mov	sl, r0
 8006c88:	468b      	mov	fp, r1
 8006c8a:	f7f9 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d0c1      	beq.n	8006c16 <_strtod_l+0x8e6>
 8006c92:	e60e      	b.n	80068b2 <_strtod_l+0x582>
 8006c94:	fffffc02 	.word	0xfffffc02
 8006c98:	7ff00000 	.word	0x7ff00000
 8006c9c:	39500000 	.word	0x39500000
 8006ca0:	000fffff 	.word	0x000fffff
 8006ca4:	7fefffff 	.word	0x7fefffff
 8006ca8:	08009e98 	.word	0x08009e98
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f002 f82e 	bl	8008d10 <__ratio>
 8006cb4:	ec59 8b10 	vmov	r8, r9, d0
 8006cb8:	ee10 0a10 	vmov	r0, s0
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	f7f9 ff14 	bl	8000af0 <__aeabi_dcmple>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d07c      	beq.n	8006dc6 <_strtod_l+0xa96>
 8006ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04c      	beq.n	8006d6c <_strtod_l+0xa3c>
 8006cd2:	4b95      	ldr	r3, [pc, #596]	; (8006f28 <_strtod_l+0xbf8>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006cda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006f28 <_strtod_l+0xbf8>
 8006cde:	f04f 0800 	mov.w	r8, #0
 8006ce2:	4b92      	ldr	r3, [pc, #584]	; (8006f2c <_strtod_l+0xbfc>)
 8006ce4:	403b      	ands	r3, r7
 8006ce6:	9311      	str	r3, [sp, #68]	; 0x44
 8006ce8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cea:	4b91      	ldr	r3, [pc, #580]	; (8006f30 <_strtod_l+0xc00>)
 8006cec:	429a      	cmp	r2, r3
 8006cee:	f040 80b2 	bne.w	8006e56 <_strtod_l+0xb26>
 8006cf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cfa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006cfe:	ec4b ab10 	vmov	d0, sl, fp
 8006d02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006d06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006d0a:	f001 ff29 	bl	8008b60 <__ulp>
 8006d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d12:	ec53 2b10 	vmov	r2, r3, d0
 8006d16:	f7f9 fc6f 	bl	80005f8 <__aeabi_dmul>
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	f7f9 fab5 	bl	800028c <__adddf3>
 8006d22:	460b      	mov	r3, r1
 8006d24:	4981      	ldr	r1, [pc, #516]	; (8006f2c <_strtod_l+0xbfc>)
 8006d26:	4a83      	ldr	r2, [pc, #524]	; (8006f34 <_strtod_l+0xc04>)
 8006d28:	4019      	ands	r1, r3
 8006d2a:	4291      	cmp	r1, r2
 8006d2c:	4682      	mov	sl, r0
 8006d2e:	d95e      	bls.n	8006dee <_strtod_l+0xabe>
 8006d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d103      	bne.n	8006d42 <_strtod_l+0xa12>
 8006d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f43f ad43 	beq.w	80067c8 <_strtod_l+0x498>
 8006d42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006f40 <_strtod_l+0xc10>
 8006d46:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006d4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f001 fbdb 	bl	8008508 <_Bfree>
 8006d52:	9907      	ldr	r1, [sp, #28]
 8006d54:	4620      	mov	r0, r4
 8006d56:	f001 fbd7 	bl	8008508 <_Bfree>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f001 fbd3 	bl	8008508 <_Bfree>
 8006d62:	4629      	mov	r1, r5
 8006d64:	4620      	mov	r0, r4
 8006d66:	f001 fbcf 	bl	8008508 <_Bfree>
 8006d6a:	e613      	b.n	8006994 <_strtod_l+0x664>
 8006d6c:	f1ba 0f00 	cmp.w	sl, #0
 8006d70:	d11b      	bne.n	8006daa <_strtod_l+0xa7a>
 8006d72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d76:	b9f3      	cbnz	r3, 8006db6 <_strtod_l+0xa86>
 8006d78:	4b6b      	ldr	r3, [pc, #428]	; (8006f28 <_strtod_l+0xbf8>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 feac 	bl	8000adc <__aeabi_dcmplt>
 8006d84:	b9d0      	cbnz	r0, 8006dbc <_strtod_l+0xa8c>
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	4b6b      	ldr	r3, [pc, #428]	; (8006f38 <_strtod_l+0xc08>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f7f9 fc33 	bl	80005f8 <__aeabi_dmul>
 8006d92:	4680      	mov	r8, r0
 8006d94:	4689      	mov	r9, r1
 8006d96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006d9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006da0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006da4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006da8:	e79b      	b.n	8006ce2 <_strtod_l+0x9b2>
 8006daa:	f1ba 0f01 	cmp.w	sl, #1
 8006dae:	d102      	bne.n	8006db6 <_strtod_l+0xa86>
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	f43f ad7e 	beq.w	80068b2 <_strtod_l+0x582>
 8006db6:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <_strtod_l+0xc0c>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	e78c      	b.n	8006cd6 <_strtod_l+0x9a6>
 8006dbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f38 <_strtod_l+0xc08>
 8006dc0:	f04f 0800 	mov.w	r8, #0
 8006dc4:	e7e7      	b.n	8006d96 <_strtod_l+0xa66>
 8006dc6:	4b5c      	ldr	r3, [pc, #368]	; (8006f38 <_strtod_l+0xc08>)
 8006dc8:	4640      	mov	r0, r8
 8006dca:	4649      	mov	r1, r9
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f7f9 fc13 	bl	80005f8 <__aeabi_dmul>
 8006dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	4689      	mov	r9, r1
 8006dd8:	b933      	cbnz	r3, 8006de8 <_strtod_l+0xab8>
 8006dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dde:	9012      	str	r0, [sp, #72]	; 0x48
 8006de0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006de2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006de6:	e7dd      	b.n	8006da4 <_strtod_l+0xa74>
 8006de8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006dec:	e7f9      	b.n	8006de2 <_strtod_l+0xab2>
 8006dee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006df2:	9b04      	ldr	r3, [sp, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1a8      	bne.n	8006d4a <_strtod_l+0xa1a>
 8006df8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	051b      	lsls	r3, r3, #20
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d1a1      	bne.n	8006d4a <_strtod_l+0xa1a>
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 ff55 	bl	8000cb8 <__aeabi_d2lz>
 8006e0e:	f7f9 fbc5 	bl	800059c <__aeabi_l2d>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4640      	mov	r0, r8
 8006e18:	4649      	mov	r1, r9
 8006e1a:	f7f9 fa35 	bl	8000288 <__aeabi_dsub>
 8006e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e24:	ea43 030a 	orr.w	r3, r3, sl
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	4689      	mov	r9, r1
 8006e2e:	d053      	beq.n	8006ed8 <_strtod_l+0xba8>
 8006e30:	a335      	add	r3, pc, #212	; (adr r3, 8006f08 <_strtod_l+0xbd8>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 fe51 	bl	8000adc <__aeabi_dcmplt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f47f acce 	bne.w	80067dc <_strtod_l+0x4ac>
 8006e40:	a333      	add	r3, pc, #204	; (adr r3, 8006f10 <_strtod_l+0xbe0>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f af7b 	beq.w	8006d4a <_strtod_l+0xa1a>
 8006e54:	e4c2      	b.n	80067dc <_strtod_l+0x4ac>
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	b333      	cbz	r3, 8006ea8 <_strtod_l+0xb78>
 8006e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e60:	d822      	bhi.n	8006ea8 <_strtod_l+0xb78>
 8006e62:	a32d      	add	r3, pc, #180	; (adr r3, 8006f18 <_strtod_l+0xbe8>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fe40 	bl	8000af0 <__aeabi_dcmple>
 8006e70:	b1a0      	cbz	r0, 8006e9c <_strtod_l+0xb6c>
 8006e72:	4649      	mov	r1, r9
 8006e74:	4640      	mov	r0, r8
 8006e76:	f7f9 fe97 	bl	8000ba8 <__aeabi_d2uiz>
 8006e7a:	2801      	cmp	r0, #1
 8006e7c:	bf38      	it	cc
 8006e7e:	2001      	movcc	r0, #1
 8006e80:	f7f9 fb40 	bl	8000504 <__aeabi_ui2d>
 8006e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e86:	4680      	mov	r8, r0
 8006e88:	4689      	mov	r9, r1
 8006e8a:	bb13      	cbnz	r3, 8006ed2 <_strtod_l+0xba2>
 8006e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e90:	9014      	str	r0, [sp, #80]	; 0x50
 8006e92:	9315      	str	r3, [sp, #84]	; 0x54
 8006e94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006e98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ea0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006eb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006eb4:	f001 fe54 	bl	8008b60 <__ulp>
 8006eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ebc:	ec53 2b10 	vmov	r2, r3, d0
 8006ec0:	f7f9 fb9a 	bl	80005f8 <__aeabi_dmul>
 8006ec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ec8:	f7f9 f9e0 	bl	800028c <__adddf3>
 8006ecc:	4682      	mov	sl, r0
 8006ece:	468b      	mov	fp, r1
 8006ed0:	e78f      	b.n	8006df2 <_strtod_l+0xac2>
 8006ed2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006ed6:	e7dd      	b.n	8006e94 <_strtod_l+0xb64>
 8006ed8:	a311      	add	r3, pc, #68	; (adr r3, 8006f20 <_strtod_l+0xbf0>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 fdfd 	bl	8000adc <__aeabi_dcmplt>
 8006ee2:	e7b4      	b.n	8006e4e <_strtod_l+0xb1e>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006eea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	f7ff ba65 	b.w	80063bc <_strtod_l+0x8c>
 8006ef2:	2b65      	cmp	r3, #101	; 0x65
 8006ef4:	f43f ab5d 	beq.w	80065b2 <_strtod_l+0x282>
 8006ef8:	2b45      	cmp	r3, #69	; 0x45
 8006efa:	f43f ab5a 	beq.w	80065b2 <_strtod_l+0x282>
 8006efe:	2201      	movs	r2, #1
 8006f00:	f7ff bb92 	b.w	8006628 <_strtod_l+0x2f8>
 8006f04:	f3af 8000 	nop.w
 8006f08:	94a03595 	.word	0x94a03595
 8006f0c:	3fdfffff 	.word	0x3fdfffff
 8006f10:	35afe535 	.word	0x35afe535
 8006f14:	3fe00000 	.word	0x3fe00000
 8006f18:	ffc00000 	.word	0xffc00000
 8006f1c:	41dfffff 	.word	0x41dfffff
 8006f20:	94a03595 	.word	0x94a03595
 8006f24:	3fcfffff 	.word	0x3fcfffff
 8006f28:	3ff00000 	.word	0x3ff00000
 8006f2c:	7ff00000 	.word	0x7ff00000
 8006f30:	7fe00000 	.word	0x7fe00000
 8006f34:	7c9fffff 	.word	0x7c9fffff
 8006f38:	3fe00000 	.word	0x3fe00000
 8006f3c:	bff00000 	.word	0xbff00000
 8006f40:	7fefffff 	.word	0x7fefffff

08006f44 <_strtod_r>:
 8006f44:	4b01      	ldr	r3, [pc, #4]	; (8006f4c <_strtod_r+0x8>)
 8006f46:	f7ff b9f3 	b.w	8006330 <_strtod_l>
 8006f4a:	bf00      	nop
 8006f4c:	20000078 	.word	0x20000078

08006f50 <_strtol_l.isra.0>:
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f56:	d001      	beq.n	8006f5c <_strtol_l.isra.0+0xc>
 8006f58:	2b24      	cmp	r3, #36	; 0x24
 8006f5a:	d906      	bls.n	8006f6a <_strtol_l.isra.0+0x1a>
 8006f5c:	f7fe faf8 	bl	8005550 <__errno>
 8006f60:	2316      	movs	r3, #22
 8006f62:	6003      	str	r3, [r0, #0]
 8006f64:	2000      	movs	r0, #0
 8006f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6a:	4f3a      	ldr	r7, [pc, #232]	; (8007054 <_strtol_l.isra.0+0x104>)
 8006f6c:	468e      	mov	lr, r1
 8006f6e:	4676      	mov	r6, lr
 8006f70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f74:	5de5      	ldrb	r5, [r4, r7]
 8006f76:	f015 0508 	ands.w	r5, r5, #8
 8006f7a:	d1f8      	bne.n	8006f6e <_strtol_l.isra.0+0x1e>
 8006f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f7e:	d134      	bne.n	8006fea <_strtol_l.isra.0+0x9a>
 8006f80:	f89e 4000 	ldrb.w	r4, [lr]
 8006f84:	f04f 0801 	mov.w	r8, #1
 8006f88:	f106 0e02 	add.w	lr, r6, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05c      	beq.n	800704a <_strtol_l.isra.0+0xfa>
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d10c      	bne.n	8006fae <_strtol_l.isra.0+0x5e>
 8006f94:	2c30      	cmp	r4, #48	; 0x30
 8006f96:	d10a      	bne.n	8006fae <_strtol_l.isra.0+0x5e>
 8006f98:	f89e 4000 	ldrb.w	r4, [lr]
 8006f9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006fa0:	2c58      	cmp	r4, #88	; 0x58
 8006fa2:	d14d      	bne.n	8007040 <_strtol_l.isra.0+0xf0>
 8006fa4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f10e 0e02 	add.w	lr, lr, #2
 8006fae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006fb2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	fbbc f9f3 	udiv	r9, ip, r3
 8006fbc:	4635      	mov	r5, r6
 8006fbe:	fb03 ca19 	mls	sl, r3, r9, ip
 8006fc2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006fc6:	2f09      	cmp	r7, #9
 8006fc8:	d818      	bhi.n	8006ffc <_strtol_l.isra.0+0xac>
 8006fca:	463c      	mov	r4, r7
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	dd24      	ble.n	800701a <_strtol_l.isra.0+0xca>
 8006fd0:	2e00      	cmp	r6, #0
 8006fd2:	db1f      	blt.n	8007014 <_strtol_l.isra.0+0xc4>
 8006fd4:	45a9      	cmp	r9, r5
 8006fd6:	d31d      	bcc.n	8007014 <_strtol_l.isra.0+0xc4>
 8006fd8:	d101      	bne.n	8006fde <_strtol_l.isra.0+0x8e>
 8006fda:	45a2      	cmp	sl, r4
 8006fdc:	db1a      	blt.n	8007014 <_strtol_l.isra.0+0xc4>
 8006fde:	fb05 4503 	mla	r5, r5, r3, r4
 8006fe2:	2601      	movs	r6, #1
 8006fe4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006fe8:	e7eb      	b.n	8006fc2 <_strtol_l.isra.0+0x72>
 8006fea:	2c2b      	cmp	r4, #43	; 0x2b
 8006fec:	bf08      	it	eq
 8006fee:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006ff2:	46a8      	mov	r8, r5
 8006ff4:	bf08      	it	eq
 8006ff6:	f106 0e02 	addeq.w	lr, r6, #2
 8006ffa:	e7c7      	b.n	8006f8c <_strtol_l.isra.0+0x3c>
 8006ffc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007000:	2f19      	cmp	r7, #25
 8007002:	d801      	bhi.n	8007008 <_strtol_l.isra.0+0xb8>
 8007004:	3c37      	subs	r4, #55	; 0x37
 8007006:	e7e1      	b.n	8006fcc <_strtol_l.isra.0+0x7c>
 8007008:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800700c:	2f19      	cmp	r7, #25
 800700e:	d804      	bhi.n	800701a <_strtol_l.isra.0+0xca>
 8007010:	3c57      	subs	r4, #87	; 0x57
 8007012:	e7db      	b.n	8006fcc <_strtol_l.isra.0+0x7c>
 8007014:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007018:	e7e4      	b.n	8006fe4 <_strtol_l.isra.0+0x94>
 800701a:	2e00      	cmp	r6, #0
 800701c:	da05      	bge.n	800702a <_strtol_l.isra.0+0xda>
 800701e:	2322      	movs	r3, #34	; 0x22
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	4665      	mov	r5, ip
 8007024:	b942      	cbnz	r2, 8007038 <_strtol_l.isra.0+0xe8>
 8007026:	4628      	mov	r0, r5
 8007028:	e79d      	b.n	8006f66 <_strtol_l.isra.0+0x16>
 800702a:	f1b8 0f00 	cmp.w	r8, #0
 800702e:	d000      	beq.n	8007032 <_strtol_l.isra.0+0xe2>
 8007030:	426d      	negs	r5, r5
 8007032:	2a00      	cmp	r2, #0
 8007034:	d0f7      	beq.n	8007026 <_strtol_l.isra.0+0xd6>
 8007036:	b10e      	cbz	r6, 800703c <_strtol_l.isra.0+0xec>
 8007038:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800703c:	6011      	str	r1, [r2, #0]
 800703e:	e7f2      	b.n	8007026 <_strtol_l.isra.0+0xd6>
 8007040:	2430      	movs	r4, #48	; 0x30
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1b3      	bne.n	8006fae <_strtol_l.isra.0+0x5e>
 8007046:	2308      	movs	r3, #8
 8007048:	e7b1      	b.n	8006fae <_strtol_l.isra.0+0x5e>
 800704a:	2c30      	cmp	r4, #48	; 0x30
 800704c:	d0a4      	beq.n	8006f98 <_strtol_l.isra.0+0x48>
 800704e:	230a      	movs	r3, #10
 8007050:	e7ad      	b.n	8006fae <_strtol_l.isra.0+0x5e>
 8007052:	bf00      	nop
 8007054:	08009ec1 	.word	0x08009ec1

08007058 <_strtol_r>:
 8007058:	f7ff bf7a 	b.w	8006f50 <_strtol_l.isra.0>

0800705c <quorem>:
 800705c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	6903      	ldr	r3, [r0, #16]
 8007062:	690c      	ldr	r4, [r1, #16]
 8007064:	42a3      	cmp	r3, r4
 8007066:	4607      	mov	r7, r0
 8007068:	f2c0 8081 	blt.w	800716e <quorem+0x112>
 800706c:	3c01      	subs	r4, #1
 800706e:	f101 0814 	add.w	r8, r1, #20
 8007072:	f100 0514 	add.w	r5, r0, #20
 8007076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007084:	3301      	adds	r3, #1
 8007086:	429a      	cmp	r2, r3
 8007088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800708c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007090:	fbb2 f6f3 	udiv	r6, r2, r3
 8007094:	d331      	bcc.n	80070fa <quorem+0x9e>
 8007096:	f04f 0e00 	mov.w	lr, #0
 800709a:	4640      	mov	r0, r8
 800709c:	46ac      	mov	ip, r5
 800709e:	46f2      	mov	sl, lr
 80070a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80070a4:	b293      	uxth	r3, r2
 80070a6:	fb06 e303 	mla	r3, r6, r3, lr
 80070aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	ebaa 0303 	sub.w	r3, sl, r3
 80070b4:	0c12      	lsrs	r2, r2, #16
 80070b6:	f8dc a000 	ldr.w	sl, [ip]
 80070ba:	fb06 e202 	mla	r2, r6, r2, lr
 80070be:	fa13 f38a 	uxtah	r3, r3, sl
 80070c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070c6:	fa1f fa82 	uxth.w	sl, r2
 80070ca:	f8dc 2000 	ldr.w	r2, [ip]
 80070ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80070d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070dc:	4581      	cmp	r9, r0
 80070de:	f84c 3b04 	str.w	r3, [ip], #4
 80070e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070e6:	d2db      	bcs.n	80070a0 <quorem+0x44>
 80070e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80070ec:	b92b      	cbnz	r3, 80070fa <quorem+0x9e>
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	3b04      	subs	r3, #4
 80070f2:	429d      	cmp	r5, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	d32e      	bcc.n	8007156 <quorem+0xfa>
 80070f8:	613c      	str	r4, [r7, #16]
 80070fa:	4638      	mov	r0, r7
 80070fc:	f001 fc8c 	bl	8008a18 <__mcmp>
 8007100:	2800      	cmp	r0, #0
 8007102:	db24      	blt.n	800714e <quorem+0xf2>
 8007104:	3601      	adds	r6, #1
 8007106:	4628      	mov	r0, r5
 8007108:	f04f 0c00 	mov.w	ip, #0
 800710c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007110:	f8d0 e000 	ldr.w	lr, [r0]
 8007114:	b293      	uxth	r3, r2
 8007116:	ebac 0303 	sub.w	r3, ip, r3
 800711a:	0c12      	lsrs	r2, r2, #16
 800711c:	fa13 f38e 	uxtah	r3, r3, lr
 8007120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007128:	b29b      	uxth	r3, r3
 800712a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800712e:	45c1      	cmp	r9, r8
 8007130:	f840 3b04 	str.w	r3, [r0], #4
 8007134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007138:	d2e8      	bcs.n	800710c <quorem+0xb0>
 800713a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800713e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007142:	b922      	cbnz	r2, 800714e <quorem+0xf2>
 8007144:	3b04      	subs	r3, #4
 8007146:	429d      	cmp	r5, r3
 8007148:	461a      	mov	r2, r3
 800714a:	d30a      	bcc.n	8007162 <quorem+0x106>
 800714c:	613c      	str	r4, [r7, #16]
 800714e:	4630      	mov	r0, r6
 8007150:	b003      	add	sp, #12
 8007152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	3b04      	subs	r3, #4
 800715a:	2a00      	cmp	r2, #0
 800715c:	d1cc      	bne.n	80070f8 <quorem+0x9c>
 800715e:	3c01      	subs	r4, #1
 8007160:	e7c7      	b.n	80070f2 <quorem+0x96>
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	3b04      	subs	r3, #4
 8007166:	2a00      	cmp	r2, #0
 8007168:	d1f0      	bne.n	800714c <quorem+0xf0>
 800716a:	3c01      	subs	r4, #1
 800716c:	e7eb      	b.n	8007146 <quorem+0xea>
 800716e:	2000      	movs	r0, #0
 8007170:	e7ee      	b.n	8007150 <quorem+0xf4>
 8007172:	0000      	movs	r0, r0
 8007174:	0000      	movs	r0, r0
	...

08007178 <_dtoa_r>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	ed2d 8b02 	vpush	{d8}
 8007180:	ec57 6b10 	vmov	r6, r7, d0
 8007184:	b095      	sub	sp, #84	; 0x54
 8007186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800718c:	9105      	str	r1, [sp, #20]
 800718e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007192:	4604      	mov	r4, r0
 8007194:	9209      	str	r2, [sp, #36]	; 0x24
 8007196:	930f      	str	r3, [sp, #60]	; 0x3c
 8007198:	b975      	cbnz	r5, 80071b8 <_dtoa_r+0x40>
 800719a:	2010      	movs	r0, #16
 800719c:	f001 f94c 	bl	8008438 <malloc>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6260      	str	r0, [r4, #36]	; 0x24
 80071a4:	b920      	cbnz	r0, 80071b0 <_dtoa_r+0x38>
 80071a6:	4bb2      	ldr	r3, [pc, #712]	; (8007470 <_dtoa_r+0x2f8>)
 80071a8:	21ea      	movs	r1, #234	; 0xea
 80071aa:	48b2      	ldr	r0, [pc, #712]	; (8007474 <_dtoa_r+0x2fc>)
 80071ac:	f002 f874 	bl	8009298 <__assert_func>
 80071b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071b4:	6005      	str	r5, [r0, #0]
 80071b6:	60c5      	str	r5, [r0, #12]
 80071b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	b151      	cbz	r1, 80071d4 <_dtoa_r+0x5c>
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	604a      	str	r2, [r1, #4]
 80071c2:	2301      	movs	r3, #1
 80071c4:	4093      	lsls	r3, r2
 80071c6:	608b      	str	r3, [r1, #8]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f001 f99d 	bl	8008508 <_Bfree>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	1e3b      	subs	r3, r7, #0
 80071d6:	bfb9      	ittee	lt
 80071d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	9303      	strlt	r3, [sp, #12]
 80071de:	2300      	movge	r3, #0
 80071e0:	f8c8 3000 	strge.w	r3, [r8]
 80071e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80071e8:	4ba3      	ldr	r3, [pc, #652]	; (8007478 <_dtoa_r+0x300>)
 80071ea:	bfbc      	itt	lt
 80071ec:	2201      	movlt	r2, #1
 80071ee:	f8c8 2000 	strlt.w	r2, [r8]
 80071f2:	ea33 0309 	bics.w	r3, r3, r9
 80071f6:	d11b      	bne.n	8007230 <_dtoa_r+0xb8>
 80071f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007204:	4333      	orrs	r3, r6
 8007206:	f000 857a 	beq.w	8007cfe <_dtoa_r+0xb86>
 800720a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800720c:	b963      	cbnz	r3, 8007228 <_dtoa_r+0xb0>
 800720e:	4b9b      	ldr	r3, [pc, #620]	; (800747c <_dtoa_r+0x304>)
 8007210:	e024      	b.n	800725c <_dtoa_r+0xe4>
 8007212:	4b9b      	ldr	r3, [pc, #620]	; (8007480 <_dtoa_r+0x308>)
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	9800      	ldr	r0, [sp, #0]
 800721e:	b015      	add	sp, #84	; 0x54
 8007220:	ecbd 8b02 	vpop	{d8}
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	4b94      	ldr	r3, [pc, #592]	; (800747c <_dtoa_r+0x304>)
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	3303      	adds	r3, #3
 800722e:	e7f3      	b.n	8007218 <_dtoa_r+0xa0>
 8007230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	ec51 0b17 	vmov	r0, r1, d7
 800723a:	2300      	movs	r3, #0
 800723c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007240:	f7f9 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007244:	4680      	mov	r8, r0
 8007246:	b158      	cbz	r0, 8007260 <_dtoa_r+0xe8>
 8007248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800724a:	2301      	movs	r3, #1
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8551 	beq.w	8007cf8 <_dtoa_r+0xb80>
 8007256:	488b      	ldr	r0, [pc, #556]	; (8007484 <_dtoa_r+0x30c>)
 8007258:	6018      	str	r0, [r3, #0]
 800725a:	1e43      	subs	r3, r0, #1
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	e7dd      	b.n	800721c <_dtoa_r+0xa4>
 8007260:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007264:	aa12      	add	r2, sp, #72	; 0x48
 8007266:	a913      	add	r1, sp, #76	; 0x4c
 8007268:	4620      	mov	r0, r4
 800726a:	f001 fcf5 	bl	8008c58 <__d2b>
 800726e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007272:	4683      	mov	fp, r0
 8007274:	2d00      	cmp	r5, #0
 8007276:	d07c      	beq.n	8007372 <_dtoa_r+0x1fa>
 8007278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800727e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007282:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007286:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800728a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800728e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007292:	4b7d      	ldr	r3, [pc, #500]	; (8007488 <_dtoa_r+0x310>)
 8007294:	2200      	movs	r2, #0
 8007296:	4630      	mov	r0, r6
 8007298:	4639      	mov	r1, r7
 800729a:	f7f8 fff5 	bl	8000288 <__aeabi_dsub>
 800729e:	a36e      	add	r3, pc, #440	; (adr r3, 8007458 <_dtoa_r+0x2e0>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f9 f9a8 	bl	80005f8 <__aeabi_dmul>
 80072a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007460 <_dtoa_r+0x2e8>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f8 ffed 	bl	800028c <__adddf3>
 80072b2:	4606      	mov	r6, r0
 80072b4:	4628      	mov	r0, r5
 80072b6:	460f      	mov	r7, r1
 80072b8:	f7f9 f934 	bl	8000524 <__aeabi_i2d>
 80072bc:	a36a      	add	r3, pc, #424	; (adr r3, 8007468 <_dtoa_r+0x2f0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f9 f999 	bl	80005f8 <__aeabi_dmul>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f8 ffdd 	bl	800028c <__adddf3>
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	f7f9 fc3f 	bl	8000b58 <__aeabi_d2iz>
 80072da:	2200      	movs	r2, #0
 80072dc:	4682      	mov	sl, r0
 80072de:	2300      	movs	r3, #0
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 fbfa 	bl	8000adc <__aeabi_dcmplt>
 80072e8:	b148      	cbz	r0, 80072fe <_dtoa_r+0x186>
 80072ea:	4650      	mov	r0, sl
 80072ec:	f7f9 f91a 	bl	8000524 <__aeabi_i2d>
 80072f0:	4632      	mov	r2, r6
 80072f2:	463b      	mov	r3, r7
 80072f4:	f7f9 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f8:	b908      	cbnz	r0, 80072fe <_dtoa_r+0x186>
 80072fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80072fe:	f1ba 0f16 	cmp.w	sl, #22
 8007302:	d854      	bhi.n	80073ae <_dtoa_r+0x236>
 8007304:	4b61      	ldr	r3, [pc, #388]	; (800748c <_dtoa_r+0x314>)
 8007306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007312:	f7f9 fbe3 	bl	8000adc <__aeabi_dcmplt>
 8007316:	2800      	cmp	r0, #0
 8007318:	d04b      	beq.n	80073b2 <_dtoa_r+0x23a>
 800731a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800731e:	2300      	movs	r3, #0
 8007320:	930e      	str	r3, [sp, #56]	; 0x38
 8007322:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007324:	1b5d      	subs	r5, r3, r5
 8007326:	1e6b      	subs	r3, r5, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	bf43      	ittte	mi
 800732c:	2300      	movmi	r3, #0
 800732e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007332:	9304      	strmi	r3, [sp, #16]
 8007334:	f04f 0800 	movpl.w	r8, #0
 8007338:	f1ba 0f00 	cmp.w	sl, #0
 800733c:	db3b      	blt.n	80073b6 <_dtoa_r+0x23e>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007344:	4453      	add	r3, sl
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	2300      	movs	r3, #0
 800734a:	9306      	str	r3, [sp, #24]
 800734c:	9b05      	ldr	r3, [sp, #20]
 800734e:	2b09      	cmp	r3, #9
 8007350:	d869      	bhi.n	8007426 <_dtoa_r+0x2ae>
 8007352:	2b05      	cmp	r3, #5
 8007354:	bfc4      	itt	gt
 8007356:	3b04      	subgt	r3, #4
 8007358:	9305      	strgt	r3, [sp, #20]
 800735a:	9b05      	ldr	r3, [sp, #20]
 800735c:	f1a3 0302 	sub.w	r3, r3, #2
 8007360:	bfcc      	ite	gt
 8007362:	2500      	movgt	r5, #0
 8007364:	2501      	movle	r5, #1
 8007366:	2b03      	cmp	r3, #3
 8007368:	d869      	bhi.n	800743e <_dtoa_r+0x2c6>
 800736a:	e8df f003 	tbb	[pc, r3]
 800736e:	4e2c      	.short	0x4e2c
 8007370:	5a4c      	.short	0x5a4c
 8007372:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007376:	441d      	add	r5, r3
 8007378:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800737c:	2b20      	cmp	r3, #32
 800737e:	bfc1      	itttt	gt
 8007380:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007384:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007388:	fa09 f303 	lslgt.w	r3, r9, r3
 800738c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007390:	bfda      	itte	le
 8007392:	f1c3 0320 	rsble	r3, r3, #32
 8007396:	fa06 f003 	lslle.w	r0, r6, r3
 800739a:	4318      	orrgt	r0, r3
 800739c:	f7f9 f8b2 	bl	8000504 <__aeabi_ui2d>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4606      	mov	r6, r0
 80073a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073a8:	3d01      	subs	r5, #1
 80073aa:	9310      	str	r3, [sp, #64]	; 0x40
 80073ac:	e771      	b.n	8007292 <_dtoa_r+0x11a>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e7b6      	b.n	8007320 <_dtoa_r+0x1a8>
 80073b2:	900e      	str	r0, [sp, #56]	; 0x38
 80073b4:	e7b5      	b.n	8007322 <_dtoa_r+0x1aa>
 80073b6:	f1ca 0300 	rsb	r3, sl, #0
 80073ba:	9306      	str	r3, [sp, #24]
 80073bc:	2300      	movs	r3, #0
 80073be:	eba8 080a 	sub.w	r8, r8, sl
 80073c2:	930d      	str	r3, [sp, #52]	; 0x34
 80073c4:	e7c2      	b.n	800734c <_dtoa_r+0x1d4>
 80073c6:	2300      	movs	r3, #0
 80073c8:	9308      	str	r3, [sp, #32]
 80073ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dc39      	bgt.n	8007444 <_dtoa_r+0x2cc>
 80073d0:	f04f 0901 	mov.w	r9, #1
 80073d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80073d8:	464b      	mov	r3, r9
 80073da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80073de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073e0:	2200      	movs	r2, #0
 80073e2:	6042      	str	r2, [r0, #4]
 80073e4:	2204      	movs	r2, #4
 80073e6:	f102 0614 	add.w	r6, r2, #20
 80073ea:	429e      	cmp	r6, r3
 80073ec:	6841      	ldr	r1, [r0, #4]
 80073ee:	d92f      	bls.n	8007450 <_dtoa_r+0x2d8>
 80073f0:	4620      	mov	r0, r4
 80073f2:	f001 f849 	bl	8008488 <_Balloc>
 80073f6:	9000      	str	r0, [sp, #0]
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d14b      	bne.n	8007494 <_dtoa_r+0x31c>
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <_dtoa_r+0x318>)
 80073fe:	4602      	mov	r2, r0
 8007400:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007404:	e6d1      	b.n	80071aa <_dtoa_r+0x32>
 8007406:	2301      	movs	r3, #1
 8007408:	e7de      	b.n	80073c8 <_dtoa_r+0x250>
 800740a:	2300      	movs	r3, #0
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	eb0a 0903 	add.w	r9, sl, r3
 8007414:	f109 0301 	add.w	r3, r9, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	bfb8      	it	lt
 800741e:	2301      	movlt	r3, #1
 8007420:	e7dd      	b.n	80073de <_dtoa_r+0x266>
 8007422:	2301      	movs	r3, #1
 8007424:	e7f2      	b.n	800740c <_dtoa_r+0x294>
 8007426:	2501      	movs	r5, #1
 8007428:	2300      	movs	r3, #0
 800742a:	9305      	str	r3, [sp, #20]
 800742c:	9508      	str	r5, [sp, #32]
 800742e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007432:	2200      	movs	r2, #0
 8007434:	f8cd 9004 	str.w	r9, [sp, #4]
 8007438:	2312      	movs	r3, #18
 800743a:	9209      	str	r2, [sp, #36]	; 0x24
 800743c:	e7cf      	b.n	80073de <_dtoa_r+0x266>
 800743e:	2301      	movs	r3, #1
 8007440:	9308      	str	r3, [sp, #32]
 8007442:	e7f4      	b.n	800742e <_dtoa_r+0x2b6>
 8007444:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007448:	f8cd 9004 	str.w	r9, [sp, #4]
 800744c:	464b      	mov	r3, r9
 800744e:	e7c6      	b.n	80073de <_dtoa_r+0x266>
 8007450:	3101      	adds	r1, #1
 8007452:	6041      	str	r1, [r0, #4]
 8007454:	0052      	lsls	r2, r2, #1
 8007456:	e7c6      	b.n	80073e6 <_dtoa_r+0x26e>
 8007458:	636f4361 	.word	0x636f4361
 800745c:	3fd287a7 	.word	0x3fd287a7
 8007460:	8b60c8b3 	.word	0x8b60c8b3
 8007464:	3fc68a28 	.word	0x3fc68a28
 8007468:	509f79fb 	.word	0x509f79fb
 800746c:	3fd34413 	.word	0x3fd34413
 8007470:	08009fce 	.word	0x08009fce
 8007474:	08009fe5 	.word	0x08009fe5
 8007478:	7ff00000 	.word	0x7ff00000
 800747c:	08009fca 	.word	0x08009fca
 8007480:	08009fc1 	.word	0x08009fc1
 8007484:	08009e45 	.word	0x08009e45
 8007488:	3ff80000 	.word	0x3ff80000
 800748c:	0800a160 	.word	0x0800a160
 8007490:	0800a044 	.word	0x0800a044
 8007494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007496:	9a00      	ldr	r2, [sp, #0]
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	9b01      	ldr	r3, [sp, #4]
 800749c:	2b0e      	cmp	r3, #14
 800749e:	f200 80ad 	bhi.w	80075fc <_dtoa_r+0x484>
 80074a2:	2d00      	cmp	r5, #0
 80074a4:	f000 80aa 	beq.w	80075fc <_dtoa_r+0x484>
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	dd36      	ble.n	800751c <_dtoa_r+0x3a4>
 80074ae:	4ac3      	ldr	r2, [pc, #780]	; (80077bc <_dtoa_r+0x644>)
 80074b0:	f00a 030f 	and.w	r3, sl, #15
 80074b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074b8:	ed93 7b00 	vldr	d7, [r3]
 80074bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80074c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80074c4:	eeb0 8a47 	vmov.f32	s16, s14
 80074c8:	eef0 8a67 	vmov.f32	s17, s15
 80074cc:	d016      	beq.n	80074fc <_dtoa_r+0x384>
 80074ce:	4bbc      	ldr	r3, [pc, #752]	; (80077c0 <_dtoa_r+0x648>)
 80074d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074d8:	f7f9 f9b8 	bl	800084c <__aeabi_ddiv>
 80074dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e0:	f007 070f 	and.w	r7, r7, #15
 80074e4:	2503      	movs	r5, #3
 80074e6:	4eb6      	ldr	r6, [pc, #728]	; (80077c0 <_dtoa_r+0x648>)
 80074e8:	b957      	cbnz	r7, 8007500 <_dtoa_r+0x388>
 80074ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ee:	ec53 2b18 	vmov	r2, r3, d8
 80074f2:	f7f9 f9ab 	bl	800084c <__aeabi_ddiv>
 80074f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074fa:	e029      	b.n	8007550 <_dtoa_r+0x3d8>
 80074fc:	2502      	movs	r5, #2
 80074fe:	e7f2      	b.n	80074e6 <_dtoa_r+0x36e>
 8007500:	07f9      	lsls	r1, r7, #31
 8007502:	d508      	bpl.n	8007516 <_dtoa_r+0x39e>
 8007504:	ec51 0b18 	vmov	r0, r1, d8
 8007508:	e9d6 2300 	ldrd	r2, r3, [r6]
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	ec41 0b18 	vmov	d8, r0, r1
 8007514:	3501      	adds	r5, #1
 8007516:	107f      	asrs	r7, r7, #1
 8007518:	3608      	adds	r6, #8
 800751a:	e7e5      	b.n	80074e8 <_dtoa_r+0x370>
 800751c:	f000 80a6 	beq.w	800766c <_dtoa_r+0x4f4>
 8007520:	f1ca 0600 	rsb	r6, sl, #0
 8007524:	4ba5      	ldr	r3, [pc, #660]	; (80077bc <_dtoa_r+0x644>)
 8007526:	4fa6      	ldr	r7, [pc, #664]	; (80077c0 <_dtoa_r+0x648>)
 8007528:	f006 020f 	and.w	r2, r6, #15
 800752c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007538:	f7f9 f85e 	bl	80005f8 <__aeabi_dmul>
 800753c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007540:	1136      	asrs	r6, r6, #4
 8007542:	2300      	movs	r3, #0
 8007544:	2502      	movs	r5, #2
 8007546:	2e00      	cmp	r6, #0
 8007548:	f040 8085 	bne.w	8007656 <_dtoa_r+0x4de>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1d2      	bne.n	80074f6 <_dtoa_r+0x37e>
 8007550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 808c 	beq.w	8007670 <_dtoa_r+0x4f8>
 8007558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800755c:	4b99      	ldr	r3, [pc, #612]	; (80077c4 <_dtoa_r+0x64c>)
 800755e:	2200      	movs	r2, #0
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 faba 	bl	8000adc <__aeabi_dcmplt>
 8007568:	2800      	cmp	r0, #0
 800756a:	f000 8081 	beq.w	8007670 <_dtoa_r+0x4f8>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d07d      	beq.n	8007670 <_dtoa_r+0x4f8>
 8007574:	f1b9 0f00 	cmp.w	r9, #0
 8007578:	dd3c      	ble.n	80075f4 <_dtoa_r+0x47c>
 800757a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	2200      	movs	r2, #0
 8007582:	4b91      	ldr	r3, [pc, #580]	; (80077c8 <_dtoa_r+0x650>)
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	f7f9 f836 	bl	80005f8 <__aeabi_dmul>
 800758c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007590:	3501      	adds	r5, #1
 8007592:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007596:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800759a:	4628      	mov	r0, r5
 800759c:	f7f8 ffc2 	bl	8000524 <__aeabi_i2d>
 80075a0:	4632      	mov	r2, r6
 80075a2:	463b      	mov	r3, r7
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	4b88      	ldr	r3, [pc, #544]	; (80077cc <_dtoa_r+0x654>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f7f8 fe6e 	bl	800028c <__adddf3>
 80075b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d15c      	bne.n	800767a <_dtoa_r+0x502>
 80075c0:	4b83      	ldr	r3, [pc, #524]	; (80077d0 <_dtoa_r+0x658>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	4630      	mov	r0, r6
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f8 fe5e 	bl	8000288 <__aeabi_dsub>
 80075cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d0:	4606      	mov	r6, r0
 80075d2:	460f      	mov	r7, r1
 80075d4:	f7f9 faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f040 8296 	bne.w	8007b0a <_dtoa_r+0x992>
 80075de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075e2:	4630      	mov	r0, r6
 80075e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e8:	4639      	mov	r1, r7
 80075ea:	f7f9 fa77 	bl	8000adc <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f040 8288 	bne.w	8007b04 <_dtoa_r+0x98c>
 80075f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f2c0 8158 	blt.w	80078b4 <_dtoa_r+0x73c>
 8007604:	f1ba 0f0e 	cmp.w	sl, #14
 8007608:	f300 8154 	bgt.w	80078b4 <_dtoa_r+0x73c>
 800760c:	4b6b      	ldr	r3, [pc, #428]	; (80077bc <_dtoa_r+0x644>)
 800760e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007612:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	f280 80e3 	bge.w	80077e4 <_dtoa_r+0x66c>
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f300 80df 	bgt.w	80077e4 <_dtoa_r+0x66c>
 8007626:	f040 826d 	bne.w	8007b04 <_dtoa_r+0x98c>
 800762a:	4b69      	ldr	r3, [pc, #420]	; (80077d0 <_dtoa_r+0x658>)
 800762c:	2200      	movs	r2, #0
 800762e:	4640      	mov	r0, r8
 8007630:	4649      	mov	r1, r9
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800763a:	f7f9 fa63 	bl	8000b04 <__aeabi_dcmpge>
 800763e:	9e01      	ldr	r6, [sp, #4]
 8007640:	4637      	mov	r7, r6
 8007642:	2800      	cmp	r0, #0
 8007644:	f040 8243 	bne.w	8007ace <_dtoa_r+0x956>
 8007648:	9d00      	ldr	r5, [sp, #0]
 800764a:	2331      	movs	r3, #49	; 0x31
 800764c:	f805 3b01 	strb.w	r3, [r5], #1
 8007650:	f10a 0a01 	add.w	sl, sl, #1
 8007654:	e23f      	b.n	8007ad6 <_dtoa_r+0x95e>
 8007656:	07f2      	lsls	r2, r6, #31
 8007658:	d505      	bpl.n	8007666 <_dtoa_r+0x4ee>
 800765a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765e:	f7f8 ffcb 	bl	80005f8 <__aeabi_dmul>
 8007662:	3501      	adds	r5, #1
 8007664:	2301      	movs	r3, #1
 8007666:	1076      	asrs	r6, r6, #1
 8007668:	3708      	adds	r7, #8
 800766a:	e76c      	b.n	8007546 <_dtoa_r+0x3ce>
 800766c:	2502      	movs	r5, #2
 800766e:	e76f      	b.n	8007550 <_dtoa_r+0x3d8>
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	f8cd a01c 	str.w	sl, [sp, #28]
 8007676:	930c      	str	r3, [sp, #48]	; 0x30
 8007678:	e78d      	b.n	8007596 <_dtoa_r+0x41e>
 800767a:	9900      	ldr	r1, [sp, #0]
 800767c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800767e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007680:	4b4e      	ldr	r3, [pc, #312]	; (80077bc <_dtoa_r+0x644>)
 8007682:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007686:	4401      	add	r1, r0
 8007688:	9102      	str	r1, [sp, #8]
 800768a:	9908      	ldr	r1, [sp, #32]
 800768c:	eeb0 8a47 	vmov.f32	s16, s14
 8007690:	eef0 8a67 	vmov.f32	s17, s15
 8007694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800769c:	2900      	cmp	r1, #0
 800769e:	d045      	beq.n	800772c <_dtoa_r+0x5b4>
 80076a0:	494c      	ldr	r1, [pc, #304]	; (80077d4 <_dtoa_r+0x65c>)
 80076a2:	2000      	movs	r0, #0
 80076a4:	f7f9 f8d2 	bl	800084c <__aeabi_ddiv>
 80076a8:	ec53 2b18 	vmov	r2, r3, d8
 80076ac:	f7f8 fdec 	bl	8000288 <__aeabi_dsub>
 80076b0:	9d00      	ldr	r5, [sp, #0]
 80076b2:	ec41 0b18 	vmov	d8, r0, r1
 80076b6:	4639      	mov	r1, r7
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7f9 fa4d 	bl	8000b58 <__aeabi_d2iz>
 80076be:	900c      	str	r0, [sp, #48]	; 0x30
 80076c0:	f7f8 ff30 	bl	8000524 <__aeabi_i2d>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	f7f8 fddc 	bl	8000288 <__aeabi_dsub>
 80076d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076d2:	3330      	adds	r3, #48	; 0x30
 80076d4:	f805 3b01 	strb.w	r3, [r5], #1
 80076d8:	ec53 2b18 	vmov	r2, r3, d8
 80076dc:	4606      	mov	r6, r0
 80076de:	460f      	mov	r7, r1
 80076e0:	f7f9 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d165      	bne.n	80077b4 <_dtoa_r+0x63c>
 80076e8:	4632      	mov	r2, r6
 80076ea:	463b      	mov	r3, r7
 80076ec:	4935      	ldr	r1, [pc, #212]	; (80077c4 <_dtoa_r+0x64c>)
 80076ee:	2000      	movs	r0, #0
 80076f0:	f7f8 fdca 	bl	8000288 <__aeabi_dsub>
 80076f4:	ec53 2b18 	vmov	r2, r3, d8
 80076f8:	f7f9 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 80b9 	bne.w	8007874 <_dtoa_r+0x6fc>
 8007702:	9b02      	ldr	r3, [sp, #8]
 8007704:	429d      	cmp	r5, r3
 8007706:	f43f af75 	beq.w	80075f4 <_dtoa_r+0x47c>
 800770a:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <_dtoa_r+0x650>)
 800770c:	ec51 0b18 	vmov	r0, r1, d8
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff71 	bl	80005f8 <__aeabi_dmul>
 8007716:	4b2c      	ldr	r3, [pc, #176]	; (80077c8 <_dtoa_r+0x650>)
 8007718:	ec41 0b18 	vmov	d8, r0, r1
 800771c:	2200      	movs	r2, #0
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f8 ff69 	bl	80005f8 <__aeabi_dmul>
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	e7c4      	b.n	80076b6 <_dtoa_r+0x53e>
 800772c:	ec51 0b17 	vmov	r0, r1, d7
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	9d00      	ldr	r5, [sp, #0]
 8007738:	930c      	str	r3, [sp, #48]	; 0x30
 800773a:	ec41 0b18 	vmov	d8, r0, r1
 800773e:	4639      	mov	r1, r7
 8007740:	4630      	mov	r0, r6
 8007742:	f7f9 fa09 	bl	8000b58 <__aeabi_d2iz>
 8007746:	9011      	str	r0, [sp, #68]	; 0x44
 8007748:	f7f8 feec 	bl	8000524 <__aeabi_i2d>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4630      	mov	r0, r6
 8007752:	4639      	mov	r1, r7
 8007754:	f7f8 fd98 	bl	8000288 <__aeabi_dsub>
 8007758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800775a:	3330      	adds	r3, #48	; 0x30
 800775c:	f805 3b01 	strb.w	r3, [r5], #1
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	429d      	cmp	r5, r3
 8007764:	4606      	mov	r6, r0
 8007766:	460f      	mov	r7, r1
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	d134      	bne.n	80077d8 <_dtoa_r+0x660>
 800776e:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <_dtoa_r+0x65c>)
 8007770:	ec51 0b18 	vmov	r0, r1, d8
 8007774:	f7f8 fd8a 	bl	800028c <__adddf3>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f9 f9ca 	bl	8000b18 <__aeabi_dcmpgt>
 8007784:	2800      	cmp	r0, #0
 8007786:	d175      	bne.n	8007874 <_dtoa_r+0x6fc>
 8007788:	ec53 2b18 	vmov	r2, r3, d8
 800778c:	4911      	ldr	r1, [pc, #68]	; (80077d4 <_dtoa_r+0x65c>)
 800778e:	2000      	movs	r0, #0
 8007790:	f7f8 fd7a 	bl	8000288 <__aeabi_dsub>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4630      	mov	r0, r6
 800779a:	4639      	mov	r1, r7
 800779c:	f7f9 f99e 	bl	8000adc <__aeabi_dcmplt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	f43f af27 	beq.w	80075f4 <_dtoa_r+0x47c>
 80077a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077a8:	1e6b      	subs	r3, r5, #1
 80077aa:	930c      	str	r3, [sp, #48]	; 0x30
 80077ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077b0:	2b30      	cmp	r3, #48	; 0x30
 80077b2:	d0f8      	beq.n	80077a6 <_dtoa_r+0x62e>
 80077b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077b8:	e04a      	b.n	8007850 <_dtoa_r+0x6d8>
 80077ba:	bf00      	nop
 80077bc:	0800a160 	.word	0x0800a160
 80077c0:	0800a138 	.word	0x0800a138
 80077c4:	3ff00000 	.word	0x3ff00000
 80077c8:	40240000 	.word	0x40240000
 80077cc:	401c0000 	.word	0x401c0000
 80077d0:	40140000 	.word	0x40140000
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	4baf      	ldr	r3, [pc, #700]	; (8007a98 <_dtoa_r+0x920>)
 80077da:	f7f8 ff0d 	bl	80005f8 <__aeabi_dmul>
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	e7ac      	b.n	800773e <_dtoa_r+0x5c6>
 80077e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077e8:	9d00      	ldr	r5, [sp, #0]
 80077ea:	4642      	mov	r2, r8
 80077ec:	464b      	mov	r3, r9
 80077ee:	4630      	mov	r0, r6
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f9 f82b 	bl	800084c <__aeabi_ddiv>
 80077f6:	f7f9 f9af 	bl	8000b58 <__aeabi_d2iz>
 80077fa:	9002      	str	r0, [sp, #8]
 80077fc:	f7f8 fe92 	bl	8000524 <__aeabi_i2d>
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	f7f8 fef8 	bl	80005f8 <__aeabi_dmul>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f8 fd3a 	bl	8000288 <__aeabi_dsub>
 8007814:	9e02      	ldr	r6, [sp, #8]
 8007816:	9f01      	ldr	r7, [sp, #4]
 8007818:	3630      	adds	r6, #48	; 0x30
 800781a:	f805 6b01 	strb.w	r6, [r5], #1
 800781e:	9e00      	ldr	r6, [sp, #0]
 8007820:	1bae      	subs	r6, r5, r6
 8007822:	42b7      	cmp	r7, r6
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	d137      	bne.n	800789a <_dtoa_r+0x722>
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4642      	mov	r2, r8
 8007830:	464b      	mov	r3, r9
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	f7f9 f96f 	bl	8000b18 <__aeabi_dcmpgt>
 800783a:	b9c8      	cbnz	r0, 8007870 <_dtoa_r+0x6f8>
 800783c:	4642      	mov	r2, r8
 800783e:	464b      	mov	r3, r9
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 8007848:	b110      	cbz	r0, 8007850 <_dtoa_r+0x6d8>
 800784a:	9b02      	ldr	r3, [sp, #8]
 800784c:	07d9      	lsls	r1, r3, #31
 800784e:	d40f      	bmi.n	8007870 <_dtoa_r+0x6f8>
 8007850:	4620      	mov	r0, r4
 8007852:	4659      	mov	r1, fp
 8007854:	f000 fe58 	bl	8008508 <_Bfree>
 8007858:	2300      	movs	r3, #0
 800785a:	702b      	strb	r3, [r5, #0]
 800785c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800785e:	f10a 0001 	add.w	r0, sl, #1
 8007862:	6018      	str	r0, [r3, #0]
 8007864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007866:	2b00      	cmp	r3, #0
 8007868:	f43f acd8 	beq.w	800721c <_dtoa_r+0xa4>
 800786c:	601d      	str	r5, [r3, #0]
 800786e:	e4d5      	b.n	800721c <_dtoa_r+0xa4>
 8007870:	f8cd a01c 	str.w	sl, [sp, #28]
 8007874:	462b      	mov	r3, r5
 8007876:	461d      	mov	r5, r3
 8007878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787c:	2a39      	cmp	r2, #57	; 0x39
 800787e:	d108      	bne.n	8007892 <_dtoa_r+0x71a>
 8007880:	9a00      	ldr	r2, [sp, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d1f7      	bne.n	8007876 <_dtoa_r+0x6fe>
 8007886:	9a07      	ldr	r2, [sp, #28]
 8007888:	9900      	ldr	r1, [sp, #0]
 800788a:	3201      	adds	r2, #1
 800788c:	9207      	str	r2, [sp, #28]
 800788e:	2230      	movs	r2, #48	; 0x30
 8007890:	700a      	strb	r2, [r1, #0]
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	3201      	adds	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e78c      	b.n	80077b4 <_dtoa_r+0x63c>
 800789a:	4b7f      	ldr	r3, [pc, #508]	; (8007a98 <_dtoa_r+0x920>)
 800789c:	2200      	movs	r2, #0
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4606      	mov	r6, r0
 80078a8:	460f      	mov	r7, r1
 80078aa:	f7f9 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d09b      	beq.n	80077ea <_dtoa_r+0x672>
 80078b2:	e7cd      	b.n	8007850 <_dtoa_r+0x6d8>
 80078b4:	9a08      	ldr	r2, [sp, #32]
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	f000 80c4 	beq.w	8007a44 <_dtoa_r+0x8cc>
 80078bc:	9a05      	ldr	r2, [sp, #20]
 80078be:	2a01      	cmp	r2, #1
 80078c0:	f300 80a8 	bgt.w	8007a14 <_dtoa_r+0x89c>
 80078c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	f000 80a0 	beq.w	8007a0c <_dtoa_r+0x894>
 80078cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078d0:	9e06      	ldr	r6, [sp, #24]
 80078d2:	4645      	mov	r5, r8
 80078d4:	9a04      	ldr	r2, [sp, #16]
 80078d6:	2101      	movs	r1, #1
 80078d8:	441a      	add	r2, r3
 80078da:	4620      	mov	r0, r4
 80078dc:	4498      	add	r8, r3
 80078de:	9204      	str	r2, [sp, #16]
 80078e0:	f000 ff18 	bl	8008714 <__i2b>
 80078e4:	4607      	mov	r7, r0
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	dd0b      	ble.n	8007902 <_dtoa_r+0x78a>
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd08      	ble.n	8007902 <_dtoa_r+0x78a>
 80078f0:	42ab      	cmp	r3, r5
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	bfa8      	it	ge
 80078f6:	462b      	movge	r3, r5
 80078f8:	eba8 0803 	sub.w	r8, r8, r3
 80078fc:	1aed      	subs	r5, r5, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	9b06      	ldr	r3, [sp, #24]
 8007904:	b1fb      	cbz	r3, 8007946 <_dtoa_r+0x7ce>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 809f 	beq.w	8007a4c <_dtoa_r+0x8d4>
 800790e:	2e00      	cmp	r6, #0
 8007910:	dd11      	ble.n	8007936 <_dtoa_r+0x7be>
 8007912:	4639      	mov	r1, r7
 8007914:	4632      	mov	r2, r6
 8007916:	4620      	mov	r0, r4
 8007918:	f000 ffb8 	bl	800888c <__pow5mult>
 800791c:	465a      	mov	r2, fp
 800791e:	4601      	mov	r1, r0
 8007920:	4607      	mov	r7, r0
 8007922:	4620      	mov	r0, r4
 8007924:	f000 ff0c 	bl	8008740 <__multiply>
 8007928:	4659      	mov	r1, fp
 800792a:	9007      	str	r0, [sp, #28]
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fdeb 	bl	8008508 <_Bfree>
 8007932:	9b07      	ldr	r3, [sp, #28]
 8007934:	469b      	mov	fp, r3
 8007936:	9b06      	ldr	r3, [sp, #24]
 8007938:	1b9a      	subs	r2, r3, r6
 800793a:	d004      	beq.n	8007946 <_dtoa_r+0x7ce>
 800793c:	4659      	mov	r1, fp
 800793e:	4620      	mov	r0, r4
 8007940:	f000 ffa4 	bl	800888c <__pow5mult>
 8007944:	4683      	mov	fp, r0
 8007946:	2101      	movs	r1, #1
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fee3 	bl	8008714 <__i2b>
 800794e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007950:	2b00      	cmp	r3, #0
 8007952:	4606      	mov	r6, r0
 8007954:	dd7c      	ble.n	8007a50 <_dtoa_r+0x8d8>
 8007956:	461a      	mov	r2, r3
 8007958:	4601      	mov	r1, r0
 800795a:	4620      	mov	r0, r4
 800795c:	f000 ff96 	bl	800888c <__pow5mult>
 8007960:	9b05      	ldr	r3, [sp, #20]
 8007962:	2b01      	cmp	r3, #1
 8007964:	4606      	mov	r6, r0
 8007966:	dd76      	ble.n	8007a56 <_dtoa_r+0x8de>
 8007968:	2300      	movs	r3, #0
 800796a:	9306      	str	r3, [sp, #24]
 800796c:	6933      	ldr	r3, [r6, #16]
 800796e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007972:	6918      	ldr	r0, [r3, #16]
 8007974:	f000 fe7e 	bl	8008674 <__hi0bits>
 8007978:	f1c0 0020 	rsb	r0, r0, #32
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	4418      	add	r0, r3
 8007980:	f010 001f 	ands.w	r0, r0, #31
 8007984:	f000 8086 	beq.w	8007a94 <_dtoa_r+0x91c>
 8007988:	f1c0 0320 	rsb	r3, r0, #32
 800798c:	2b04      	cmp	r3, #4
 800798e:	dd7f      	ble.n	8007a90 <_dtoa_r+0x918>
 8007990:	f1c0 001c 	rsb	r0, r0, #28
 8007994:	9b04      	ldr	r3, [sp, #16]
 8007996:	4403      	add	r3, r0
 8007998:	4480      	add	r8, r0
 800799a:	4405      	add	r5, r0
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	f1b8 0f00 	cmp.w	r8, #0
 80079a2:	dd05      	ble.n	80079b0 <_dtoa_r+0x838>
 80079a4:	4659      	mov	r1, fp
 80079a6:	4642      	mov	r2, r8
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 ffc9 	bl	8008940 <__lshift>
 80079ae:	4683      	mov	fp, r0
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dd05      	ble.n	80079c2 <_dtoa_r+0x84a>
 80079b6:	4631      	mov	r1, r6
 80079b8:	461a      	mov	r2, r3
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 ffc0 	bl	8008940 <__lshift>
 80079c0:	4606      	mov	r6, r0
 80079c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d069      	beq.n	8007a9c <_dtoa_r+0x924>
 80079c8:	4631      	mov	r1, r6
 80079ca:	4658      	mov	r0, fp
 80079cc:	f001 f824 	bl	8008a18 <__mcmp>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	da63      	bge.n	8007a9c <_dtoa_r+0x924>
 80079d4:	2300      	movs	r3, #0
 80079d6:	4659      	mov	r1, fp
 80079d8:	220a      	movs	r2, #10
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fdb6 	bl	800854c <__multadd>
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80079e6:	4683      	mov	fp, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 818f 	beq.w	8007d0c <_dtoa_r+0xb94>
 80079ee:	4639      	mov	r1, r7
 80079f0:	2300      	movs	r3, #0
 80079f2:	220a      	movs	r2, #10
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fda9 	bl	800854c <__multadd>
 80079fa:	f1b9 0f00 	cmp.w	r9, #0
 80079fe:	4607      	mov	r7, r0
 8007a00:	f300 808e 	bgt.w	8007b20 <_dtoa_r+0x9a8>
 8007a04:	9b05      	ldr	r3, [sp, #20]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	dc50      	bgt.n	8007aac <_dtoa_r+0x934>
 8007a0a:	e089      	b.n	8007b20 <_dtoa_r+0x9a8>
 8007a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a12:	e75d      	b.n	80078d0 <_dtoa_r+0x758>
 8007a14:	9b01      	ldr	r3, [sp, #4]
 8007a16:	1e5e      	subs	r6, r3, #1
 8007a18:	9b06      	ldr	r3, [sp, #24]
 8007a1a:	42b3      	cmp	r3, r6
 8007a1c:	bfbf      	itttt	lt
 8007a1e:	9b06      	ldrlt	r3, [sp, #24]
 8007a20:	9606      	strlt	r6, [sp, #24]
 8007a22:	1af2      	sublt	r2, r6, r3
 8007a24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007a26:	bfb6      	itet	lt
 8007a28:	189b      	addlt	r3, r3, r2
 8007a2a:	1b9e      	subge	r6, r3, r6
 8007a2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	bfb8      	it	lt
 8007a32:	2600      	movlt	r6, #0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bfb5      	itete	lt
 8007a38:	eba8 0503 	sublt.w	r5, r8, r3
 8007a3c:	9b01      	ldrge	r3, [sp, #4]
 8007a3e:	2300      	movlt	r3, #0
 8007a40:	4645      	movge	r5, r8
 8007a42:	e747      	b.n	80078d4 <_dtoa_r+0x75c>
 8007a44:	9e06      	ldr	r6, [sp, #24]
 8007a46:	9f08      	ldr	r7, [sp, #32]
 8007a48:	4645      	mov	r5, r8
 8007a4a:	e74c      	b.n	80078e6 <_dtoa_r+0x76e>
 8007a4c:	9a06      	ldr	r2, [sp, #24]
 8007a4e:	e775      	b.n	800793c <_dtoa_r+0x7c4>
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	dc18      	bgt.n	8007a88 <_dtoa_r+0x910>
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	b9b3      	cbnz	r3, 8007a88 <_dtoa_r+0x910>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a60:	b9a3      	cbnz	r3, 8007a8c <_dtoa_r+0x914>
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a68:	0d1b      	lsrs	r3, r3, #20
 8007a6a:	051b      	lsls	r3, r3, #20
 8007a6c:	b12b      	cbz	r3, 8007a7a <_dtoa_r+0x902>
 8007a6e:	9b04      	ldr	r3, [sp, #16]
 8007a70:	3301      	adds	r3, #1
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	f108 0801 	add.w	r8, r8, #1
 8007a78:	2301      	movs	r3, #1
 8007a7a:	9306      	str	r3, [sp, #24]
 8007a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f47f af74 	bne.w	800796c <_dtoa_r+0x7f4>
 8007a84:	2001      	movs	r0, #1
 8007a86:	e779      	b.n	800797c <_dtoa_r+0x804>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	e7f6      	b.n	8007a7a <_dtoa_r+0x902>
 8007a8c:	9b02      	ldr	r3, [sp, #8]
 8007a8e:	e7f4      	b.n	8007a7a <_dtoa_r+0x902>
 8007a90:	d085      	beq.n	800799e <_dtoa_r+0x826>
 8007a92:	4618      	mov	r0, r3
 8007a94:	301c      	adds	r0, #28
 8007a96:	e77d      	b.n	8007994 <_dtoa_r+0x81c>
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dc38      	bgt.n	8007b14 <_dtoa_r+0x99c>
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	dd35      	ble.n	8007b14 <_dtoa_r+0x99c>
 8007aa8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007aac:	f1b9 0f00 	cmp.w	r9, #0
 8007ab0:	d10d      	bne.n	8007ace <_dtoa_r+0x956>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	2205      	movs	r2, #5
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 fd47 	bl	800854c <__multadd>
 8007abe:	4601      	mov	r1, r0
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 ffa8 	bl	8008a18 <__mcmp>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f73f adbd 	bgt.w	8007648 <_dtoa_r+0x4d0>
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	9d00      	ldr	r5, [sp, #0]
 8007ad2:	ea6f 0a03 	mvn.w	sl, r3
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	4631      	mov	r1, r6
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fd13 	bl	8008508 <_Bfree>
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	f43f aeb4 	beq.w	8007850 <_dtoa_r+0x6d8>
 8007ae8:	f1b8 0f00 	cmp.w	r8, #0
 8007aec:	d005      	beq.n	8007afa <_dtoa_r+0x982>
 8007aee:	45b8      	cmp	r8, r7
 8007af0:	d003      	beq.n	8007afa <_dtoa_r+0x982>
 8007af2:	4641      	mov	r1, r8
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fd07 	bl	8008508 <_Bfree>
 8007afa:	4639      	mov	r1, r7
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fd03 	bl	8008508 <_Bfree>
 8007b02:	e6a5      	b.n	8007850 <_dtoa_r+0x6d8>
 8007b04:	2600      	movs	r6, #0
 8007b06:	4637      	mov	r7, r6
 8007b08:	e7e1      	b.n	8007ace <_dtoa_r+0x956>
 8007b0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b10:	4637      	mov	r7, r6
 8007b12:	e599      	b.n	8007648 <_dtoa_r+0x4d0>
 8007b14:	9b08      	ldr	r3, [sp, #32]
 8007b16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80fd 	beq.w	8007d1a <_dtoa_r+0xba2>
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	dd05      	ble.n	8007b30 <_dtoa_r+0x9b8>
 8007b24:	4639      	mov	r1, r7
 8007b26:	462a      	mov	r2, r5
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 ff09 	bl	8008940 <__lshift>
 8007b2e:	4607      	mov	r7, r0
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d05c      	beq.n	8007bf0 <_dtoa_r+0xa78>
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fca5 	bl	8008488 <_Balloc>
 8007b3e:	4605      	mov	r5, r0
 8007b40:	b928      	cbnz	r0, 8007b4e <_dtoa_r+0x9d6>
 8007b42:	4b80      	ldr	r3, [pc, #512]	; (8007d44 <_dtoa_r+0xbcc>)
 8007b44:	4602      	mov	r2, r0
 8007b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b4a:	f7ff bb2e 	b.w	80071aa <_dtoa_r+0x32>
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	3202      	adds	r2, #2
 8007b52:	0092      	lsls	r2, r2, #2
 8007b54:	f107 010c 	add.w	r1, r7, #12
 8007b58:	300c      	adds	r0, #12
 8007b5a:	f000 fc87 	bl	800846c <memcpy>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4629      	mov	r1, r5
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 feec 	bl	8008940 <__lshift>
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	444b      	add	r3, r9
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	46b8      	mov	r8, r7
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	4607      	mov	r7, r0
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	4631      	mov	r1, r6
 8007b84:	3b01      	subs	r3, #1
 8007b86:	4658      	mov	r0, fp
 8007b88:	9302      	str	r3, [sp, #8]
 8007b8a:	f7ff fa67 	bl	800705c <quorem>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	3330      	adds	r3, #48	; 0x30
 8007b92:	9004      	str	r0, [sp, #16]
 8007b94:	4641      	mov	r1, r8
 8007b96:	4658      	mov	r0, fp
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	f000 ff3d 	bl	8008a18 <__mcmp>
 8007b9e:	463a      	mov	r2, r7
 8007ba0:	4681      	mov	r9, r0
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 ff53 	bl	8008a50 <__mdiff>
 8007baa:	68c2      	ldr	r2, [r0, #12]
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	4605      	mov	r5, r0
 8007bb0:	bb02      	cbnz	r2, 8007bf4 <_dtoa_r+0xa7c>
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f000 ff2f 	bl	8008a18 <__mcmp>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007bc6:	f000 fc9f 	bl	8008508 <_Bfree>
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bce:	9d01      	ldr	r5, [sp, #4]
 8007bd0:	ea43 0102 	orr.w	r1, r3, r2
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	d10d      	bne.n	8007bf8 <_dtoa_r+0xa80>
 8007bdc:	2b39      	cmp	r3, #57	; 0x39
 8007bde:	d029      	beq.n	8007c34 <_dtoa_r+0xabc>
 8007be0:	f1b9 0f00 	cmp.w	r9, #0
 8007be4:	dd01      	ble.n	8007bea <_dtoa_r+0xa72>
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	3331      	adds	r3, #49	; 0x31
 8007bea:	9a02      	ldr	r2, [sp, #8]
 8007bec:	7013      	strb	r3, [r2, #0]
 8007bee:	e774      	b.n	8007ada <_dtoa_r+0x962>
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	e7b9      	b.n	8007b68 <_dtoa_r+0x9f0>
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	e7e2      	b.n	8007bbe <_dtoa_r+0xa46>
 8007bf8:	f1b9 0f00 	cmp.w	r9, #0
 8007bfc:	db06      	blt.n	8007c0c <_dtoa_r+0xa94>
 8007bfe:	9905      	ldr	r1, [sp, #20]
 8007c00:	ea41 0909 	orr.w	r9, r1, r9
 8007c04:	9906      	ldr	r1, [sp, #24]
 8007c06:	ea59 0101 	orrs.w	r1, r9, r1
 8007c0a:	d120      	bne.n	8007c4e <_dtoa_r+0xad6>
 8007c0c:	2a00      	cmp	r2, #0
 8007c0e:	ddec      	ble.n	8007bea <_dtoa_r+0xa72>
 8007c10:	4659      	mov	r1, fp
 8007c12:	2201      	movs	r2, #1
 8007c14:	4620      	mov	r0, r4
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	f000 fe92 	bl	8008940 <__lshift>
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4683      	mov	fp, r0
 8007c20:	f000 fefa 	bl	8008a18 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	dc02      	bgt.n	8007c30 <_dtoa_r+0xab8>
 8007c2a:	d1de      	bne.n	8007bea <_dtoa_r+0xa72>
 8007c2c:	07da      	lsls	r2, r3, #31
 8007c2e:	d5dc      	bpl.n	8007bea <_dtoa_r+0xa72>
 8007c30:	2b39      	cmp	r3, #57	; 0x39
 8007c32:	d1d8      	bne.n	8007be6 <_dtoa_r+0xa6e>
 8007c34:	9a02      	ldr	r2, [sp, #8]
 8007c36:	2339      	movs	r3, #57	; 0x39
 8007c38:	7013      	strb	r3, [r2, #0]
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	461d      	mov	r5, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c44:	2a39      	cmp	r2, #57	; 0x39
 8007c46:	d050      	beq.n	8007cea <_dtoa_r+0xb72>
 8007c48:	3201      	adds	r2, #1
 8007c4a:	701a      	strb	r2, [r3, #0]
 8007c4c:	e745      	b.n	8007ada <_dtoa_r+0x962>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dd03      	ble.n	8007c5a <_dtoa_r+0xae2>
 8007c52:	2b39      	cmp	r3, #57	; 0x39
 8007c54:	d0ee      	beq.n	8007c34 <_dtoa_r+0xabc>
 8007c56:	3301      	adds	r3, #1
 8007c58:	e7c7      	b.n	8007bea <_dtoa_r+0xa72>
 8007c5a:	9a01      	ldr	r2, [sp, #4]
 8007c5c:	9907      	ldr	r1, [sp, #28]
 8007c5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c62:	428a      	cmp	r2, r1
 8007c64:	d02a      	beq.n	8007cbc <_dtoa_r+0xb44>
 8007c66:	4659      	mov	r1, fp
 8007c68:	2300      	movs	r3, #0
 8007c6a:	220a      	movs	r2, #10
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fc6d 	bl	800854c <__multadd>
 8007c72:	45b8      	cmp	r8, r7
 8007c74:	4683      	mov	fp, r0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	f04f 020a 	mov.w	r2, #10
 8007c7e:	4641      	mov	r1, r8
 8007c80:	4620      	mov	r0, r4
 8007c82:	d107      	bne.n	8007c94 <_dtoa_r+0xb1c>
 8007c84:	f000 fc62 	bl	800854c <__multadd>
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	9b01      	ldr	r3, [sp, #4]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	e775      	b.n	8007b80 <_dtoa_r+0xa08>
 8007c94:	f000 fc5a 	bl	800854c <__multadd>
 8007c98:	4639      	mov	r1, r7
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	220a      	movs	r2, #10
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fc53 	bl	800854c <__multadd>
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	e7f0      	b.n	8007c8c <_dtoa_r+0xb14>
 8007caa:	f1b9 0f00 	cmp.w	r9, #0
 8007cae:	9a00      	ldr	r2, [sp, #0]
 8007cb0:	bfcc      	ite	gt
 8007cb2:	464d      	movgt	r5, r9
 8007cb4:	2501      	movle	r5, #1
 8007cb6:	4415      	add	r5, r2
 8007cb8:	f04f 0800 	mov.w	r8, #0
 8007cbc:	4659      	mov	r1, fp
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	f000 fe3c 	bl	8008940 <__lshift>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4683      	mov	fp, r0
 8007ccc:	f000 fea4 	bl	8008a18 <__mcmp>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	dcb2      	bgt.n	8007c3a <_dtoa_r+0xac2>
 8007cd4:	d102      	bne.n	8007cdc <_dtoa_r+0xb64>
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	07db      	lsls	r3, r3, #31
 8007cda:	d4ae      	bmi.n	8007c3a <_dtoa_r+0xac2>
 8007cdc:	462b      	mov	r3, r5
 8007cde:	461d      	mov	r5, r3
 8007ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ce4:	2a30      	cmp	r2, #48	; 0x30
 8007ce6:	d0fa      	beq.n	8007cde <_dtoa_r+0xb66>
 8007ce8:	e6f7      	b.n	8007ada <_dtoa_r+0x962>
 8007cea:	9a00      	ldr	r2, [sp, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d1a5      	bne.n	8007c3c <_dtoa_r+0xac4>
 8007cf0:	f10a 0a01 	add.w	sl, sl, #1
 8007cf4:	2331      	movs	r3, #49	; 0x31
 8007cf6:	e779      	b.n	8007bec <_dtoa_r+0xa74>
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <_dtoa_r+0xbd0>)
 8007cfa:	f7ff baaf 	b.w	800725c <_dtoa_r+0xe4>
 8007cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f47f aa86 	bne.w	8007212 <_dtoa_r+0x9a>
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <_dtoa_r+0xbd4>)
 8007d08:	f7ff baa8 	b.w	800725c <_dtoa_r+0xe4>
 8007d0c:	f1b9 0f00 	cmp.w	r9, #0
 8007d10:	dc03      	bgt.n	8007d1a <_dtoa_r+0xba2>
 8007d12:	9b05      	ldr	r3, [sp, #20]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	f73f aec9 	bgt.w	8007aac <_dtoa_r+0x934>
 8007d1a:	9d00      	ldr	r5, [sp, #0]
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4658      	mov	r0, fp
 8007d20:	f7ff f99c 	bl	800705c <quorem>
 8007d24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d28:	f805 3b01 	strb.w	r3, [r5], #1
 8007d2c:	9a00      	ldr	r2, [sp, #0]
 8007d2e:	1aaa      	subs	r2, r5, r2
 8007d30:	4591      	cmp	r9, r2
 8007d32:	ddba      	ble.n	8007caa <_dtoa_r+0xb32>
 8007d34:	4659      	mov	r1, fp
 8007d36:	2300      	movs	r3, #0
 8007d38:	220a      	movs	r2, #10
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fc06 	bl	800854c <__multadd>
 8007d40:	4683      	mov	fp, r0
 8007d42:	e7eb      	b.n	8007d1c <_dtoa_r+0xba4>
 8007d44:	0800a044 	.word	0x0800a044
 8007d48:	08009e44 	.word	0x08009e44
 8007d4c:	08009fc1 	.word	0x08009fc1

08007d50 <rshift>:
 8007d50:	6903      	ldr	r3, [r0, #16]
 8007d52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d5e:	f100 0414 	add.w	r4, r0, #20
 8007d62:	dd45      	ble.n	8007df0 <rshift+0xa0>
 8007d64:	f011 011f 	ands.w	r1, r1, #31
 8007d68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d70:	d10c      	bne.n	8007d8c <rshift+0x3c>
 8007d72:	f100 0710 	add.w	r7, r0, #16
 8007d76:	4629      	mov	r1, r5
 8007d78:	42b1      	cmp	r1, r6
 8007d7a:	d334      	bcc.n	8007de6 <rshift+0x96>
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	1eea      	subs	r2, r5, #3
 8007d82:	4296      	cmp	r6, r2
 8007d84:	bf38      	it	cc
 8007d86:	2300      	movcc	r3, #0
 8007d88:	4423      	add	r3, r4
 8007d8a:	e015      	b.n	8007db8 <rshift+0x68>
 8007d8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d90:	f1c1 0820 	rsb	r8, r1, #32
 8007d94:	40cf      	lsrs	r7, r1
 8007d96:	f105 0e04 	add.w	lr, r5, #4
 8007d9a:	46a1      	mov	r9, r4
 8007d9c:	4576      	cmp	r6, lr
 8007d9e:	46f4      	mov	ip, lr
 8007da0:	d815      	bhi.n	8007dce <rshift+0x7e>
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	009a      	lsls	r2, r3, #2
 8007da6:	3a04      	subs	r2, #4
 8007da8:	3501      	adds	r5, #1
 8007daa:	42ae      	cmp	r6, r5
 8007dac:	bf38      	it	cc
 8007dae:	2200      	movcc	r2, #0
 8007db0:	18a3      	adds	r3, r4, r2
 8007db2:	50a7      	str	r7, [r4, r2]
 8007db4:	b107      	cbz	r7, 8007db8 <rshift+0x68>
 8007db6:	3304      	adds	r3, #4
 8007db8:	1b1a      	subs	r2, r3, r4
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dc0:	bf08      	it	eq
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	6102      	str	r2, [r0, #16]
 8007dc6:	bf08      	it	eq
 8007dc8:	6143      	streq	r3, [r0, #20]
 8007dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dce:	f8dc c000 	ldr.w	ip, [ip]
 8007dd2:	fa0c fc08 	lsl.w	ip, ip, r8
 8007dd6:	ea4c 0707 	orr.w	r7, ip, r7
 8007dda:	f849 7b04 	str.w	r7, [r9], #4
 8007dde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007de2:	40cf      	lsrs	r7, r1
 8007de4:	e7da      	b.n	8007d9c <rshift+0x4c>
 8007de6:	f851 cb04 	ldr.w	ip, [r1], #4
 8007dea:	f847 cf04 	str.w	ip, [r7, #4]!
 8007dee:	e7c3      	b.n	8007d78 <rshift+0x28>
 8007df0:	4623      	mov	r3, r4
 8007df2:	e7e1      	b.n	8007db8 <rshift+0x68>

08007df4 <__hexdig_fun>:
 8007df4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007df8:	2b09      	cmp	r3, #9
 8007dfa:	d802      	bhi.n	8007e02 <__hexdig_fun+0xe>
 8007dfc:	3820      	subs	r0, #32
 8007dfe:	b2c0      	uxtb	r0, r0
 8007e00:	4770      	bx	lr
 8007e02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e06:	2b05      	cmp	r3, #5
 8007e08:	d801      	bhi.n	8007e0e <__hexdig_fun+0x1a>
 8007e0a:	3847      	subs	r0, #71	; 0x47
 8007e0c:	e7f7      	b.n	8007dfe <__hexdig_fun+0xa>
 8007e0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	d801      	bhi.n	8007e1a <__hexdig_fun+0x26>
 8007e16:	3827      	subs	r0, #39	; 0x27
 8007e18:	e7f1      	b.n	8007dfe <__hexdig_fun+0xa>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	4770      	bx	lr
	...

08007e20 <__gethex>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ed2d 8b02 	vpush	{d8}
 8007e28:	b089      	sub	sp, #36	; 0x24
 8007e2a:	ee08 0a10 	vmov	s16, r0
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	4bbc      	ldr	r3, [pc, #752]	; (8008124 <__gethex+0x304>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	468b      	mov	fp, r1
 8007e3a:	4690      	mov	r8, r2
 8007e3c:	f7f8 f9c8 	bl	80001d0 <strlen>
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	f8db 2000 	ldr.w	r2, [fp]
 8007e46:	4403      	add	r3, r0
 8007e48:	4682      	mov	sl, r0
 8007e4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	1c93      	adds	r3, r2, #2
 8007e52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e5a:	32fe      	adds	r2, #254	; 0xfe
 8007e5c:	18d1      	adds	r1, r2, r3
 8007e5e:	461f      	mov	r7, r3
 8007e60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e64:	9100      	str	r1, [sp, #0]
 8007e66:	2830      	cmp	r0, #48	; 0x30
 8007e68:	d0f8      	beq.n	8007e5c <__gethex+0x3c>
 8007e6a:	f7ff ffc3 	bl	8007df4 <__hexdig_fun>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d13a      	bne.n	8007eea <__gethex+0xca>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	4652      	mov	r2, sl
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f001 f9ed 	bl	8009258 <strncmp>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d168      	bne.n	8007f56 <__gethex+0x136>
 8007e84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e88:	eb07 060a 	add.w	r6, r7, sl
 8007e8c:	f7ff ffb2 	bl	8007df4 <__hexdig_fun>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d062      	beq.n	8007f5a <__gethex+0x13a>
 8007e94:	4633      	mov	r3, r6
 8007e96:	7818      	ldrb	r0, [r3, #0]
 8007e98:	2830      	cmp	r0, #48	; 0x30
 8007e9a:	461f      	mov	r7, r3
 8007e9c:	f103 0301 	add.w	r3, r3, #1
 8007ea0:	d0f9      	beq.n	8007e96 <__gethex+0x76>
 8007ea2:	f7ff ffa7 	bl	8007df4 <__hexdig_fun>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	fab0 f480 	clz	r4, r0
 8007eac:	0964      	lsrs	r4, r4, #5
 8007eae:	4635      	mov	r5, r6
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	7830      	ldrb	r0, [r6, #0]
 8007eba:	f7ff ff9b 	bl	8007df4 <__hexdig_fun>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1f8      	bne.n	8007eb4 <__gethex+0x94>
 8007ec2:	9901      	ldr	r1, [sp, #4]
 8007ec4:	4652      	mov	r2, sl
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f001 f9c6 	bl	8009258 <strncmp>
 8007ecc:	b980      	cbnz	r0, 8007ef0 <__gethex+0xd0>
 8007ece:	b94d      	cbnz	r5, 8007ee4 <__gethex+0xc4>
 8007ed0:	eb06 050a 	add.w	r5, r6, sl
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4616      	mov	r6, r2
 8007ed8:	3201      	adds	r2, #1
 8007eda:	7830      	ldrb	r0, [r6, #0]
 8007edc:	f7ff ff8a 	bl	8007df4 <__hexdig_fun>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d1f8      	bne.n	8007ed6 <__gethex+0xb6>
 8007ee4:	1bad      	subs	r5, r5, r6
 8007ee6:	00ad      	lsls	r5, r5, #2
 8007ee8:	e004      	b.n	8007ef4 <__gethex+0xd4>
 8007eea:	2400      	movs	r4, #0
 8007eec:	4625      	mov	r5, r4
 8007eee:	e7e0      	b.n	8007eb2 <__gethex+0x92>
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	d1f7      	bne.n	8007ee4 <__gethex+0xc4>
 8007ef4:	7833      	ldrb	r3, [r6, #0]
 8007ef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007efa:	2b50      	cmp	r3, #80	; 0x50
 8007efc:	d13b      	bne.n	8007f76 <__gethex+0x156>
 8007efe:	7873      	ldrb	r3, [r6, #1]
 8007f00:	2b2b      	cmp	r3, #43	; 0x2b
 8007f02:	d02c      	beq.n	8007f5e <__gethex+0x13e>
 8007f04:	2b2d      	cmp	r3, #45	; 0x2d
 8007f06:	d02e      	beq.n	8007f66 <__gethex+0x146>
 8007f08:	1c71      	adds	r1, r6, #1
 8007f0a:	f04f 0900 	mov.w	r9, #0
 8007f0e:	7808      	ldrb	r0, [r1, #0]
 8007f10:	f7ff ff70 	bl	8007df4 <__hexdig_fun>
 8007f14:	1e43      	subs	r3, r0, #1
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b18      	cmp	r3, #24
 8007f1a:	d82c      	bhi.n	8007f76 <__gethex+0x156>
 8007f1c:	f1a0 0210 	sub.w	r2, r0, #16
 8007f20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f24:	f7ff ff66 	bl	8007df4 <__hexdig_fun>
 8007f28:	1e43      	subs	r3, r0, #1
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b18      	cmp	r3, #24
 8007f2e:	d91d      	bls.n	8007f6c <__gethex+0x14c>
 8007f30:	f1b9 0f00 	cmp.w	r9, #0
 8007f34:	d000      	beq.n	8007f38 <__gethex+0x118>
 8007f36:	4252      	negs	r2, r2
 8007f38:	4415      	add	r5, r2
 8007f3a:	f8cb 1000 	str.w	r1, [fp]
 8007f3e:	b1e4      	cbz	r4, 8007f7a <__gethex+0x15a>
 8007f40:	9b00      	ldr	r3, [sp, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bf14      	ite	ne
 8007f46:	2700      	movne	r7, #0
 8007f48:	2706      	moveq	r7, #6
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	b009      	add	sp, #36	; 0x24
 8007f4e:	ecbd 8b02 	vpop	{d8}
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	463e      	mov	r6, r7
 8007f58:	4625      	mov	r5, r4
 8007f5a:	2401      	movs	r4, #1
 8007f5c:	e7ca      	b.n	8007ef4 <__gethex+0xd4>
 8007f5e:	f04f 0900 	mov.w	r9, #0
 8007f62:	1cb1      	adds	r1, r6, #2
 8007f64:	e7d3      	b.n	8007f0e <__gethex+0xee>
 8007f66:	f04f 0901 	mov.w	r9, #1
 8007f6a:	e7fa      	b.n	8007f62 <__gethex+0x142>
 8007f6c:	230a      	movs	r3, #10
 8007f6e:	fb03 0202 	mla	r2, r3, r2, r0
 8007f72:	3a10      	subs	r2, #16
 8007f74:	e7d4      	b.n	8007f20 <__gethex+0x100>
 8007f76:	4631      	mov	r1, r6
 8007f78:	e7df      	b.n	8007f3a <__gethex+0x11a>
 8007f7a:	1bf3      	subs	r3, r6, r7
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	4621      	mov	r1, r4
 8007f80:	2b07      	cmp	r3, #7
 8007f82:	dc0b      	bgt.n	8007f9c <__gethex+0x17c>
 8007f84:	ee18 0a10 	vmov	r0, s16
 8007f88:	f000 fa7e 	bl	8008488 <_Balloc>
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	b940      	cbnz	r0, 8007fa2 <__gethex+0x182>
 8007f90:	4b65      	ldr	r3, [pc, #404]	; (8008128 <__gethex+0x308>)
 8007f92:	4602      	mov	r2, r0
 8007f94:	21de      	movs	r1, #222	; 0xde
 8007f96:	4865      	ldr	r0, [pc, #404]	; (800812c <__gethex+0x30c>)
 8007f98:	f001 f97e 	bl	8009298 <__assert_func>
 8007f9c:	3101      	adds	r1, #1
 8007f9e:	105b      	asrs	r3, r3, #1
 8007fa0:	e7ee      	b.n	8007f80 <__gethex+0x160>
 8007fa2:	f100 0914 	add.w	r9, r0, #20
 8007fa6:	f04f 0b00 	mov.w	fp, #0
 8007faa:	f1ca 0301 	rsb	r3, sl, #1
 8007fae:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fb2:	f8cd b000 	str.w	fp, [sp]
 8007fb6:	9306      	str	r3, [sp, #24]
 8007fb8:	42b7      	cmp	r7, r6
 8007fba:	d340      	bcc.n	800803e <__gethex+0x21e>
 8007fbc:	9802      	ldr	r0, [sp, #8]
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	f840 3b04 	str.w	r3, [r0], #4
 8007fc4:	eba0 0009 	sub.w	r0, r0, r9
 8007fc8:	1080      	asrs	r0, r0, #2
 8007fca:	0146      	lsls	r6, r0, #5
 8007fcc:	6120      	str	r0, [r4, #16]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fb50 	bl	8008674 <__hi0bits>
 8007fd4:	1a30      	subs	r0, r6, r0
 8007fd6:	f8d8 6000 	ldr.w	r6, [r8]
 8007fda:	42b0      	cmp	r0, r6
 8007fdc:	dd63      	ble.n	80080a6 <__gethex+0x286>
 8007fde:	1b87      	subs	r7, r0, r6
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 feea 	bl	8008dbc <__any_on>
 8007fe8:	4682      	mov	sl, r0
 8007fea:	b1a8      	cbz	r0, 8008018 <__gethex+0x1f8>
 8007fec:	1e7b      	subs	r3, r7, #1
 8007fee:	1159      	asrs	r1, r3, #5
 8007ff0:	f003 021f 	and.w	r2, r3, #31
 8007ff4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007ff8:	f04f 0a01 	mov.w	sl, #1
 8007ffc:	fa0a f202 	lsl.w	r2, sl, r2
 8008000:	420a      	tst	r2, r1
 8008002:	d009      	beq.n	8008018 <__gethex+0x1f8>
 8008004:	4553      	cmp	r3, sl
 8008006:	dd05      	ble.n	8008014 <__gethex+0x1f4>
 8008008:	1eb9      	subs	r1, r7, #2
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fed6 	bl	8008dbc <__any_on>
 8008010:	2800      	cmp	r0, #0
 8008012:	d145      	bne.n	80080a0 <__gethex+0x280>
 8008014:	f04f 0a02 	mov.w	sl, #2
 8008018:	4639      	mov	r1, r7
 800801a:	4620      	mov	r0, r4
 800801c:	f7ff fe98 	bl	8007d50 <rshift>
 8008020:	443d      	add	r5, r7
 8008022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008026:	42ab      	cmp	r3, r5
 8008028:	da4c      	bge.n	80080c4 <__gethex+0x2a4>
 800802a:	ee18 0a10 	vmov	r0, s16
 800802e:	4621      	mov	r1, r4
 8008030:	f000 fa6a 	bl	8008508 <_Bfree>
 8008034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008036:	2300      	movs	r3, #0
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	27a3      	movs	r7, #163	; 0xa3
 800803c:	e785      	b.n	8007f4a <__gethex+0x12a>
 800803e:	1e73      	subs	r3, r6, #1
 8008040:	9a05      	ldr	r2, [sp, #20]
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008048:	4293      	cmp	r3, r2
 800804a:	d019      	beq.n	8008080 <__gethex+0x260>
 800804c:	f1bb 0f20 	cmp.w	fp, #32
 8008050:	d107      	bne.n	8008062 <__gethex+0x242>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	9a00      	ldr	r2, [sp, #0]
 8008056:	f843 2b04 	str.w	r2, [r3], #4
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	2300      	movs	r3, #0
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	469b      	mov	fp, r3
 8008062:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008066:	f7ff fec5 	bl	8007df4 <__hexdig_fun>
 800806a:	9b00      	ldr	r3, [sp, #0]
 800806c:	f000 000f 	and.w	r0, r0, #15
 8008070:	fa00 f00b 	lsl.w	r0, r0, fp
 8008074:	4303      	orrs	r3, r0
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	f10b 0b04 	add.w	fp, fp, #4
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	e00d      	b.n	800809c <__gethex+0x27c>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	9a06      	ldr	r2, [sp, #24]
 8008084:	4413      	add	r3, r2
 8008086:	42bb      	cmp	r3, r7
 8008088:	d3e0      	bcc.n	800804c <__gethex+0x22c>
 800808a:	4618      	mov	r0, r3
 800808c:	9901      	ldr	r1, [sp, #4]
 800808e:	9307      	str	r3, [sp, #28]
 8008090:	4652      	mov	r2, sl
 8008092:	f001 f8e1 	bl	8009258 <strncmp>
 8008096:	9b07      	ldr	r3, [sp, #28]
 8008098:	2800      	cmp	r0, #0
 800809a:	d1d7      	bne.n	800804c <__gethex+0x22c>
 800809c:	461e      	mov	r6, r3
 800809e:	e78b      	b.n	8007fb8 <__gethex+0x198>
 80080a0:	f04f 0a03 	mov.w	sl, #3
 80080a4:	e7b8      	b.n	8008018 <__gethex+0x1f8>
 80080a6:	da0a      	bge.n	80080be <__gethex+0x29e>
 80080a8:	1a37      	subs	r7, r6, r0
 80080aa:	4621      	mov	r1, r4
 80080ac:	ee18 0a10 	vmov	r0, s16
 80080b0:	463a      	mov	r2, r7
 80080b2:	f000 fc45 	bl	8008940 <__lshift>
 80080b6:	1bed      	subs	r5, r5, r7
 80080b8:	4604      	mov	r4, r0
 80080ba:	f100 0914 	add.w	r9, r0, #20
 80080be:	f04f 0a00 	mov.w	sl, #0
 80080c2:	e7ae      	b.n	8008022 <__gethex+0x202>
 80080c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80080c8:	42a8      	cmp	r0, r5
 80080ca:	dd72      	ble.n	80081b2 <__gethex+0x392>
 80080cc:	1b45      	subs	r5, r0, r5
 80080ce:	42ae      	cmp	r6, r5
 80080d0:	dc36      	bgt.n	8008140 <__gethex+0x320>
 80080d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d02a      	beq.n	8008130 <__gethex+0x310>
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d02c      	beq.n	8008138 <__gethex+0x318>
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d115      	bne.n	800810e <__gethex+0x2ee>
 80080e2:	42ae      	cmp	r6, r5
 80080e4:	d113      	bne.n	800810e <__gethex+0x2ee>
 80080e6:	2e01      	cmp	r6, #1
 80080e8:	d10b      	bne.n	8008102 <__gethex+0x2e2>
 80080ea:	9a04      	ldr	r2, [sp, #16]
 80080ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	2301      	movs	r3, #1
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	f8c9 3000 	str.w	r3, [r9]
 80080fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080fc:	2762      	movs	r7, #98	; 0x62
 80080fe:	601c      	str	r4, [r3, #0]
 8008100:	e723      	b.n	8007f4a <__gethex+0x12a>
 8008102:	1e71      	subs	r1, r6, #1
 8008104:	4620      	mov	r0, r4
 8008106:	f000 fe59 	bl	8008dbc <__any_on>
 800810a:	2800      	cmp	r0, #0
 800810c:	d1ed      	bne.n	80080ea <__gethex+0x2ca>
 800810e:	ee18 0a10 	vmov	r0, s16
 8008112:	4621      	mov	r1, r4
 8008114:	f000 f9f8 	bl	8008508 <_Bfree>
 8008118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800811a:	2300      	movs	r3, #0
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	2750      	movs	r7, #80	; 0x50
 8008120:	e713      	b.n	8007f4a <__gethex+0x12a>
 8008122:	bf00      	nop
 8008124:	0800a0c0 	.word	0x0800a0c0
 8008128:	0800a044 	.word	0x0800a044
 800812c:	0800a055 	.word	0x0800a055
 8008130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1eb      	bne.n	800810e <__gethex+0x2ee>
 8008136:	e7d8      	b.n	80080ea <__gethex+0x2ca>
 8008138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1d5      	bne.n	80080ea <__gethex+0x2ca>
 800813e:	e7e6      	b.n	800810e <__gethex+0x2ee>
 8008140:	1e6f      	subs	r7, r5, #1
 8008142:	f1ba 0f00 	cmp.w	sl, #0
 8008146:	d131      	bne.n	80081ac <__gethex+0x38c>
 8008148:	b127      	cbz	r7, 8008154 <__gethex+0x334>
 800814a:	4639      	mov	r1, r7
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fe35 	bl	8008dbc <__any_on>
 8008152:	4682      	mov	sl, r0
 8008154:	117b      	asrs	r3, r7, #5
 8008156:	2101      	movs	r1, #1
 8008158:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800815c:	f007 071f 	and.w	r7, r7, #31
 8008160:	fa01 f707 	lsl.w	r7, r1, r7
 8008164:	421f      	tst	r7, r3
 8008166:	4629      	mov	r1, r5
 8008168:	4620      	mov	r0, r4
 800816a:	bf18      	it	ne
 800816c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008170:	1b76      	subs	r6, r6, r5
 8008172:	f7ff fded 	bl	8007d50 <rshift>
 8008176:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800817a:	2702      	movs	r7, #2
 800817c:	f1ba 0f00 	cmp.w	sl, #0
 8008180:	d048      	beq.n	8008214 <__gethex+0x3f4>
 8008182:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d015      	beq.n	80081b6 <__gethex+0x396>
 800818a:	2b03      	cmp	r3, #3
 800818c:	d017      	beq.n	80081be <__gethex+0x39e>
 800818e:	2b01      	cmp	r3, #1
 8008190:	d109      	bne.n	80081a6 <__gethex+0x386>
 8008192:	f01a 0f02 	tst.w	sl, #2
 8008196:	d006      	beq.n	80081a6 <__gethex+0x386>
 8008198:	f8d9 0000 	ldr.w	r0, [r9]
 800819c:	ea4a 0a00 	orr.w	sl, sl, r0
 80081a0:	f01a 0f01 	tst.w	sl, #1
 80081a4:	d10e      	bne.n	80081c4 <__gethex+0x3a4>
 80081a6:	f047 0710 	orr.w	r7, r7, #16
 80081aa:	e033      	b.n	8008214 <__gethex+0x3f4>
 80081ac:	f04f 0a01 	mov.w	sl, #1
 80081b0:	e7d0      	b.n	8008154 <__gethex+0x334>
 80081b2:	2701      	movs	r7, #1
 80081b4:	e7e2      	b.n	800817c <__gethex+0x35c>
 80081b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b8:	f1c3 0301 	rsb	r3, r3, #1
 80081bc:	9315      	str	r3, [sp, #84]	; 0x54
 80081be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f0      	beq.n	80081a6 <__gethex+0x386>
 80081c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081c8:	f104 0314 	add.w	r3, r4, #20
 80081cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081d4:	f04f 0c00 	mov.w	ip, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f853 2b04 	ldr.w	r2, [r3], #4
 80081de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80081e2:	d01c      	beq.n	800821e <__gethex+0x3fe>
 80081e4:	3201      	adds	r2, #1
 80081e6:	6002      	str	r2, [r0, #0]
 80081e8:	2f02      	cmp	r7, #2
 80081ea:	f104 0314 	add.w	r3, r4, #20
 80081ee:	d13f      	bne.n	8008270 <__gethex+0x450>
 80081f0:	f8d8 2000 	ldr.w	r2, [r8]
 80081f4:	3a01      	subs	r2, #1
 80081f6:	42b2      	cmp	r2, r6
 80081f8:	d10a      	bne.n	8008210 <__gethex+0x3f0>
 80081fa:	1171      	asrs	r1, r6, #5
 80081fc:	2201      	movs	r2, #1
 80081fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008202:	f006 061f 	and.w	r6, r6, #31
 8008206:	fa02 f606 	lsl.w	r6, r2, r6
 800820a:	421e      	tst	r6, r3
 800820c:	bf18      	it	ne
 800820e:	4617      	movne	r7, r2
 8008210:	f047 0720 	orr.w	r7, r7, #32
 8008214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008216:	601c      	str	r4, [r3, #0]
 8008218:	9b04      	ldr	r3, [sp, #16]
 800821a:	601d      	str	r5, [r3, #0]
 800821c:	e695      	b.n	8007f4a <__gethex+0x12a>
 800821e:	4299      	cmp	r1, r3
 8008220:	f843 cc04 	str.w	ip, [r3, #-4]
 8008224:	d8d8      	bhi.n	80081d8 <__gethex+0x3b8>
 8008226:	68a3      	ldr	r3, [r4, #8]
 8008228:	459b      	cmp	fp, r3
 800822a:	db19      	blt.n	8008260 <__gethex+0x440>
 800822c:	6861      	ldr	r1, [r4, #4]
 800822e:	ee18 0a10 	vmov	r0, s16
 8008232:	3101      	adds	r1, #1
 8008234:	f000 f928 	bl	8008488 <_Balloc>
 8008238:	4681      	mov	r9, r0
 800823a:	b918      	cbnz	r0, 8008244 <__gethex+0x424>
 800823c:	4b1a      	ldr	r3, [pc, #104]	; (80082a8 <__gethex+0x488>)
 800823e:	4602      	mov	r2, r0
 8008240:	2184      	movs	r1, #132	; 0x84
 8008242:	e6a8      	b.n	8007f96 <__gethex+0x176>
 8008244:	6922      	ldr	r2, [r4, #16]
 8008246:	3202      	adds	r2, #2
 8008248:	f104 010c 	add.w	r1, r4, #12
 800824c:	0092      	lsls	r2, r2, #2
 800824e:	300c      	adds	r0, #12
 8008250:	f000 f90c 	bl	800846c <memcpy>
 8008254:	4621      	mov	r1, r4
 8008256:	ee18 0a10 	vmov	r0, s16
 800825a:	f000 f955 	bl	8008508 <_Bfree>
 800825e:	464c      	mov	r4, r9
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008268:	6122      	str	r2, [r4, #16]
 800826a:	2201      	movs	r2, #1
 800826c:	615a      	str	r2, [r3, #20]
 800826e:	e7bb      	b.n	80081e8 <__gethex+0x3c8>
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	455a      	cmp	r2, fp
 8008274:	dd0b      	ble.n	800828e <__gethex+0x46e>
 8008276:	2101      	movs	r1, #1
 8008278:	4620      	mov	r0, r4
 800827a:	f7ff fd69 	bl	8007d50 <rshift>
 800827e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008282:	3501      	adds	r5, #1
 8008284:	42ab      	cmp	r3, r5
 8008286:	f6ff aed0 	blt.w	800802a <__gethex+0x20a>
 800828a:	2701      	movs	r7, #1
 800828c:	e7c0      	b.n	8008210 <__gethex+0x3f0>
 800828e:	f016 061f 	ands.w	r6, r6, #31
 8008292:	d0fa      	beq.n	800828a <__gethex+0x46a>
 8008294:	449a      	add	sl, r3
 8008296:	f1c6 0620 	rsb	r6, r6, #32
 800829a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800829e:	f000 f9e9 	bl	8008674 <__hi0bits>
 80082a2:	42b0      	cmp	r0, r6
 80082a4:	dbe7      	blt.n	8008276 <__gethex+0x456>
 80082a6:	e7f0      	b.n	800828a <__gethex+0x46a>
 80082a8:	0800a044 	.word	0x0800a044

080082ac <L_shift>:
 80082ac:	f1c2 0208 	rsb	r2, r2, #8
 80082b0:	0092      	lsls	r2, r2, #2
 80082b2:	b570      	push	{r4, r5, r6, lr}
 80082b4:	f1c2 0620 	rsb	r6, r2, #32
 80082b8:	6843      	ldr	r3, [r0, #4]
 80082ba:	6804      	ldr	r4, [r0, #0]
 80082bc:	fa03 f506 	lsl.w	r5, r3, r6
 80082c0:	432c      	orrs	r4, r5
 80082c2:	40d3      	lsrs	r3, r2
 80082c4:	6004      	str	r4, [r0, #0]
 80082c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80082ca:	4288      	cmp	r0, r1
 80082cc:	d3f4      	bcc.n	80082b8 <L_shift+0xc>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}

080082d0 <__match>:
 80082d0:	b530      	push	{r4, r5, lr}
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	3301      	adds	r3, #1
 80082d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082da:	b914      	cbnz	r4, 80082e2 <__match+0x12>
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	2001      	movs	r0, #1
 80082e0:	bd30      	pop	{r4, r5, pc}
 80082e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80082ea:	2d19      	cmp	r5, #25
 80082ec:	bf98      	it	ls
 80082ee:	3220      	addls	r2, #32
 80082f0:	42a2      	cmp	r2, r4
 80082f2:	d0f0      	beq.n	80082d6 <__match+0x6>
 80082f4:	2000      	movs	r0, #0
 80082f6:	e7f3      	b.n	80082e0 <__match+0x10>

080082f8 <__hexnan>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	680b      	ldr	r3, [r1, #0]
 80082fe:	6801      	ldr	r1, [r0, #0]
 8008300:	115e      	asrs	r6, r3, #5
 8008302:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008306:	f013 031f 	ands.w	r3, r3, #31
 800830a:	b087      	sub	sp, #28
 800830c:	bf18      	it	ne
 800830e:	3604      	addne	r6, #4
 8008310:	2500      	movs	r5, #0
 8008312:	1f37      	subs	r7, r6, #4
 8008314:	4682      	mov	sl, r0
 8008316:	4690      	mov	r8, r2
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f846 5c04 	str.w	r5, [r6, #-4]
 800831e:	46b9      	mov	r9, r7
 8008320:	463c      	mov	r4, r7
 8008322:	9502      	str	r5, [sp, #8]
 8008324:	46ab      	mov	fp, r5
 8008326:	784a      	ldrb	r2, [r1, #1]
 8008328:	1c4b      	adds	r3, r1, #1
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	b342      	cbz	r2, 8008380 <__hexnan+0x88>
 800832e:	4610      	mov	r0, r2
 8008330:	9105      	str	r1, [sp, #20]
 8008332:	9204      	str	r2, [sp, #16]
 8008334:	f7ff fd5e 	bl	8007df4 <__hexdig_fun>
 8008338:	2800      	cmp	r0, #0
 800833a:	d14f      	bne.n	80083dc <__hexnan+0xe4>
 800833c:	9a04      	ldr	r2, [sp, #16]
 800833e:	9905      	ldr	r1, [sp, #20]
 8008340:	2a20      	cmp	r2, #32
 8008342:	d818      	bhi.n	8008376 <__hexnan+0x7e>
 8008344:	9b02      	ldr	r3, [sp, #8]
 8008346:	459b      	cmp	fp, r3
 8008348:	dd13      	ble.n	8008372 <__hexnan+0x7a>
 800834a:	454c      	cmp	r4, r9
 800834c:	d206      	bcs.n	800835c <__hexnan+0x64>
 800834e:	2d07      	cmp	r5, #7
 8008350:	dc04      	bgt.n	800835c <__hexnan+0x64>
 8008352:	462a      	mov	r2, r5
 8008354:	4649      	mov	r1, r9
 8008356:	4620      	mov	r0, r4
 8008358:	f7ff ffa8 	bl	80082ac <L_shift>
 800835c:	4544      	cmp	r4, r8
 800835e:	d950      	bls.n	8008402 <__hexnan+0x10a>
 8008360:	2300      	movs	r3, #0
 8008362:	f1a4 0904 	sub.w	r9, r4, #4
 8008366:	f844 3c04 	str.w	r3, [r4, #-4]
 800836a:	f8cd b008 	str.w	fp, [sp, #8]
 800836e:	464c      	mov	r4, r9
 8008370:	461d      	mov	r5, r3
 8008372:	9903      	ldr	r1, [sp, #12]
 8008374:	e7d7      	b.n	8008326 <__hexnan+0x2e>
 8008376:	2a29      	cmp	r2, #41	; 0x29
 8008378:	d156      	bne.n	8008428 <__hexnan+0x130>
 800837a:	3102      	adds	r1, #2
 800837c:	f8ca 1000 	str.w	r1, [sl]
 8008380:	f1bb 0f00 	cmp.w	fp, #0
 8008384:	d050      	beq.n	8008428 <__hexnan+0x130>
 8008386:	454c      	cmp	r4, r9
 8008388:	d206      	bcs.n	8008398 <__hexnan+0xa0>
 800838a:	2d07      	cmp	r5, #7
 800838c:	dc04      	bgt.n	8008398 <__hexnan+0xa0>
 800838e:	462a      	mov	r2, r5
 8008390:	4649      	mov	r1, r9
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff ff8a 	bl	80082ac <L_shift>
 8008398:	4544      	cmp	r4, r8
 800839a:	d934      	bls.n	8008406 <__hexnan+0x10e>
 800839c:	f1a8 0204 	sub.w	r2, r8, #4
 80083a0:	4623      	mov	r3, r4
 80083a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80083a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80083aa:	429f      	cmp	r7, r3
 80083ac:	d2f9      	bcs.n	80083a2 <__hexnan+0xaa>
 80083ae:	1b3b      	subs	r3, r7, r4
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	3304      	adds	r3, #4
 80083b6:	3401      	adds	r4, #1
 80083b8:	3e03      	subs	r6, #3
 80083ba:	42b4      	cmp	r4, r6
 80083bc:	bf88      	it	hi
 80083be:	2304      	movhi	r3, #4
 80083c0:	4443      	add	r3, r8
 80083c2:	2200      	movs	r2, #0
 80083c4:	f843 2b04 	str.w	r2, [r3], #4
 80083c8:	429f      	cmp	r7, r3
 80083ca:	d2fb      	bcs.n	80083c4 <__hexnan+0xcc>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	b91b      	cbnz	r3, 80083d8 <__hexnan+0xe0>
 80083d0:	4547      	cmp	r7, r8
 80083d2:	d127      	bne.n	8008424 <__hexnan+0x12c>
 80083d4:	2301      	movs	r3, #1
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	2005      	movs	r0, #5
 80083da:	e026      	b.n	800842a <__hexnan+0x132>
 80083dc:	3501      	adds	r5, #1
 80083de:	2d08      	cmp	r5, #8
 80083e0:	f10b 0b01 	add.w	fp, fp, #1
 80083e4:	dd06      	ble.n	80083f4 <__hexnan+0xfc>
 80083e6:	4544      	cmp	r4, r8
 80083e8:	d9c3      	bls.n	8008372 <__hexnan+0x7a>
 80083ea:	2300      	movs	r3, #0
 80083ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80083f0:	2501      	movs	r5, #1
 80083f2:	3c04      	subs	r4, #4
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	f000 000f 	and.w	r0, r0, #15
 80083fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	e7b7      	b.n	8008372 <__hexnan+0x7a>
 8008402:	2508      	movs	r5, #8
 8008404:	e7b5      	b.n	8008372 <__hexnan+0x7a>
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0df      	beq.n	80083cc <__hexnan+0xd4>
 800840c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008410:	f1c3 0320 	rsb	r3, r3, #32
 8008414:	fa22 f303 	lsr.w	r3, r2, r3
 8008418:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800841c:	401a      	ands	r2, r3
 800841e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008422:	e7d3      	b.n	80083cc <__hexnan+0xd4>
 8008424:	3f04      	subs	r7, #4
 8008426:	e7d1      	b.n	80083cc <__hexnan+0xd4>
 8008428:	2004      	movs	r0, #4
 800842a:	b007      	add	sp, #28
 800842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008430 <_localeconv_r>:
 8008430:	4800      	ldr	r0, [pc, #0]	; (8008434 <_localeconv_r+0x4>)
 8008432:	4770      	bx	lr
 8008434:	20000168 	.word	0x20000168

08008438 <malloc>:
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <malloc+0xc>)
 800843a:	4601      	mov	r1, r0
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	f000 bd3d 	b.w	8008ebc <_malloc_r>
 8008442:	bf00      	nop
 8008444:	20000010 	.word	0x20000010

08008448 <__ascii_mbtowc>:
 8008448:	b082      	sub	sp, #8
 800844a:	b901      	cbnz	r1, 800844e <__ascii_mbtowc+0x6>
 800844c:	a901      	add	r1, sp, #4
 800844e:	b142      	cbz	r2, 8008462 <__ascii_mbtowc+0x1a>
 8008450:	b14b      	cbz	r3, 8008466 <__ascii_mbtowc+0x1e>
 8008452:	7813      	ldrb	r3, [r2, #0]
 8008454:	600b      	str	r3, [r1, #0]
 8008456:	7812      	ldrb	r2, [r2, #0]
 8008458:	1e10      	subs	r0, r2, #0
 800845a:	bf18      	it	ne
 800845c:	2001      	movne	r0, #1
 800845e:	b002      	add	sp, #8
 8008460:	4770      	bx	lr
 8008462:	4610      	mov	r0, r2
 8008464:	e7fb      	b.n	800845e <__ascii_mbtowc+0x16>
 8008466:	f06f 0001 	mvn.w	r0, #1
 800846a:	e7f8      	b.n	800845e <__ascii_mbtowc+0x16>

0800846c <memcpy>:
 800846c:	440a      	add	r2, r1
 800846e:	4291      	cmp	r1, r2
 8008470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008474:	d100      	bne.n	8008478 <memcpy+0xc>
 8008476:	4770      	bx	lr
 8008478:	b510      	push	{r4, lr}
 800847a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800847e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008482:	4291      	cmp	r1, r2
 8008484:	d1f9      	bne.n	800847a <memcpy+0xe>
 8008486:	bd10      	pop	{r4, pc}

08008488 <_Balloc>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800848c:	4604      	mov	r4, r0
 800848e:	460d      	mov	r5, r1
 8008490:	b976      	cbnz	r6, 80084b0 <_Balloc+0x28>
 8008492:	2010      	movs	r0, #16
 8008494:	f7ff ffd0 	bl	8008438 <malloc>
 8008498:	4602      	mov	r2, r0
 800849a:	6260      	str	r0, [r4, #36]	; 0x24
 800849c:	b920      	cbnz	r0, 80084a8 <_Balloc+0x20>
 800849e:	4b18      	ldr	r3, [pc, #96]	; (8008500 <_Balloc+0x78>)
 80084a0:	4818      	ldr	r0, [pc, #96]	; (8008504 <_Balloc+0x7c>)
 80084a2:	2166      	movs	r1, #102	; 0x66
 80084a4:	f000 fef8 	bl	8009298 <__assert_func>
 80084a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084ac:	6006      	str	r6, [r0, #0]
 80084ae:	60c6      	str	r6, [r0, #12]
 80084b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084b2:	68f3      	ldr	r3, [r6, #12]
 80084b4:	b183      	cbz	r3, 80084d8 <_Balloc+0x50>
 80084b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084be:	b9b8      	cbnz	r0, 80084f0 <_Balloc+0x68>
 80084c0:	2101      	movs	r1, #1
 80084c2:	fa01 f605 	lsl.w	r6, r1, r5
 80084c6:	1d72      	adds	r2, r6, #5
 80084c8:	0092      	lsls	r2, r2, #2
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fc97 	bl	8008dfe <_calloc_r>
 80084d0:	b160      	cbz	r0, 80084ec <_Balloc+0x64>
 80084d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084d6:	e00e      	b.n	80084f6 <_Balloc+0x6e>
 80084d8:	2221      	movs	r2, #33	; 0x21
 80084da:	2104      	movs	r1, #4
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fc8e 	bl	8008dfe <_calloc_r>
 80084e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e4:	60f0      	str	r0, [r6, #12]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e4      	bne.n	80084b6 <_Balloc+0x2e>
 80084ec:	2000      	movs	r0, #0
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	6802      	ldr	r2, [r0, #0]
 80084f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084f6:	2300      	movs	r3, #0
 80084f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084fc:	e7f7      	b.n	80084ee <_Balloc+0x66>
 80084fe:	bf00      	nop
 8008500:	08009fce 	.word	0x08009fce
 8008504:	0800a0d4 	.word	0x0800a0d4

08008508 <_Bfree>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800850c:	4605      	mov	r5, r0
 800850e:	460c      	mov	r4, r1
 8008510:	b976      	cbnz	r6, 8008530 <_Bfree+0x28>
 8008512:	2010      	movs	r0, #16
 8008514:	f7ff ff90 	bl	8008438 <malloc>
 8008518:	4602      	mov	r2, r0
 800851a:	6268      	str	r0, [r5, #36]	; 0x24
 800851c:	b920      	cbnz	r0, 8008528 <_Bfree+0x20>
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <_Bfree+0x3c>)
 8008520:	4809      	ldr	r0, [pc, #36]	; (8008548 <_Bfree+0x40>)
 8008522:	218a      	movs	r1, #138	; 0x8a
 8008524:	f000 feb8 	bl	8009298 <__assert_func>
 8008528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800852c:	6006      	str	r6, [r0, #0]
 800852e:	60c6      	str	r6, [r0, #12]
 8008530:	b13c      	cbz	r4, 8008542 <_Bfree+0x3a>
 8008532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008534:	6862      	ldr	r2, [r4, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800853c:	6021      	str	r1, [r4, #0]
 800853e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	08009fce 	.word	0x08009fce
 8008548:	0800a0d4 	.word	0x0800a0d4

0800854c <__multadd>:
 800854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	690e      	ldr	r6, [r1, #16]
 8008552:	4607      	mov	r7, r0
 8008554:	4698      	mov	r8, r3
 8008556:	460c      	mov	r4, r1
 8008558:	f101 0014 	add.w	r0, r1, #20
 800855c:	2300      	movs	r3, #0
 800855e:	6805      	ldr	r5, [r0, #0]
 8008560:	b2a9      	uxth	r1, r5
 8008562:	fb02 8101 	mla	r1, r2, r1, r8
 8008566:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800856a:	0c2d      	lsrs	r5, r5, #16
 800856c:	fb02 c505 	mla	r5, r2, r5, ip
 8008570:	b289      	uxth	r1, r1
 8008572:	3301      	adds	r3, #1
 8008574:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008578:	429e      	cmp	r6, r3
 800857a:	f840 1b04 	str.w	r1, [r0], #4
 800857e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008582:	dcec      	bgt.n	800855e <__multadd+0x12>
 8008584:	f1b8 0f00 	cmp.w	r8, #0
 8008588:	d022      	beq.n	80085d0 <__multadd+0x84>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	42b3      	cmp	r3, r6
 800858e:	dc19      	bgt.n	80085c4 <__multadd+0x78>
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	4638      	mov	r0, r7
 8008594:	3101      	adds	r1, #1
 8008596:	f7ff ff77 	bl	8008488 <_Balloc>
 800859a:	4605      	mov	r5, r0
 800859c:	b928      	cbnz	r0, 80085aa <__multadd+0x5e>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <__multadd+0x8c>)
 80085a2:	480e      	ldr	r0, [pc, #56]	; (80085dc <__multadd+0x90>)
 80085a4:	21b5      	movs	r1, #181	; 0xb5
 80085a6:	f000 fe77 	bl	8009298 <__assert_func>
 80085aa:	6922      	ldr	r2, [r4, #16]
 80085ac:	3202      	adds	r2, #2
 80085ae:	f104 010c 	add.w	r1, r4, #12
 80085b2:	0092      	lsls	r2, r2, #2
 80085b4:	300c      	adds	r0, #12
 80085b6:	f7ff ff59 	bl	800846c <memcpy>
 80085ba:	4621      	mov	r1, r4
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ffa3 	bl	8008508 <_Bfree>
 80085c2:	462c      	mov	r4, r5
 80085c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80085c8:	3601      	adds	r6, #1
 80085ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80085ce:	6126      	str	r6, [r4, #16]
 80085d0:	4620      	mov	r0, r4
 80085d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d6:	bf00      	nop
 80085d8:	0800a044 	.word	0x0800a044
 80085dc:	0800a0d4 	.word	0x0800a0d4

080085e0 <__s2b>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	4615      	mov	r5, r2
 80085e8:	461f      	mov	r7, r3
 80085ea:	2209      	movs	r2, #9
 80085ec:	3308      	adds	r3, #8
 80085ee:	4606      	mov	r6, r0
 80085f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085f4:	2100      	movs	r1, #0
 80085f6:	2201      	movs	r2, #1
 80085f8:	429a      	cmp	r2, r3
 80085fa:	db09      	blt.n	8008610 <__s2b+0x30>
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ff43 	bl	8008488 <_Balloc>
 8008602:	b940      	cbnz	r0, 8008616 <__s2b+0x36>
 8008604:	4602      	mov	r2, r0
 8008606:	4b19      	ldr	r3, [pc, #100]	; (800866c <__s2b+0x8c>)
 8008608:	4819      	ldr	r0, [pc, #100]	; (8008670 <__s2b+0x90>)
 800860a:	21ce      	movs	r1, #206	; 0xce
 800860c:	f000 fe44 	bl	8009298 <__assert_func>
 8008610:	0052      	lsls	r2, r2, #1
 8008612:	3101      	adds	r1, #1
 8008614:	e7f0      	b.n	80085f8 <__s2b+0x18>
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	6143      	str	r3, [r0, #20]
 800861a:	2d09      	cmp	r5, #9
 800861c:	f04f 0301 	mov.w	r3, #1
 8008620:	6103      	str	r3, [r0, #16]
 8008622:	dd16      	ble.n	8008652 <__s2b+0x72>
 8008624:	f104 0909 	add.w	r9, r4, #9
 8008628:	46c8      	mov	r8, r9
 800862a:	442c      	add	r4, r5
 800862c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008630:	4601      	mov	r1, r0
 8008632:	3b30      	subs	r3, #48	; 0x30
 8008634:	220a      	movs	r2, #10
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff ff88 	bl	800854c <__multadd>
 800863c:	45a0      	cmp	r8, r4
 800863e:	d1f5      	bne.n	800862c <__s2b+0x4c>
 8008640:	f1a5 0408 	sub.w	r4, r5, #8
 8008644:	444c      	add	r4, r9
 8008646:	1b2d      	subs	r5, r5, r4
 8008648:	1963      	adds	r3, r4, r5
 800864a:	42bb      	cmp	r3, r7
 800864c:	db04      	blt.n	8008658 <__s2b+0x78>
 800864e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008652:	340a      	adds	r4, #10
 8008654:	2509      	movs	r5, #9
 8008656:	e7f6      	b.n	8008646 <__s2b+0x66>
 8008658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800865c:	4601      	mov	r1, r0
 800865e:	3b30      	subs	r3, #48	; 0x30
 8008660:	220a      	movs	r2, #10
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff ff72 	bl	800854c <__multadd>
 8008668:	e7ee      	b.n	8008648 <__s2b+0x68>
 800866a:	bf00      	nop
 800866c:	0800a044 	.word	0x0800a044
 8008670:	0800a0d4 	.word	0x0800a0d4

08008674 <__hi0bits>:
 8008674:	0c03      	lsrs	r3, r0, #16
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	b9d3      	cbnz	r3, 80086b0 <__hi0bits+0x3c>
 800867a:	0400      	lsls	r0, r0, #16
 800867c:	2310      	movs	r3, #16
 800867e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008682:	bf04      	itt	eq
 8008684:	0200      	lsleq	r0, r0, #8
 8008686:	3308      	addeq	r3, #8
 8008688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800868c:	bf04      	itt	eq
 800868e:	0100      	lsleq	r0, r0, #4
 8008690:	3304      	addeq	r3, #4
 8008692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008696:	bf04      	itt	eq
 8008698:	0080      	lsleq	r0, r0, #2
 800869a:	3302      	addeq	r3, #2
 800869c:	2800      	cmp	r0, #0
 800869e:	db05      	blt.n	80086ac <__hi0bits+0x38>
 80086a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086a4:	f103 0301 	add.w	r3, r3, #1
 80086a8:	bf08      	it	eq
 80086aa:	2320      	moveq	r3, #32
 80086ac:	4618      	mov	r0, r3
 80086ae:	4770      	bx	lr
 80086b0:	2300      	movs	r3, #0
 80086b2:	e7e4      	b.n	800867e <__hi0bits+0xa>

080086b4 <__lo0bits>:
 80086b4:	6803      	ldr	r3, [r0, #0]
 80086b6:	f013 0207 	ands.w	r2, r3, #7
 80086ba:	4601      	mov	r1, r0
 80086bc:	d00b      	beq.n	80086d6 <__lo0bits+0x22>
 80086be:	07da      	lsls	r2, r3, #31
 80086c0:	d424      	bmi.n	800870c <__lo0bits+0x58>
 80086c2:	0798      	lsls	r0, r3, #30
 80086c4:	bf49      	itett	mi
 80086c6:	085b      	lsrmi	r3, r3, #1
 80086c8:	089b      	lsrpl	r3, r3, #2
 80086ca:	2001      	movmi	r0, #1
 80086cc:	600b      	strmi	r3, [r1, #0]
 80086ce:	bf5c      	itt	pl
 80086d0:	600b      	strpl	r3, [r1, #0]
 80086d2:	2002      	movpl	r0, #2
 80086d4:	4770      	bx	lr
 80086d6:	b298      	uxth	r0, r3
 80086d8:	b9b0      	cbnz	r0, 8008708 <__lo0bits+0x54>
 80086da:	0c1b      	lsrs	r3, r3, #16
 80086dc:	2010      	movs	r0, #16
 80086de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086e2:	bf04      	itt	eq
 80086e4:	0a1b      	lsreq	r3, r3, #8
 80086e6:	3008      	addeq	r0, #8
 80086e8:	071a      	lsls	r2, r3, #28
 80086ea:	bf04      	itt	eq
 80086ec:	091b      	lsreq	r3, r3, #4
 80086ee:	3004      	addeq	r0, #4
 80086f0:	079a      	lsls	r2, r3, #30
 80086f2:	bf04      	itt	eq
 80086f4:	089b      	lsreq	r3, r3, #2
 80086f6:	3002      	addeq	r0, #2
 80086f8:	07da      	lsls	r2, r3, #31
 80086fa:	d403      	bmi.n	8008704 <__lo0bits+0x50>
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	f100 0001 	add.w	r0, r0, #1
 8008702:	d005      	beq.n	8008710 <__lo0bits+0x5c>
 8008704:	600b      	str	r3, [r1, #0]
 8008706:	4770      	bx	lr
 8008708:	4610      	mov	r0, r2
 800870a:	e7e8      	b.n	80086de <__lo0bits+0x2a>
 800870c:	2000      	movs	r0, #0
 800870e:	4770      	bx	lr
 8008710:	2020      	movs	r0, #32
 8008712:	4770      	bx	lr

08008714 <__i2b>:
 8008714:	b510      	push	{r4, lr}
 8008716:	460c      	mov	r4, r1
 8008718:	2101      	movs	r1, #1
 800871a:	f7ff feb5 	bl	8008488 <_Balloc>
 800871e:	4602      	mov	r2, r0
 8008720:	b928      	cbnz	r0, 800872e <__i2b+0x1a>
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <__i2b+0x24>)
 8008724:	4805      	ldr	r0, [pc, #20]	; (800873c <__i2b+0x28>)
 8008726:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800872a:	f000 fdb5 	bl	8009298 <__assert_func>
 800872e:	2301      	movs	r3, #1
 8008730:	6144      	str	r4, [r0, #20]
 8008732:	6103      	str	r3, [r0, #16]
 8008734:	bd10      	pop	{r4, pc}
 8008736:	bf00      	nop
 8008738:	0800a044 	.word	0x0800a044
 800873c:	0800a0d4 	.word	0x0800a0d4

08008740 <__multiply>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	4614      	mov	r4, r2
 8008746:	690a      	ldr	r2, [r1, #16]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	429a      	cmp	r2, r3
 800874c:	bfb8      	it	lt
 800874e:	460b      	movlt	r3, r1
 8008750:	460d      	mov	r5, r1
 8008752:	bfbc      	itt	lt
 8008754:	4625      	movlt	r5, r4
 8008756:	461c      	movlt	r4, r3
 8008758:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800875c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008760:	68ab      	ldr	r3, [r5, #8]
 8008762:	6869      	ldr	r1, [r5, #4]
 8008764:	eb0a 0709 	add.w	r7, sl, r9
 8008768:	42bb      	cmp	r3, r7
 800876a:	b085      	sub	sp, #20
 800876c:	bfb8      	it	lt
 800876e:	3101      	addlt	r1, #1
 8008770:	f7ff fe8a 	bl	8008488 <_Balloc>
 8008774:	b930      	cbnz	r0, 8008784 <__multiply+0x44>
 8008776:	4602      	mov	r2, r0
 8008778:	4b42      	ldr	r3, [pc, #264]	; (8008884 <__multiply+0x144>)
 800877a:	4843      	ldr	r0, [pc, #268]	; (8008888 <__multiply+0x148>)
 800877c:	f240 115d 	movw	r1, #349	; 0x15d
 8008780:	f000 fd8a 	bl	8009298 <__assert_func>
 8008784:	f100 0614 	add.w	r6, r0, #20
 8008788:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800878c:	4633      	mov	r3, r6
 800878e:	2200      	movs	r2, #0
 8008790:	4543      	cmp	r3, r8
 8008792:	d31e      	bcc.n	80087d2 <__multiply+0x92>
 8008794:	f105 0c14 	add.w	ip, r5, #20
 8008798:	f104 0314 	add.w	r3, r4, #20
 800879c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80087a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80087a4:	9202      	str	r2, [sp, #8]
 80087a6:	ebac 0205 	sub.w	r2, ip, r5
 80087aa:	3a15      	subs	r2, #21
 80087ac:	f022 0203 	bic.w	r2, r2, #3
 80087b0:	3204      	adds	r2, #4
 80087b2:	f105 0115 	add.w	r1, r5, #21
 80087b6:	458c      	cmp	ip, r1
 80087b8:	bf38      	it	cc
 80087ba:	2204      	movcc	r2, #4
 80087bc:	9201      	str	r2, [sp, #4]
 80087be:	9a02      	ldr	r2, [sp, #8]
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d808      	bhi.n	80087d8 <__multiply+0x98>
 80087c6:	2f00      	cmp	r7, #0
 80087c8:	dc55      	bgt.n	8008876 <__multiply+0x136>
 80087ca:	6107      	str	r7, [r0, #16]
 80087cc:	b005      	add	sp, #20
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	f843 2b04 	str.w	r2, [r3], #4
 80087d6:	e7db      	b.n	8008790 <__multiply+0x50>
 80087d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80087dc:	f1ba 0f00 	cmp.w	sl, #0
 80087e0:	d020      	beq.n	8008824 <__multiply+0xe4>
 80087e2:	f105 0e14 	add.w	lr, r5, #20
 80087e6:	46b1      	mov	r9, r6
 80087e8:	2200      	movs	r2, #0
 80087ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80087ee:	f8d9 b000 	ldr.w	fp, [r9]
 80087f2:	b2a1      	uxth	r1, r4
 80087f4:	fa1f fb8b 	uxth.w	fp, fp
 80087f8:	fb0a b101 	mla	r1, sl, r1, fp
 80087fc:	4411      	add	r1, r2
 80087fe:	f8d9 2000 	ldr.w	r2, [r9]
 8008802:	0c24      	lsrs	r4, r4, #16
 8008804:	0c12      	lsrs	r2, r2, #16
 8008806:	fb0a 2404 	mla	r4, sl, r4, r2
 800880a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800880e:	b289      	uxth	r1, r1
 8008810:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008814:	45f4      	cmp	ip, lr
 8008816:	f849 1b04 	str.w	r1, [r9], #4
 800881a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800881e:	d8e4      	bhi.n	80087ea <__multiply+0xaa>
 8008820:	9901      	ldr	r1, [sp, #4]
 8008822:	5072      	str	r2, [r6, r1]
 8008824:	9a03      	ldr	r2, [sp, #12]
 8008826:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800882a:	3304      	adds	r3, #4
 800882c:	f1b9 0f00 	cmp.w	r9, #0
 8008830:	d01f      	beq.n	8008872 <__multiply+0x132>
 8008832:	6834      	ldr	r4, [r6, #0]
 8008834:	f105 0114 	add.w	r1, r5, #20
 8008838:	46b6      	mov	lr, r6
 800883a:	f04f 0a00 	mov.w	sl, #0
 800883e:	880a      	ldrh	r2, [r1, #0]
 8008840:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008844:	fb09 b202 	mla	r2, r9, r2, fp
 8008848:	4492      	add	sl, r2
 800884a:	b2a4      	uxth	r4, r4
 800884c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008850:	f84e 4b04 	str.w	r4, [lr], #4
 8008854:	f851 4b04 	ldr.w	r4, [r1], #4
 8008858:	f8be 2000 	ldrh.w	r2, [lr]
 800885c:	0c24      	lsrs	r4, r4, #16
 800885e:	fb09 2404 	mla	r4, r9, r4, r2
 8008862:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008866:	458c      	cmp	ip, r1
 8008868:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800886c:	d8e7      	bhi.n	800883e <__multiply+0xfe>
 800886e:	9a01      	ldr	r2, [sp, #4]
 8008870:	50b4      	str	r4, [r6, r2]
 8008872:	3604      	adds	r6, #4
 8008874:	e7a3      	b.n	80087be <__multiply+0x7e>
 8008876:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1a5      	bne.n	80087ca <__multiply+0x8a>
 800887e:	3f01      	subs	r7, #1
 8008880:	e7a1      	b.n	80087c6 <__multiply+0x86>
 8008882:	bf00      	nop
 8008884:	0800a044 	.word	0x0800a044
 8008888:	0800a0d4 	.word	0x0800a0d4

0800888c <__pow5mult>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	4615      	mov	r5, r2
 8008892:	f012 0203 	ands.w	r2, r2, #3
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	d007      	beq.n	80088ac <__pow5mult+0x20>
 800889c:	4c25      	ldr	r4, [pc, #148]	; (8008934 <__pow5mult+0xa8>)
 800889e:	3a01      	subs	r2, #1
 80088a0:	2300      	movs	r3, #0
 80088a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088a6:	f7ff fe51 	bl	800854c <__multadd>
 80088aa:	4607      	mov	r7, r0
 80088ac:	10ad      	asrs	r5, r5, #2
 80088ae:	d03d      	beq.n	800892c <__pow5mult+0xa0>
 80088b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088b2:	b97c      	cbnz	r4, 80088d4 <__pow5mult+0x48>
 80088b4:	2010      	movs	r0, #16
 80088b6:	f7ff fdbf 	bl	8008438 <malloc>
 80088ba:	4602      	mov	r2, r0
 80088bc:	6270      	str	r0, [r6, #36]	; 0x24
 80088be:	b928      	cbnz	r0, 80088cc <__pow5mult+0x40>
 80088c0:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <__pow5mult+0xac>)
 80088c2:	481e      	ldr	r0, [pc, #120]	; (800893c <__pow5mult+0xb0>)
 80088c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088c8:	f000 fce6 	bl	8009298 <__assert_func>
 80088cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088d0:	6004      	str	r4, [r0, #0]
 80088d2:	60c4      	str	r4, [r0, #12]
 80088d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088dc:	b94c      	cbnz	r4, 80088f2 <__pow5mult+0x66>
 80088de:	f240 2171 	movw	r1, #625	; 0x271
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7ff ff16 	bl	8008714 <__i2b>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ee:	4604      	mov	r4, r0
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	07eb      	lsls	r3, r5, #31
 80088f8:	d50a      	bpl.n	8008910 <__pow5mult+0x84>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4622      	mov	r2, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	f7ff ff1e 	bl	8008740 <__multiply>
 8008904:	4639      	mov	r1, r7
 8008906:	4680      	mov	r8, r0
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff fdfd 	bl	8008508 <_Bfree>
 800890e:	4647      	mov	r7, r8
 8008910:	106d      	asrs	r5, r5, #1
 8008912:	d00b      	beq.n	800892c <__pow5mult+0xa0>
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	b938      	cbnz	r0, 8008928 <__pow5mult+0x9c>
 8008918:	4622      	mov	r2, r4
 800891a:	4621      	mov	r1, r4
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff ff0f 	bl	8008740 <__multiply>
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	f8c0 9000 	str.w	r9, [r0]
 8008928:	4604      	mov	r4, r0
 800892a:	e7e4      	b.n	80088f6 <__pow5mult+0x6a>
 800892c:	4638      	mov	r0, r7
 800892e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008932:	bf00      	nop
 8008934:	0800a228 	.word	0x0800a228
 8008938:	08009fce 	.word	0x08009fce
 800893c:	0800a0d4 	.word	0x0800a0d4

08008940 <__lshift>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	6849      	ldr	r1, [r1, #4]
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	4607      	mov	r7, r0
 8008952:	4691      	mov	r9, r2
 8008954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008958:	f108 0601 	add.w	r6, r8, #1
 800895c:	42b3      	cmp	r3, r6
 800895e:	db0b      	blt.n	8008978 <__lshift+0x38>
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff fd91 	bl	8008488 <_Balloc>
 8008966:	4605      	mov	r5, r0
 8008968:	b948      	cbnz	r0, 800897e <__lshift+0x3e>
 800896a:	4602      	mov	r2, r0
 800896c:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <__lshift+0xd0>)
 800896e:	4829      	ldr	r0, [pc, #164]	; (8008a14 <__lshift+0xd4>)
 8008970:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008974:	f000 fc90 	bl	8009298 <__assert_func>
 8008978:	3101      	adds	r1, #1
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	e7ee      	b.n	800895c <__lshift+0x1c>
 800897e:	2300      	movs	r3, #0
 8008980:	f100 0114 	add.w	r1, r0, #20
 8008984:	f100 0210 	add.w	r2, r0, #16
 8008988:	4618      	mov	r0, r3
 800898a:	4553      	cmp	r3, sl
 800898c:	db33      	blt.n	80089f6 <__lshift+0xb6>
 800898e:	6920      	ldr	r0, [r4, #16]
 8008990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008994:	f104 0314 	add.w	r3, r4, #20
 8008998:	f019 091f 	ands.w	r9, r9, #31
 800899c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089a4:	d02b      	beq.n	80089fe <__lshift+0xbe>
 80089a6:	f1c9 0e20 	rsb	lr, r9, #32
 80089aa:	468a      	mov	sl, r1
 80089ac:	2200      	movs	r2, #0
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	fa00 f009 	lsl.w	r0, r0, r9
 80089b4:	4302      	orrs	r2, r0
 80089b6:	f84a 2b04 	str.w	r2, [sl], #4
 80089ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80089be:	459c      	cmp	ip, r3
 80089c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089c4:	d8f3      	bhi.n	80089ae <__lshift+0x6e>
 80089c6:	ebac 0304 	sub.w	r3, ip, r4
 80089ca:	3b15      	subs	r3, #21
 80089cc:	f023 0303 	bic.w	r3, r3, #3
 80089d0:	3304      	adds	r3, #4
 80089d2:	f104 0015 	add.w	r0, r4, #21
 80089d6:	4584      	cmp	ip, r0
 80089d8:	bf38      	it	cc
 80089da:	2304      	movcc	r3, #4
 80089dc:	50ca      	str	r2, [r1, r3]
 80089de:	b10a      	cbz	r2, 80089e4 <__lshift+0xa4>
 80089e0:	f108 0602 	add.w	r6, r8, #2
 80089e4:	3e01      	subs	r6, #1
 80089e6:	4638      	mov	r0, r7
 80089e8:	612e      	str	r6, [r5, #16]
 80089ea:	4621      	mov	r1, r4
 80089ec:	f7ff fd8c 	bl	8008508 <_Bfree>
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089fa:	3301      	adds	r3, #1
 80089fc:	e7c5      	b.n	800898a <__lshift+0x4a>
 80089fe:	3904      	subs	r1, #4
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a08:	459c      	cmp	ip, r3
 8008a0a:	d8f9      	bhi.n	8008a00 <__lshift+0xc0>
 8008a0c:	e7ea      	b.n	80089e4 <__lshift+0xa4>
 8008a0e:	bf00      	nop
 8008a10:	0800a044 	.word	0x0800a044
 8008a14:	0800a0d4 	.word	0x0800a0d4

08008a18 <__mcmp>:
 8008a18:	b530      	push	{r4, r5, lr}
 8008a1a:	6902      	ldr	r2, [r0, #16]
 8008a1c:	690c      	ldr	r4, [r1, #16]
 8008a1e:	1b12      	subs	r2, r2, r4
 8008a20:	d10e      	bne.n	8008a40 <__mcmp+0x28>
 8008a22:	f100 0314 	add.w	r3, r0, #20
 8008a26:	3114      	adds	r1, #20
 8008a28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a38:	42a5      	cmp	r5, r4
 8008a3a:	d003      	beq.n	8008a44 <__mcmp+0x2c>
 8008a3c:	d305      	bcc.n	8008a4a <__mcmp+0x32>
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4610      	mov	r0, r2
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	4283      	cmp	r3, r0
 8008a46:	d3f3      	bcc.n	8008a30 <__mcmp+0x18>
 8008a48:	e7fa      	b.n	8008a40 <__mcmp+0x28>
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a4e:	e7f7      	b.n	8008a40 <__mcmp+0x28>

08008a50 <__mdiff>:
 8008a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	4606      	mov	r6, r0
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4617      	mov	r7, r2
 8008a5e:	f7ff ffdb 	bl	8008a18 <__mcmp>
 8008a62:	1e05      	subs	r5, r0, #0
 8008a64:	d110      	bne.n	8008a88 <__mdiff+0x38>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff fd0d 	bl	8008488 <_Balloc>
 8008a6e:	b930      	cbnz	r0, 8008a7e <__mdiff+0x2e>
 8008a70:	4b39      	ldr	r3, [pc, #228]	; (8008b58 <__mdiff+0x108>)
 8008a72:	4602      	mov	r2, r0
 8008a74:	f240 2132 	movw	r1, #562	; 0x232
 8008a78:	4838      	ldr	r0, [pc, #224]	; (8008b5c <__mdiff+0x10c>)
 8008a7a:	f000 fc0d 	bl	8009298 <__assert_func>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	bfa4      	itt	ge
 8008a8a:	463b      	movge	r3, r7
 8008a8c:	4627      	movge	r7, r4
 8008a8e:	4630      	mov	r0, r6
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	bfa6      	itte	ge
 8008a94:	461c      	movge	r4, r3
 8008a96:	2500      	movge	r5, #0
 8008a98:	2501      	movlt	r5, #1
 8008a9a:	f7ff fcf5 	bl	8008488 <_Balloc>
 8008a9e:	b920      	cbnz	r0, 8008aaa <__mdiff+0x5a>
 8008aa0:	4b2d      	ldr	r3, [pc, #180]	; (8008b58 <__mdiff+0x108>)
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008aa8:	e7e6      	b.n	8008a78 <__mdiff+0x28>
 8008aaa:	693e      	ldr	r6, [r7, #16]
 8008aac:	60c5      	str	r5, [r0, #12]
 8008aae:	6925      	ldr	r5, [r4, #16]
 8008ab0:	f107 0114 	add.w	r1, r7, #20
 8008ab4:	f104 0914 	add.w	r9, r4, #20
 8008ab8:	f100 0e14 	add.w	lr, r0, #20
 8008abc:	f107 0210 	add.w	r2, r7, #16
 8008ac0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ac4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008ac8:	46f2      	mov	sl, lr
 8008aca:	2700      	movs	r7, #0
 8008acc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ad4:	fa1f f883 	uxth.w	r8, r3
 8008ad8:	fa17 f78b 	uxtah	r7, r7, fp
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	eba7 0808 	sub.w	r8, r7, r8
 8008ae2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ae6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aea:	fa1f f888 	uxth.w	r8, r8
 8008aee:	141f      	asrs	r7, r3, #16
 8008af0:	454d      	cmp	r5, r9
 8008af2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008af6:	f84a 3b04 	str.w	r3, [sl], #4
 8008afa:	d8e7      	bhi.n	8008acc <__mdiff+0x7c>
 8008afc:	1b2b      	subs	r3, r5, r4
 8008afe:	3b15      	subs	r3, #21
 8008b00:	f023 0303 	bic.w	r3, r3, #3
 8008b04:	3304      	adds	r3, #4
 8008b06:	3415      	adds	r4, #21
 8008b08:	42a5      	cmp	r5, r4
 8008b0a:	bf38      	it	cc
 8008b0c:	2304      	movcc	r3, #4
 8008b0e:	4419      	add	r1, r3
 8008b10:	4473      	add	r3, lr
 8008b12:	469e      	mov	lr, r3
 8008b14:	460d      	mov	r5, r1
 8008b16:	4565      	cmp	r5, ip
 8008b18:	d30e      	bcc.n	8008b38 <__mdiff+0xe8>
 8008b1a:	f10c 0203 	add.w	r2, ip, #3
 8008b1e:	1a52      	subs	r2, r2, r1
 8008b20:	f022 0203 	bic.w	r2, r2, #3
 8008b24:	3903      	subs	r1, #3
 8008b26:	458c      	cmp	ip, r1
 8008b28:	bf38      	it	cc
 8008b2a:	2200      	movcc	r2, #0
 8008b2c:	441a      	add	r2, r3
 8008b2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b32:	b17b      	cbz	r3, 8008b54 <__mdiff+0x104>
 8008b34:	6106      	str	r6, [r0, #16]
 8008b36:	e7a5      	b.n	8008a84 <__mdiff+0x34>
 8008b38:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b3c:	fa17 f488 	uxtah	r4, r7, r8
 8008b40:	1422      	asrs	r2, r4, #16
 8008b42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008b46:	b2a4      	uxth	r4, r4
 8008b48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b4c:	f84e 4b04 	str.w	r4, [lr], #4
 8008b50:	1417      	asrs	r7, r2, #16
 8008b52:	e7e0      	b.n	8008b16 <__mdiff+0xc6>
 8008b54:	3e01      	subs	r6, #1
 8008b56:	e7ea      	b.n	8008b2e <__mdiff+0xde>
 8008b58:	0800a044 	.word	0x0800a044
 8008b5c:	0800a0d4 	.word	0x0800a0d4

08008b60 <__ulp>:
 8008b60:	b082      	sub	sp, #8
 8008b62:	ed8d 0b00 	vstr	d0, [sp]
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	4912      	ldr	r1, [pc, #72]	; (8008bb4 <__ulp+0x54>)
 8008b6a:	4019      	ands	r1, r3
 8008b6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b70:	2900      	cmp	r1, #0
 8008b72:	dd05      	ble.n	8008b80 <__ulp+0x20>
 8008b74:	2200      	movs	r2, #0
 8008b76:	460b      	mov	r3, r1
 8008b78:	ec43 2b10 	vmov	d0, r2, r3
 8008b7c:	b002      	add	sp, #8
 8008b7e:	4770      	bx	lr
 8008b80:	4249      	negs	r1, r1
 8008b82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b86:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	da04      	bge.n	8008b9e <__ulp+0x3e>
 8008b94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b98:	fa41 f300 	asr.w	r3, r1, r0
 8008b9c:	e7ec      	b.n	8008b78 <__ulp+0x18>
 8008b9e:	f1a0 0114 	sub.w	r1, r0, #20
 8008ba2:	291e      	cmp	r1, #30
 8008ba4:	bfda      	itte	le
 8008ba6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008baa:	fa20 f101 	lsrle.w	r1, r0, r1
 8008bae:	2101      	movgt	r1, #1
 8008bb0:	460a      	mov	r2, r1
 8008bb2:	e7e1      	b.n	8008b78 <__ulp+0x18>
 8008bb4:	7ff00000 	.word	0x7ff00000

08008bb8 <__b2d>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	6905      	ldr	r5, [r0, #16]
 8008bbc:	f100 0714 	add.w	r7, r0, #20
 8008bc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008bc4:	1f2e      	subs	r6, r5, #4
 8008bc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff fd52 	bl	8008674 <__hi0bits>
 8008bd0:	f1c0 0320 	rsb	r3, r0, #32
 8008bd4:	280a      	cmp	r0, #10
 8008bd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c54 <__b2d+0x9c>
 8008bda:	600b      	str	r3, [r1, #0]
 8008bdc:	dc14      	bgt.n	8008c08 <__b2d+0x50>
 8008bde:	f1c0 0e0b 	rsb	lr, r0, #11
 8008be2:	fa24 f10e 	lsr.w	r1, r4, lr
 8008be6:	42b7      	cmp	r7, r6
 8008be8:	ea41 030c 	orr.w	r3, r1, ip
 8008bec:	bf34      	ite	cc
 8008bee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bf2:	2100      	movcs	r1, #0
 8008bf4:	3015      	adds	r0, #21
 8008bf6:	fa04 f000 	lsl.w	r0, r4, r0
 8008bfa:	fa21 f10e 	lsr.w	r1, r1, lr
 8008bfe:	ea40 0201 	orr.w	r2, r0, r1
 8008c02:	ec43 2b10 	vmov	d0, r2, r3
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c08:	42b7      	cmp	r7, r6
 8008c0a:	bf3a      	itte	cc
 8008c0c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c10:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c14:	2100      	movcs	r1, #0
 8008c16:	380b      	subs	r0, #11
 8008c18:	d017      	beq.n	8008c4a <__b2d+0x92>
 8008c1a:	f1c0 0c20 	rsb	ip, r0, #32
 8008c1e:	fa04 f500 	lsl.w	r5, r4, r0
 8008c22:	42be      	cmp	r6, r7
 8008c24:	fa21 f40c 	lsr.w	r4, r1, ip
 8008c28:	ea45 0504 	orr.w	r5, r5, r4
 8008c2c:	bf8c      	ite	hi
 8008c2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c32:	2400      	movls	r4, #0
 8008c34:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c38:	fa01 f000 	lsl.w	r0, r1, r0
 8008c3c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c44:	ea40 0204 	orr.w	r2, r0, r4
 8008c48:	e7db      	b.n	8008c02 <__b2d+0x4a>
 8008c4a:	ea44 030c 	orr.w	r3, r4, ip
 8008c4e:	460a      	mov	r2, r1
 8008c50:	e7d7      	b.n	8008c02 <__b2d+0x4a>
 8008c52:	bf00      	nop
 8008c54:	3ff00000 	.word	0x3ff00000

08008c58 <__d2b>:
 8008c58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	2101      	movs	r1, #1
 8008c60:	ec57 6b10 	vmov	r6, r7, d0
 8008c64:	4690      	mov	r8, r2
 8008c66:	f7ff fc0f 	bl	8008488 <_Balloc>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b930      	cbnz	r0, 8008c7c <__d2b+0x24>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b25      	ldr	r3, [pc, #148]	; (8008d08 <__d2b+0xb0>)
 8008c72:	4826      	ldr	r0, [pc, #152]	; (8008d0c <__d2b+0xb4>)
 8008c74:	f240 310a 	movw	r1, #778	; 0x30a
 8008c78:	f000 fb0e 	bl	8009298 <__assert_func>
 8008c7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c84:	bb35      	cbnz	r5, 8008cd4 <__d2b+0x7c>
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	d028      	beq.n	8008cde <__d2b+0x86>
 8008c8c:	4668      	mov	r0, sp
 8008c8e:	9600      	str	r6, [sp, #0]
 8008c90:	f7ff fd10 	bl	80086b4 <__lo0bits>
 8008c94:	9900      	ldr	r1, [sp, #0]
 8008c96:	b300      	cbz	r0, 8008cda <__d2b+0x82>
 8008c98:	9a01      	ldr	r2, [sp, #4]
 8008c9a:	f1c0 0320 	rsb	r3, r0, #32
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	40c2      	lsrs	r2, r0
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	9201      	str	r2, [sp, #4]
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	61a3      	str	r3, [r4, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bf14      	ite	ne
 8008cb2:	2202      	movne	r2, #2
 8008cb4:	2201      	moveq	r2, #1
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	b1d5      	cbz	r5, 8008cf0 <__d2b+0x98>
 8008cba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cbe:	4405      	add	r5, r0
 8008cc0:	f8c9 5000 	str.w	r5, [r9]
 8008cc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cc8:	f8c8 0000 	str.w	r0, [r8]
 8008ccc:	4620      	mov	r0, r4
 8008cce:	b003      	add	sp, #12
 8008cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd8:	e7d5      	b.n	8008c86 <__d2b+0x2e>
 8008cda:	6161      	str	r1, [r4, #20]
 8008cdc:	e7e5      	b.n	8008caa <__d2b+0x52>
 8008cde:	a801      	add	r0, sp, #4
 8008ce0:	f7ff fce8 	bl	80086b4 <__lo0bits>
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	6122      	str	r2, [r4, #16]
 8008cec:	3020      	adds	r0, #32
 8008cee:	e7e3      	b.n	8008cb8 <__d2b+0x60>
 8008cf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf8:	f8c9 0000 	str.w	r0, [r9]
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f7ff fcb9 	bl	8008674 <__hi0bits>
 8008d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d06:	e7df      	b.n	8008cc8 <__d2b+0x70>
 8008d08:	0800a044 	.word	0x0800a044
 8008d0c:	0800a0d4 	.word	0x0800a0d4

08008d10 <__ratio>:
 8008d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	4688      	mov	r8, r1
 8008d16:	4669      	mov	r1, sp
 8008d18:	4681      	mov	r9, r0
 8008d1a:	f7ff ff4d 	bl	8008bb8 <__b2d>
 8008d1e:	a901      	add	r1, sp, #4
 8008d20:	4640      	mov	r0, r8
 8008d22:	ec55 4b10 	vmov	r4, r5, d0
 8008d26:	f7ff ff47 	bl	8008bb8 <__b2d>
 8008d2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d32:	eba3 0c02 	sub.w	ip, r3, r2
 8008d36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d40:	ec51 0b10 	vmov	r0, r1, d0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfd6      	itet	le
 8008d48:	460a      	movle	r2, r1
 8008d4a:	462a      	movgt	r2, r5
 8008d4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d50:	468b      	mov	fp, r1
 8008d52:	462f      	mov	r7, r5
 8008d54:	bfd4      	ite	le
 8008d56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d5e:	4620      	mov	r0, r4
 8008d60:	ee10 2a10 	vmov	r2, s0
 8008d64:	465b      	mov	r3, fp
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 fd70 	bl	800084c <__aeabi_ddiv>
 8008d6c:	ec41 0b10 	vmov	d0, r0, r1
 8008d70:	b003      	add	sp, #12
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d76 <__copybits>:
 8008d76:	3901      	subs	r1, #1
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	1149      	asrs	r1, r1, #5
 8008d7c:	6914      	ldr	r4, [r2, #16]
 8008d7e:	3101      	adds	r1, #1
 8008d80:	f102 0314 	add.w	r3, r2, #20
 8008d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d8c:	1f05      	subs	r5, r0, #4
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	d30c      	bcc.n	8008dac <__copybits+0x36>
 8008d92:	1aa3      	subs	r3, r4, r2
 8008d94:	3b11      	subs	r3, #17
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	3211      	adds	r2, #17
 8008d9c:	42a2      	cmp	r2, r4
 8008d9e:	bf88      	it	hi
 8008da0:	2300      	movhi	r3, #0
 8008da2:	4418      	add	r0, r3
 8008da4:	2300      	movs	r3, #0
 8008da6:	4288      	cmp	r0, r1
 8008da8:	d305      	bcc.n	8008db6 <__copybits+0x40>
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	f853 6b04 	ldr.w	r6, [r3], #4
 8008db0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008db4:	e7eb      	b.n	8008d8e <__copybits+0x18>
 8008db6:	f840 3b04 	str.w	r3, [r0], #4
 8008dba:	e7f4      	b.n	8008da6 <__copybits+0x30>

08008dbc <__any_on>:
 8008dbc:	f100 0214 	add.w	r2, r0, #20
 8008dc0:	6900      	ldr	r0, [r0, #16]
 8008dc2:	114b      	asrs	r3, r1, #5
 8008dc4:	4298      	cmp	r0, r3
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	db11      	blt.n	8008dee <__any_on+0x32>
 8008dca:	dd0a      	ble.n	8008de2 <__any_on+0x26>
 8008dcc:	f011 011f 	ands.w	r1, r1, #31
 8008dd0:	d007      	beq.n	8008de2 <__any_on+0x26>
 8008dd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dd6:	fa24 f001 	lsr.w	r0, r4, r1
 8008dda:	fa00 f101 	lsl.w	r1, r0, r1
 8008dde:	428c      	cmp	r4, r1
 8008de0:	d10b      	bne.n	8008dfa <__any_on+0x3e>
 8008de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d803      	bhi.n	8008df2 <__any_on+0x36>
 8008dea:	2000      	movs	r0, #0
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	4603      	mov	r3, r0
 8008df0:	e7f7      	b.n	8008de2 <__any_on+0x26>
 8008df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008df6:	2900      	cmp	r1, #0
 8008df8:	d0f5      	beq.n	8008de6 <__any_on+0x2a>
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	e7f6      	b.n	8008dec <__any_on+0x30>

08008dfe <_calloc_r>:
 8008dfe:	b513      	push	{r0, r1, r4, lr}
 8008e00:	434a      	muls	r2, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	9201      	str	r2, [sp, #4]
 8008e06:	f000 f859 	bl	8008ebc <_malloc_r>
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	b118      	cbz	r0, 8008e16 <_calloc_r+0x18>
 8008e0e:	9a01      	ldr	r2, [sp, #4]
 8008e10:	2100      	movs	r1, #0
 8008e12:	f7fc fbc7 	bl	80055a4 <memset>
 8008e16:	4620      	mov	r0, r4
 8008e18:	b002      	add	sp, #8
 8008e1a:	bd10      	pop	{r4, pc}

08008e1c <_free_r>:
 8008e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d048      	beq.n	8008eb4 <_free_r+0x98>
 8008e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2e:	bfb8      	it	lt
 8008e30:	18e4      	addlt	r4, r4, r3
 8008e32:	f000 fa7b 	bl	800932c <__malloc_lock>
 8008e36:	4a20      	ldr	r2, [pc, #128]	; (8008eb8 <_free_r+0x9c>)
 8008e38:	9801      	ldr	r0, [sp, #4]
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	b933      	cbnz	r3, 8008e4e <_free_r+0x32>
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	6014      	str	r4, [r2, #0]
 8008e44:	b003      	add	sp, #12
 8008e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e4a:	f000 ba75 	b.w	8009338 <__malloc_unlock>
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	d90b      	bls.n	8008e6a <_free_r+0x4e>
 8008e52:	6821      	ldr	r1, [r4, #0]
 8008e54:	1862      	adds	r2, r4, r1
 8008e56:	4293      	cmp	r3, r2
 8008e58:	bf04      	itt	eq
 8008e5a:	681a      	ldreq	r2, [r3, #0]
 8008e5c:	685b      	ldreq	r3, [r3, #4]
 8008e5e:	6063      	str	r3, [r4, #4]
 8008e60:	bf04      	itt	eq
 8008e62:	1852      	addeq	r2, r2, r1
 8008e64:	6022      	streq	r2, [r4, #0]
 8008e66:	602c      	str	r4, [r5, #0]
 8008e68:	e7ec      	b.n	8008e44 <_free_r+0x28>
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b10b      	cbz	r3, 8008e74 <_free_r+0x58>
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	d9fa      	bls.n	8008e6a <_free_r+0x4e>
 8008e74:	6811      	ldr	r1, [r2, #0]
 8008e76:	1855      	adds	r5, r2, r1
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	d10b      	bne.n	8008e94 <_free_r+0x78>
 8008e7c:	6824      	ldr	r4, [r4, #0]
 8008e7e:	4421      	add	r1, r4
 8008e80:	1854      	adds	r4, r2, r1
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	d1dd      	bne.n	8008e44 <_free_r+0x28>
 8008e88:	681c      	ldr	r4, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	6053      	str	r3, [r2, #4]
 8008e8e:	4421      	add	r1, r4
 8008e90:	6011      	str	r1, [r2, #0]
 8008e92:	e7d7      	b.n	8008e44 <_free_r+0x28>
 8008e94:	d902      	bls.n	8008e9c <_free_r+0x80>
 8008e96:	230c      	movs	r3, #12
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	e7d3      	b.n	8008e44 <_free_r+0x28>
 8008e9c:	6825      	ldr	r5, [r4, #0]
 8008e9e:	1961      	adds	r1, r4, r5
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	bf04      	itt	eq
 8008ea4:	6819      	ldreq	r1, [r3, #0]
 8008ea6:	685b      	ldreq	r3, [r3, #4]
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	bf04      	itt	eq
 8008eac:	1949      	addeq	r1, r1, r5
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	6054      	str	r4, [r2, #4]
 8008eb2:	e7c7      	b.n	8008e44 <_free_r+0x28>
 8008eb4:	b003      	add	sp, #12
 8008eb6:	bd30      	pop	{r4, r5, pc}
 8008eb8:	2000020c 	.word	0x2000020c

08008ebc <_malloc_r>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	1ccd      	adds	r5, r1, #3
 8008ec0:	f025 0503 	bic.w	r5, r5, #3
 8008ec4:	3508      	adds	r5, #8
 8008ec6:	2d0c      	cmp	r5, #12
 8008ec8:	bf38      	it	cc
 8008eca:	250c      	movcc	r5, #12
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	4606      	mov	r6, r0
 8008ed0:	db01      	blt.n	8008ed6 <_malloc_r+0x1a>
 8008ed2:	42a9      	cmp	r1, r5
 8008ed4:	d903      	bls.n	8008ede <_malloc_r+0x22>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	6033      	str	r3, [r6, #0]
 8008eda:	2000      	movs	r0, #0
 8008edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ede:	f000 fa25 	bl	800932c <__malloc_lock>
 8008ee2:	4921      	ldr	r1, [pc, #132]	; (8008f68 <_malloc_r+0xac>)
 8008ee4:	680a      	ldr	r2, [r1, #0]
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	b99c      	cbnz	r4, 8008f12 <_malloc_r+0x56>
 8008eea:	4f20      	ldr	r7, [pc, #128]	; (8008f6c <_malloc_r+0xb0>)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	b923      	cbnz	r3, 8008efa <_malloc_r+0x3e>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 f9a0 	bl	8009238 <_sbrk_r>
 8008ef8:	6038      	str	r0, [r7, #0]
 8008efa:	4629      	mov	r1, r5
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 f99b 	bl	8009238 <_sbrk_r>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	d123      	bne.n	8008f4e <_malloc_r+0x92>
 8008f06:	230c      	movs	r3, #12
 8008f08:	6033      	str	r3, [r6, #0]
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 fa14 	bl	8009338 <__malloc_unlock>
 8008f10:	e7e3      	b.n	8008eda <_malloc_r+0x1e>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	1b5b      	subs	r3, r3, r5
 8008f16:	d417      	bmi.n	8008f48 <_malloc_r+0x8c>
 8008f18:	2b0b      	cmp	r3, #11
 8008f1a:	d903      	bls.n	8008f24 <_malloc_r+0x68>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	441c      	add	r4, r3
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	e004      	b.n	8008f2e <_malloc_r+0x72>
 8008f24:	6863      	ldr	r3, [r4, #4]
 8008f26:	42a2      	cmp	r2, r4
 8008f28:	bf0c      	ite	eq
 8008f2a:	600b      	streq	r3, [r1, #0]
 8008f2c:	6053      	strne	r3, [r2, #4]
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 fa02 	bl	8009338 <__malloc_unlock>
 8008f34:	f104 000b 	add.w	r0, r4, #11
 8008f38:	1d23      	adds	r3, r4, #4
 8008f3a:	f020 0007 	bic.w	r0, r0, #7
 8008f3e:	1ac2      	subs	r2, r0, r3
 8008f40:	d0cc      	beq.n	8008edc <_malloc_r+0x20>
 8008f42:	1a1b      	subs	r3, r3, r0
 8008f44:	50a3      	str	r3, [r4, r2]
 8008f46:	e7c9      	b.n	8008edc <_malloc_r+0x20>
 8008f48:	4622      	mov	r2, r4
 8008f4a:	6864      	ldr	r4, [r4, #4]
 8008f4c:	e7cc      	b.n	8008ee8 <_malloc_r+0x2c>
 8008f4e:	1cc4      	adds	r4, r0, #3
 8008f50:	f024 0403 	bic.w	r4, r4, #3
 8008f54:	42a0      	cmp	r0, r4
 8008f56:	d0e3      	beq.n	8008f20 <_malloc_r+0x64>
 8008f58:	1a21      	subs	r1, r4, r0
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f000 f96c 	bl	8009238 <_sbrk_r>
 8008f60:	3001      	adds	r0, #1
 8008f62:	d1dd      	bne.n	8008f20 <_malloc_r+0x64>
 8008f64:	e7cf      	b.n	8008f06 <_malloc_r+0x4a>
 8008f66:	bf00      	nop
 8008f68:	2000020c 	.word	0x2000020c
 8008f6c:	20000210 	.word	0x20000210

08008f70 <__ssputs_r>:
 8008f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	688e      	ldr	r6, [r1, #8]
 8008f76:	429e      	cmp	r6, r3
 8008f78:	4682      	mov	sl, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	461f      	mov	r7, r3
 8008f80:	d838      	bhi.n	8008ff4 <__ssputs_r+0x84>
 8008f82:	898a      	ldrh	r2, [r1, #12]
 8008f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f88:	d032      	beq.n	8008ff0 <__ssputs_r+0x80>
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	6909      	ldr	r1, [r1, #16]
 8008f8e:	eba5 0901 	sub.w	r9, r5, r1
 8008f92:	6965      	ldr	r5, [r4, #20]
 8008f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	444b      	add	r3, r9
 8008fa0:	106d      	asrs	r5, r5, #1
 8008fa2:	429d      	cmp	r5, r3
 8008fa4:	bf38      	it	cc
 8008fa6:	461d      	movcc	r5, r3
 8008fa8:	0553      	lsls	r3, r2, #21
 8008faa:	d531      	bpl.n	8009010 <__ssputs_r+0xa0>
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7ff ff85 	bl	8008ebc <_malloc_r>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	b950      	cbnz	r0, 8008fcc <__ssputs_r+0x5c>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	f8ca 3000 	str.w	r3, [sl]
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	464a      	mov	r2, r9
 8008fd0:	f7ff fa4c 	bl	800846c <memcpy>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6126      	str	r6, [r4, #16]
 8008fe2:	6165      	str	r5, [r4, #20]
 8008fe4:	444e      	add	r6, r9
 8008fe6:	eba5 0509 	sub.w	r5, r5, r9
 8008fea:	6026      	str	r6, [r4, #0]
 8008fec:	60a5      	str	r5, [r4, #8]
 8008fee:	463e      	mov	r6, r7
 8008ff0:	42be      	cmp	r6, r7
 8008ff2:	d900      	bls.n	8008ff6 <__ssputs_r+0x86>
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	f000 f97c 	bl	80092f8 <memmove>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	1b9b      	subs	r3, r3, r6
 8009006:	4432      	add	r2, r6
 8009008:	60a3      	str	r3, [r4, #8]
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	2000      	movs	r0, #0
 800900e:	e7db      	b.n	8008fc8 <__ssputs_r+0x58>
 8009010:	462a      	mov	r2, r5
 8009012:	f000 f997 	bl	8009344 <_realloc_r>
 8009016:	4606      	mov	r6, r0
 8009018:	2800      	cmp	r0, #0
 800901a:	d1e1      	bne.n	8008fe0 <__ssputs_r+0x70>
 800901c:	6921      	ldr	r1, [r4, #16]
 800901e:	4650      	mov	r0, sl
 8009020:	f7ff fefc 	bl	8008e1c <_free_r>
 8009024:	e7c7      	b.n	8008fb6 <__ssputs_r+0x46>
	...

08009028 <_svfiprintf_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	4698      	mov	r8, r3
 800902e:	898b      	ldrh	r3, [r1, #12]
 8009030:	061b      	lsls	r3, r3, #24
 8009032:	b09d      	sub	sp, #116	; 0x74
 8009034:	4607      	mov	r7, r0
 8009036:	460d      	mov	r5, r1
 8009038:	4614      	mov	r4, r2
 800903a:	d50e      	bpl.n	800905a <_svfiprintf_r+0x32>
 800903c:	690b      	ldr	r3, [r1, #16]
 800903e:	b963      	cbnz	r3, 800905a <_svfiprintf_r+0x32>
 8009040:	2140      	movs	r1, #64	; 0x40
 8009042:	f7ff ff3b 	bl	8008ebc <_malloc_r>
 8009046:	6028      	str	r0, [r5, #0]
 8009048:	6128      	str	r0, [r5, #16]
 800904a:	b920      	cbnz	r0, 8009056 <_svfiprintf_r+0x2e>
 800904c:	230c      	movs	r3, #12
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009054:	e0d1      	b.n	80091fa <_svfiprintf_r+0x1d2>
 8009056:	2340      	movs	r3, #64	; 0x40
 8009058:	616b      	str	r3, [r5, #20]
 800905a:	2300      	movs	r3, #0
 800905c:	9309      	str	r3, [sp, #36]	; 0x24
 800905e:	2320      	movs	r3, #32
 8009060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009064:	f8cd 800c 	str.w	r8, [sp, #12]
 8009068:	2330      	movs	r3, #48	; 0x30
 800906a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009214 <_svfiprintf_r+0x1ec>
 800906e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009072:	f04f 0901 	mov.w	r9, #1
 8009076:	4623      	mov	r3, r4
 8009078:	469a      	mov	sl, r3
 800907a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800907e:	b10a      	cbz	r2, 8009084 <_svfiprintf_r+0x5c>
 8009080:	2a25      	cmp	r2, #37	; 0x25
 8009082:	d1f9      	bne.n	8009078 <_svfiprintf_r+0x50>
 8009084:	ebba 0b04 	subs.w	fp, sl, r4
 8009088:	d00b      	beq.n	80090a2 <_svfiprintf_r+0x7a>
 800908a:	465b      	mov	r3, fp
 800908c:	4622      	mov	r2, r4
 800908e:	4629      	mov	r1, r5
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff ff6d 	bl	8008f70 <__ssputs_r>
 8009096:	3001      	adds	r0, #1
 8009098:	f000 80aa 	beq.w	80091f0 <_svfiprintf_r+0x1c8>
 800909c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800909e:	445a      	add	r2, fp
 80090a0:	9209      	str	r2, [sp, #36]	; 0x24
 80090a2:	f89a 3000 	ldrb.w	r3, [sl]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 80a2 	beq.w	80091f0 <_svfiprintf_r+0x1c8>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b6:	f10a 0a01 	add.w	sl, sl, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	9307      	str	r3, [sp, #28]
 80090be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c2:	931a      	str	r3, [sp, #104]	; 0x68
 80090c4:	4654      	mov	r4, sl
 80090c6:	2205      	movs	r2, #5
 80090c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090cc:	4851      	ldr	r0, [pc, #324]	; (8009214 <_svfiprintf_r+0x1ec>)
 80090ce:	f7f7 f887 	bl	80001e0 <memchr>
 80090d2:	9a04      	ldr	r2, [sp, #16]
 80090d4:	b9d8      	cbnz	r0, 800910e <_svfiprintf_r+0xe6>
 80090d6:	06d0      	lsls	r0, r2, #27
 80090d8:	bf44      	itt	mi
 80090da:	2320      	movmi	r3, #32
 80090dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e0:	0711      	lsls	r1, r2, #28
 80090e2:	bf44      	itt	mi
 80090e4:	232b      	movmi	r3, #43	; 0x2b
 80090e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ea:	f89a 3000 	ldrb.w	r3, [sl]
 80090ee:	2b2a      	cmp	r3, #42	; 0x2a
 80090f0:	d015      	beq.n	800911e <_svfiprintf_r+0xf6>
 80090f2:	9a07      	ldr	r2, [sp, #28]
 80090f4:	4654      	mov	r4, sl
 80090f6:	2000      	movs	r0, #0
 80090f8:	f04f 0c0a 	mov.w	ip, #10
 80090fc:	4621      	mov	r1, r4
 80090fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009102:	3b30      	subs	r3, #48	; 0x30
 8009104:	2b09      	cmp	r3, #9
 8009106:	d94e      	bls.n	80091a6 <_svfiprintf_r+0x17e>
 8009108:	b1b0      	cbz	r0, 8009138 <_svfiprintf_r+0x110>
 800910a:	9207      	str	r2, [sp, #28]
 800910c:	e014      	b.n	8009138 <_svfiprintf_r+0x110>
 800910e:	eba0 0308 	sub.w	r3, r0, r8
 8009112:	fa09 f303 	lsl.w	r3, r9, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	46a2      	mov	sl, r4
 800911c:	e7d2      	b.n	80090c4 <_svfiprintf_r+0x9c>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	1d19      	adds	r1, r3, #4
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	9103      	str	r1, [sp, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfbb      	ittet	lt
 800912a:	425b      	neglt	r3, r3
 800912c:	f042 0202 	orrlt.w	r2, r2, #2
 8009130:	9307      	strge	r3, [sp, #28]
 8009132:	9307      	strlt	r3, [sp, #28]
 8009134:	bfb8      	it	lt
 8009136:	9204      	strlt	r2, [sp, #16]
 8009138:	7823      	ldrb	r3, [r4, #0]
 800913a:	2b2e      	cmp	r3, #46	; 0x2e
 800913c:	d10c      	bne.n	8009158 <_svfiprintf_r+0x130>
 800913e:	7863      	ldrb	r3, [r4, #1]
 8009140:	2b2a      	cmp	r3, #42	; 0x2a
 8009142:	d135      	bne.n	80091b0 <_svfiprintf_r+0x188>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1d1a      	adds	r2, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9203      	str	r2, [sp, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfb8      	it	lt
 8009150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009154:	3402      	adds	r4, #2
 8009156:	9305      	str	r3, [sp, #20]
 8009158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009224 <_svfiprintf_r+0x1fc>
 800915c:	7821      	ldrb	r1, [r4, #0]
 800915e:	2203      	movs	r2, #3
 8009160:	4650      	mov	r0, sl
 8009162:	f7f7 f83d 	bl	80001e0 <memchr>
 8009166:	b140      	cbz	r0, 800917a <_svfiprintf_r+0x152>
 8009168:	2340      	movs	r3, #64	; 0x40
 800916a:	eba0 000a 	sub.w	r0, r0, sl
 800916e:	fa03 f000 	lsl.w	r0, r3, r0
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	4303      	orrs	r3, r0
 8009176:	3401      	adds	r4, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917e:	4826      	ldr	r0, [pc, #152]	; (8009218 <_svfiprintf_r+0x1f0>)
 8009180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009184:	2206      	movs	r2, #6
 8009186:	f7f7 f82b 	bl	80001e0 <memchr>
 800918a:	2800      	cmp	r0, #0
 800918c:	d038      	beq.n	8009200 <_svfiprintf_r+0x1d8>
 800918e:	4b23      	ldr	r3, [pc, #140]	; (800921c <_svfiprintf_r+0x1f4>)
 8009190:	bb1b      	cbnz	r3, 80091da <_svfiprintf_r+0x1b2>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3307      	adds	r3, #7
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	3308      	adds	r3, #8
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a0:	4433      	add	r3, r6
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
 80091a4:	e767      	b.n	8009076 <_svfiprintf_r+0x4e>
 80091a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091aa:	460c      	mov	r4, r1
 80091ac:	2001      	movs	r0, #1
 80091ae:	e7a5      	b.n	80090fc <_svfiprintf_r+0xd4>
 80091b0:	2300      	movs	r3, #0
 80091b2:	3401      	adds	r4, #1
 80091b4:	9305      	str	r3, [sp, #20]
 80091b6:	4619      	mov	r1, r3
 80091b8:	f04f 0c0a 	mov.w	ip, #10
 80091bc:	4620      	mov	r0, r4
 80091be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c2:	3a30      	subs	r2, #48	; 0x30
 80091c4:	2a09      	cmp	r2, #9
 80091c6:	d903      	bls.n	80091d0 <_svfiprintf_r+0x1a8>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0c5      	beq.n	8009158 <_svfiprintf_r+0x130>
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	e7c3      	b.n	8009158 <_svfiprintf_r+0x130>
 80091d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d4:	4604      	mov	r4, r0
 80091d6:	2301      	movs	r3, #1
 80091d8:	e7f0      	b.n	80091bc <_svfiprintf_r+0x194>
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	462a      	mov	r2, r5
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <_svfiprintf_r+0x1f8>)
 80091e2:	a904      	add	r1, sp, #16
 80091e4:	4638      	mov	r0, r7
 80091e6:	f7fc fa85 	bl	80056f4 <_printf_float>
 80091ea:	1c42      	adds	r2, r0, #1
 80091ec:	4606      	mov	r6, r0
 80091ee:	d1d6      	bne.n	800919e <_svfiprintf_r+0x176>
 80091f0:	89ab      	ldrh	r3, [r5, #12]
 80091f2:	065b      	lsls	r3, r3, #25
 80091f4:	f53f af2c 	bmi.w	8009050 <_svfiprintf_r+0x28>
 80091f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091fa:	b01d      	add	sp, #116	; 0x74
 80091fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <_svfiprintf_r+0x1f8>)
 8009208:	a904      	add	r1, sp, #16
 800920a:	4638      	mov	r0, r7
 800920c:	f7fc fd16 	bl	8005c3c <_printf_i>
 8009210:	e7eb      	b.n	80091ea <_svfiprintf_r+0x1c2>
 8009212:	bf00      	nop
 8009214:	0800a234 	.word	0x0800a234
 8009218:	0800a23e 	.word	0x0800a23e
 800921c:	080056f5 	.word	0x080056f5
 8009220:	08008f71 	.word	0x08008f71
 8009224:	0800a23a 	.word	0x0800a23a

08009228 <nan>:
 8009228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009230 <nan+0x8>
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	00000000 	.word	0x00000000
 8009234:	7ff80000 	.word	0x7ff80000

08009238 <_sbrk_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d06      	ldr	r5, [pc, #24]	; (8009254 <_sbrk_r+0x1c>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7f8 f9e2 	bl	800160c <_sbrk>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_sbrk_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_sbrk_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	200004c0 	.word	0x200004c0

08009258 <strncmp>:
 8009258:	b510      	push	{r4, lr}
 800925a:	b16a      	cbz	r2, 8009278 <strncmp+0x20>
 800925c:	3901      	subs	r1, #1
 800925e:	1884      	adds	r4, r0, r2
 8009260:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009264:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009268:	4293      	cmp	r3, r2
 800926a:	d103      	bne.n	8009274 <strncmp+0x1c>
 800926c:	42a0      	cmp	r0, r4
 800926e:	d001      	beq.n	8009274 <strncmp+0x1c>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1f5      	bne.n	8009260 <strncmp+0x8>
 8009274:	1a98      	subs	r0, r3, r2
 8009276:	bd10      	pop	{r4, pc}
 8009278:	4610      	mov	r0, r2
 800927a:	e7fc      	b.n	8009276 <strncmp+0x1e>

0800927c <__ascii_wctomb>:
 800927c:	b149      	cbz	r1, 8009292 <__ascii_wctomb+0x16>
 800927e:	2aff      	cmp	r2, #255	; 0xff
 8009280:	bf85      	ittet	hi
 8009282:	238a      	movhi	r3, #138	; 0x8a
 8009284:	6003      	strhi	r3, [r0, #0]
 8009286:	700a      	strbls	r2, [r1, #0]
 8009288:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800928c:	bf98      	it	ls
 800928e:	2001      	movls	r0, #1
 8009290:	4770      	bx	lr
 8009292:	4608      	mov	r0, r1
 8009294:	4770      	bx	lr
	...

08009298 <__assert_func>:
 8009298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800929a:	4614      	mov	r4, r2
 800929c:	461a      	mov	r2, r3
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <__assert_func+0x2c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4605      	mov	r5, r0
 80092a4:	68d8      	ldr	r0, [r3, #12]
 80092a6:	b14c      	cbz	r4, 80092bc <__assert_func+0x24>
 80092a8:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <__assert_func+0x30>)
 80092aa:	9100      	str	r1, [sp, #0]
 80092ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b0:	4906      	ldr	r1, [pc, #24]	; (80092cc <__assert_func+0x34>)
 80092b2:	462b      	mov	r3, r5
 80092b4:	f000 f80e 	bl	80092d4 <fiprintf>
 80092b8:	f000 fa84 	bl	80097c4 <abort>
 80092bc:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <__assert_func+0x38>)
 80092be:	461c      	mov	r4, r3
 80092c0:	e7f3      	b.n	80092aa <__assert_func+0x12>
 80092c2:	bf00      	nop
 80092c4:	20000010 	.word	0x20000010
 80092c8:	0800a245 	.word	0x0800a245
 80092cc:	0800a252 	.word	0x0800a252
 80092d0:	0800a280 	.word	0x0800a280

080092d4 <fiprintf>:
 80092d4:	b40e      	push	{r1, r2, r3}
 80092d6:	b503      	push	{r0, r1, lr}
 80092d8:	4601      	mov	r1, r0
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	4805      	ldr	r0, [pc, #20]	; (80092f4 <fiprintf+0x20>)
 80092de:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	f000 f87d 	bl	80093e4 <_vfiprintf_r>
 80092ea:	b002      	add	sp, #8
 80092ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f0:	b003      	add	sp, #12
 80092f2:	4770      	bx	lr
 80092f4:	20000010 	.word	0x20000010

080092f8 <memmove>:
 80092f8:	4288      	cmp	r0, r1
 80092fa:	b510      	push	{r4, lr}
 80092fc:	eb01 0402 	add.w	r4, r1, r2
 8009300:	d902      	bls.n	8009308 <memmove+0x10>
 8009302:	4284      	cmp	r4, r0
 8009304:	4623      	mov	r3, r4
 8009306:	d807      	bhi.n	8009318 <memmove+0x20>
 8009308:	1e43      	subs	r3, r0, #1
 800930a:	42a1      	cmp	r1, r4
 800930c:	d008      	beq.n	8009320 <memmove+0x28>
 800930e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009316:	e7f8      	b.n	800930a <memmove+0x12>
 8009318:	4402      	add	r2, r0
 800931a:	4601      	mov	r1, r0
 800931c:	428a      	cmp	r2, r1
 800931e:	d100      	bne.n	8009322 <memmove+0x2a>
 8009320:	bd10      	pop	{r4, pc}
 8009322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800932a:	e7f7      	b.n	800931c <memmove+0x24>

0800932c <__malloc_lock>:
 800932c:	4801      	ldr	r0, [pc, #4]	; (8009334 <__malloc_lock+0x8>)
 800932e:	f000 bc09 	b.w	8009b44 <__retarget_lock_acquire_recursive>
 8009332:	bf00      	nop
 8009334:	200004c8 	.word	0x200004c8

08009338 <__malloc_unlock>:
 8009338:	4801      	ldr	r0, [pc, #4]	; (8009340 <__malloc_unlock+0x8>)
 800933a:	f000 bc04 	b.w	8009b46 <__retarget_lock_release_recursive>
 800933e:	bf00      	nop
 8009340:	200004c8 	.word	0x200004c8

08009344 <_realloc_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	4607      	mov	r7, r0
 8009348:	4614      	mov	r4, r2
 800934a:	460e      	mov	r6, r1
 800934c:	b921      	cbnz	r1, 8009358 <_realloc_r+0x14>
 800934e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009352:	4611      	mov	r1, r2
 8009354:	f7ff bdb2 	b.w	8008ebc <_malloc_r>
 8009358:	b922      	cbnz	r2, 8009364 <_realloc_r+0x20>
 800935a:	f7ff fd5f 	bl	8008e1c <_free_r>
 800935e:	4625      	mov	r5, r4
 8009360:	4628      	mov	r0, r5
 8009362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009364:	f000 fc54 	bl	8009c10 <_malloc_usable_size_r>
 8009368:	42a0      	cmp	r0, r4
 800936a:	d20f      	bcs.n	800938c <_realloc_r+0x48>
 800936c:	4621      	mov	r1, r4
 800936e:	4638      	mov	r0, r7
 8009370:	f7ff fda4 	bl	8008ebc <_malloc_r>
 8009374:	4605      	mov	r5, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	d0f2      	beq.n	8009360 <_realloc_r+0x1c>
 800937a:	4631      	mov	r1, r6
 800937c:	4622      	mov	r2, r4
 800937e:	f7ff f875 	bl	800846c <memcpy>
 8009382:	4631      	mov	r1, r6
 8009384:	4638      	mov	r0, r7
 8009386:	f7ff fd49 	bl	8008e1c <_free_r>
 800938a:	e7e9      	b.n	8009360 <_realloc_r+0x1c>
 800938c:	4635      	mov	r5, r6
 800938e:	e7e7      	b.n	8009360 <_realloc_r+0x1c>

08009390 <__sfputc_r>:
 8009390:	6893      	ldr	r3, [r2, #8]
 8009392:	3b01      	subs	r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	b410      	push	{r4}
 8009398:	6093      	str	r3, [r2, #8]
 800939a:	da08      	bge.n	80093ae <__sfputc_r+0x1e>
 800939c:	6994      	ldr	r4, [r2, #24]
 800939e:	42a3      	cmp	r3, r4
 80093a0:	db01      	blt.n	80093a6 <__sfputc_r+0x16>
 80093a2:	290a      	cmp	r1, #10
 80093a4:	d103      	bne.n	80093ae <__sfputc_r+0x1e>
 80093a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093aa:	f000 b94b 	b.w	8009644 <__swbuf_r>
 80093ae:	6813      	ldr	r3, [r2, #0]
 80093b0:	1c58      	adds	r0, r3, #1
 80093b2:	6010      	str	r0, [r2, #0]
 80093b4:	7019      	strb	r1, [r3, #0]
 80093b6:	4608      	mov	r0, r1
 80093b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093bc:	4770      	bx	lr

080093be <__sfputs_r>:
 80093be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c0:	4606      	mov	r6, r0
 80093c2:	460f      	mov	r7, r1
 80093c4:	4614      	mov	r4, r2
 80093c6:	18d5      	adds	r5, r2, r3
 80093c8:	42ac      	cmp	r4, r5
 80093ca:	d101      	bne.n	80093d0 <__sfputs_r+0x12>
 80093cc:	2000      	movs	r0, #0
 80093ce:	e007      	b.n	80093e0 <__sfputs_r+0x22>
 80093d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d4:	463a      	mov	r2, r7
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7ff ffda 	bl	8009390 <__sfputc_r>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d1f3      	bne.n	80093c8 <__sfputs_r+0xa>
 80093e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093e4 <_vfiprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	460d      	mov	r5, r1
 80093ea:	b09d      	sub	sp, #116	; 0x74
 80093ec:	4614      	mov	r4, r2
 80093ee:	4698      	mov	r8, r3
 80093f0:	4606      	mov	r6, r0
 80093f2:	b118      	cbz	r0, 80093fc <_vfiprintf_r+0x18>
 80093f4:	6983      	ldr	r3, [r0, #24]
 80093f6:	b90b      	cbnz	r3, 80093fc <_vfiprintf_r+0x18>
 80093f8:	f000 fb06 	bl	8009a08 <__sinit>
 80093fc:	4b89      	ldr	r3, [pc, #548]	; (8009624 <_vfiprintf_r+0x240>)
 80093fe:	429d      	cmp	r5, r3
 8009400:	d11b      	bne.n	800943a <_vfiprintf_r+0x56>
 8009402:	6875      	ldr	r5, [r6, #4]
 8009404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009406:	07d9      	lsls	r1, r3, #31
 8009408:	d405      	bmi.n	8009416 <_vfiprintf_r+0x32>
 800940a:	89ab      	ldrh	r3, [r5, #12]
 800940c:	059a      	lsls	r2, r3, #22
 800940e:	d402      	bmi.n	8009416 <_vfiprintf_r+0x32>
 8009410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009412:	f000 fb97 	bl	8009b44 <__retarget_lock_acquire_recursive>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	071b      	lsls	r3, r3, #28
 800941a:	d501      	bpl.n	8009420 <_vfiprintf_r+0x3c>
 800941c:	692b      	ldr	r3, [r5, #16]
 800941e:	b9eb      	cbnz	r3, 800945c <_vfiprintf_r+0x78>
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f000 f960 	bl	80096e8 <__swsetup_r>
 8009428:	b1c0      	cbz	r0, 800945c <_vfiprintf_r+0x78>
 800942a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942c:	07dc      	lsls	r4, r3, #31
 800942e:	d50e      	bpl.n	800944e <_vfiprintf_r+0x6a>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009434:	b01d      	add	sp, #116	; 0x74
 8009436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943a:	4b7b      	ldr	r3, [pc, #492]	; (8009628 <_vfiprintf_r+0x244>)
 800943c:	429d      	cmp	r5, r3
 800943e:	d101      	bne.n	8009444 <_vfiprintf_r+0x60>
 8009440:	68b5      	ldr	r5, [r6, #8]
 8009442:	e7df      	b.n	8009404 <_vfiprintf_r+0x20>
 8009444:	4b79      	ldr	r3, [pc, #484]	; (800962c <_vfiprintf_r+0x248>)
 8009446:	429d      	cmp	r5, r3
 8009448:	bf08      	it	eq
 800944a:	68f5      	ldreq	r5, [r6, #12]
 800944c:	e7da      	b.n	8009404 <_vfiprintf_r+0x20>
 800944e:	89ab      	ldrh	r3, [r5, #12]
 8009450:	0598      	lsls	r0, r3, #22
 8009452:	d4ed      	bmi.n	8009430 <_vfiprintf_r+0x4c>
 8009454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009456:	f000 fb76 	bl	8009b46 <__retarget_lock_release_recursive>
 800945a:	e7e9      	b.n	8009430 <_vfiprintf_r+0x4c>
 800945c:	2300      	movs	r3, #0
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	2320      	movs	r3, #32
 8009462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009466:	f8cd 800c 	str.w	r8, [sp, #12]
 800946a:	2330      	movs	r3, #48	; 0x30
 800946c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009630 <_vfiprintf_r+0x24c>
 8009470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009474:	f04f 0901 	mov.w	r9, #1
 8009478:	4623      	mov	r3, r4
 800947a:	469a      	mov	sl, r3
 800947c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009480:	b10a      	cbz	r2, 8009486 <_vfiprintf_r+0xa2>
 8009482:	2a25      	cmp	r2, #37	; 0x25
 8009484:	d1f9      	bne.n	800947a <_vfiprintf_r+0x96>
 8009486:	ebba 0b04 	subs.w	fp, sl, r4
 800948a:	d00b      	beq.n	80094a4 <_vfiprintf_r+0xc0>
 800948c:	465b      	mov	r3, fp
 800948e:	4622      	mov	r2, r4
 8009490:	4629      	mov	r1, r5
 8009492:	4630      	mov	r0, r6
 8009494:	f7ff ff93 	bl	80093be <__sfputs_r>
 8009498:	3001      	adds	r0, #1
 800949a:	f000 80aa 	beq.w	80095f2 <_vfiprintf_r+0x20e>
 800949e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a0:	445a      	add	r2, fp
 80094a2:	9209      	str	r2, [sp, #36]	; 0x24
 80094a4:	f89a 3000 	ldrb.w	r3, [sl]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80a2 	beq.w	80095f2 <_vfiprintf_r+0x20e>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b8:	f10a 0a01 	add.w	sl, sl, #1
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c4:	931a      	str	r3, [sp, #104]	; 0x68
 80094c6:	4654      	mov	r4, sl
 80094c8:	2205      	movs	r2, #5
 80094ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ce:	4858      	ldr	r0, [pc, #352]	; (8009630 <_vfiprintf_r+0x24c>)
 80094d0:	f7f6 fe86 	bl	80001e0 <memchr>
 80094d4:	9a04      	ldr	r2, [sp, #16]
 80094d6:	b9d8      	cbnz	r0, 8009510 <_vfiprintf_r+0x12c>
 80094d8:	06d1      	lsls	r1, r2, #27
 80094da:	bf44      	itt	mi
 80094dc:	2320      	movmi	r3, #32
 80094de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e2:	0713      	lsls	r3, r2, #28
 80094e4:	bf44      	itt	mi
 80094e6:	232b      	movmi	r3, #43	; 0x2b
 80094e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ec:	f89a 3000 	ldrb.w	r3, [sl]
 80094f0:	2b2a      	cmp	r3, #42	; 0x2a
 80094f2:	d015      	beq.n	8009520 <_vfiprintf_r+0x13c>
 80094f4:	9a07      	ldr	r2, [sp, #28]
 80094f6:	4654      	mov	r4, sl
 80094f8:	2000      	movs	r0, #0
 80094fa:	f04f 0c0a 	mov.w	ip, #10
 80094fe:	4621      	mov	r1, r4
 8009500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009504:	3b30      	subs	r3, #48	; 0x30
 8009506:	2b09      	cmp	r3, #9
 8009508:	d94e      	bls.n	80095a8 <_vfiprintf_r+0x1c4>
 800950a:	b1b0      	cbz	r0, 800953a <_vfiprintf_r+0x156>
 800950c:	9207      	str	r2, [sp, #28]
 800950e:	e014      	b.n	800953a <_vfiprintf_r+0x156>
 8009510:	eba0 0308 	sub.w	r3, r0, r8
 8009514:	fa09 f303 	lsl.w	r3, r9, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	9304      	str	r3, [sp, #16]
 800951c:	46a2      	mov	sl, r4
 800951e:	e7d2      	b.n	80094c6 <_vfiprintf_r+0xe2>
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	1d19      	adds	r1, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	9103      	str	r1, [sp, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bfbb      	ittet	lt
 800952c:	425b      	neglt	r3, r3
 800952e:	f042 0202 	orrlt.w	r2, r2, #2
 8009532:	9307      	strge	r3, [sp, #28]
 8009534:	9307      	strlt	r3, [sp, #28]
 8009536:	bfb8      	it	lt
 8009538:	9204      	strlt	r2, [sp, #16]
 800953a:	7823      	ldrb	r3, [r4, #0]
 800953c:	2b2e      	cmp	r3, #46	; 0x2e
 800953e:	d10c      	bne.n	800955a <_vfiprintf_r+0x176>
 8009540:	7863      	ldrb	r3, [r4, #1]
 8009542:	2b2a      	cmp	r3, #42	; 0x2a
 8009544:	d135      	bne.n	80095b2 <_vfiprintf_r+0x1ce>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	1d1a      	adds	r2, r3, #4
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	9203      	str	r2, [sp, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009556:	3402      	adds	r4, #2
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009640 <_vfiprintf_r+0x25c>
 800955e:	7821      	ldrb	r1, [r4, #0]
 8009560:	2203      	movs	r2, #3
 8009562:	4650      	mov	r0, sl
 8009564:	f7f6 fe3c 	bl	80001e0 <memchr>
 8009568:	b140      	cbz	r0, 800957c <_vfiprintf_r+0x198>
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	eba0 000a 	sub.w	r0, r0, sl
 8009570:	fa03 f000 	lsl.w	r0, r3, r0
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	4303      	orrs	r3, r0
 8009578:	3401      	adds	r4, #1
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009580:	482c      	ldr	r0, [pc, #176]	; (8009634 <_vfiprintf_r+0x250>)
 8009582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009586:	2206      	movs	r2, #6
 8009588:	f7f6 fe2a 	bl	80001e0 <memchr>
 800958c:	2800      	cmp	r0, #0
 800958e:	d03f      	beq.n	8009610 <_vfiprintf_r+0x22c>
 8009590:	4b29      	ldr	r3, [pc, #164]	; (8009638 <_vfiprintf_r+0x254>)
 8009592:	bb1b      	cbnz	r3, 80095dc <_vfiprintf_r+0x1f8>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	3307      	adds	r3, #7
 8009598:	f023 0307 	bic.w	r3, r3, #7
 800959c:	3308      	adds	r3, #8
 800959e:	9303      	str	r3, [sp, #12]
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	443b      	add	r3, r7
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
 80095a6:	e767      	b.n	8009478 <_vfiprintf_r+0x94>
 80095a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ac:	460c      	mov	r4, r1
 80095ae:	2001      	movs	r0, #1
 80095b0:	e7a5      	b.n	80094fe <_vfiprintf_r+0x11a>
 80095b2:	2300      	movs	r3, #0
 80095b4:	3401      	adds	r4, #1
 80095b6:	9305      	str	r3, [sp, #20]
 80095b8:	4619      	mov	r1, r3
 80095ba:	f04f 0c0a 	mov.w	ip, #10
 80095be:	4620      	mov	r0, r4
 80095c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c4:	3a30      	subs	r2, #48	; 0x30
 80095c6:	2a09      	cmp	r2, #9
 80095c8:	d903      	bls.n	80095d2 <_vfiprintf_r+0x1ee>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0c5      	beq.n	800955a <_vfiprintf_r+0x176>
 80095ce:	9105      	str	r1, [sp, #20]
 80095d0:	e7c3      	b.n	800955a <_vfiprintf_r+0x176>
 80095d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d6:	4604      	mov	r4, r0
 80095d8:	2301      	movs	r3, #1
 80095da:	e7f0      	b.n	80095be <_vfiprintf_r+0x1da>
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	462a      	mov	r2, r5
 80095e2:	4b16      	ldr	r3, [pc, #88]	; (800963c <_vfiprintf_r+0x258>)
 80095e4:	a904      	add	r1, sp, #16
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7fc f884 	bl	80056f4 <_printf_float>
 80095ec:	4607      	mov	r7, r0
 80095ee:	1c78      	adds	r0, r7, #1
 80095f0:	d1d6      	bne.n	80095a0 <_vfiprintf_r+0x1bc>
 80095f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f4:	07d9      	lsls	r1, r3, #31
 80095f6:	d405      	bmi.n	8009604 <_vfiprintf_r+0x220>
 80095f8:	89ab      	ldrh	r3, [r5, #12]
 80095fa:	059a      	lsls	r2, r3, #22
 80095fc:	d402      	bmi.n	8009604 <_vfiprintf_r+0x220>
 80095fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009600:	f000 faa1 	bl	8009b46 <__retarget_lock_release_recursive>
 8009604:	89ab      	ldrh	r3, [r5, #12]
 8009606:	065b      	lsls	r3, r3, #25
 8009608:	f53f af12 	bmi.w	8009430 <_vfiprintf_r+0x4c>
 800960c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960e:	e711      	b.n	8009434 <_vfiprintf_r+0x50>
 8009610:	ab03      	add	r3, sp, #12
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	462a      	mov	r2, r5
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <_vfiprintf_r+0x258>)
 8009618:	a904      	add	r1, sp, #16
 800961a:	4630      	mov	r0, r6
 800961c:	f7fc fb0e 	bl	8005c3c <_printf_i>
 8009620:	e7e4      	b.n	80095ec <_vfiprintf_r+0x208>
 8009622:	bf00      	nop
 8009624:	0800a2a4 	.word	0x0800a2a4
 8009628:	0800a2c4 	.word	0x0800a2c4
 800962c:	0800a284 	.word	0x0800a284
 8009630:	0800a234 	.word	0x0800a234
 8009634:	0800a23e 	.word	0x0800a23e
 8009638:	080056f5 	.word	0x080056f5
 800963c:	080093bf 	.word	0x080093bf
 8009640:	0800a23a 	.word	0x0800a23a

08009644 <__swbuf_r>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	460e      	mov	r6, r1
 8009648:	4614      	mov	r4, r2
 800964a:	4605      	mov	r5, r0
 800964c:	b118      	cbz	r0, 8009656 <__swbuf_r+0x12>
 800964e:	6983      	ldr	r3, [r0, #24]
 8009650:	b90b      	cbnz	r3, 8009656 <__swbuf_r+0x12>
 8009652:	f000 f9d9 	bl	8009a08 <__sinit>
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <__swbuf_r+0x98>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d12b      	bne.n	80096b4 <__swbuf_r+0x70>
 800965c:	686c      	ldr	r4, [r5, #4]
 800965e:	69a3      	ldr	r3, [r4, #24]
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	071a      	lsls	r2, r3, #28
 8009666:	d52f      	bpl.n	80096c8 <__swbuf_r+0x84>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	b36b      	cbz	r3, 80096c8 <__swbuf_r+0x84>
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	1ac0      	subs	r0, r0, r3
 8009672:	6963      	ldr	r3, [r4, #20]
 8009674:	b2f6      	uxtb	r6, r6
 8009676:	4283      	cmp	r3, r0
 8009678:	4637      	mov	r7, r6
 800967a:	dc04      	bgt.n	8009686 <__swbuf_r+0x42>
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f92e 	bl	80098e0 <_fflush_r>
 8009684:	bb30      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	3b01      	subs	r3, #1
 800968a:	60a3      	str	r3, [r4, #8]
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	6022      	str	r2, [r4, #0]
 8009692:	701e      	strb	r6, [r3, #0]
 8009694:	6963      	ldr	r3, [r4, #20]
 8009696:	3001      	adds	r0, #1
 8009698:	4283      	cmp	r3, r0
 800969a:	d004      	beq.n	80096a6 <__swbuf_r+0x62>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	07db      	lsls	r3, r3, #31
 80096a0:	d506      	bpl.n	80096b0 <__swbuf_r+0x6c>
 80096a2:	2e0a      	cmp	r6, #10
 80096a4:	d104      	bne.n	80096b0 <__swbuf_r+0x6c>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4628      	mov	r0, r5
 80096aa:	f000 f919 	bl	80098e0 <_fflush_r>
 80096ae:	b988      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 80096b0:	4638      	mov	r0, r7
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <__swbuf_r+0x9c>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d101      	bne.n	80096be <__swbuf_r+0x7a>
 80096ba:	68ac      	ldr	r4, [r5, #8]
 80096bc:	e7cf      	b.n	800965e <__swbuf_r+0x1a>
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <__swbuf_r+0xa0>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	bf08      	it	eq
 80096c4:	68ec      	ldreq	r4, [r5, #12]
 80096c6:	e7ca      	b.n	800965e <__swbuf_r+0x1a>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f80c 	bl	80096e8 <__swsetup_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0cb      	beq.n	800966c <__swbuf_r+0x28>
 80096d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096d8:	e7ea      	b.n	80096b0 <__swbuf_r+0x6c>
 80096da:	bf00      	nop
 80096dc:	0800a2a4 	.word	0x0800a2a4
 80096e0:	0800a2c4 	.word	0x0800a2c4
 80096e4:	0800a284 	.word	0x0800a284

080096e8 <__swsetup_r>:
 80096e8:	4b32      	ldr	r3, [pc, #200]	; (80097b4 <__swsetup_r+0xcc>)
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	681d      	ldr	r5, [r3, #0]
 80096ee:	4606      	mov	r6, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	b125      	cbz	r5, 80096fe <__swsetup_r+0x16>
 80096f4:	69ab      	ldr	r3, [r5, #24]
 80096f6:	b913      	cbnz	r3, 80096fe <__swsetup_r+0x16>
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f985 	bl	8009a08 <__sinit>
 80096fe:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <__swsetup_r+0xd0>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d10f      	bne.n	8009724 <__swsetup_r+0x3c>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800970c:	0719      	lsls	r1, r3, #28
 800970e:	d42c      	bmi.n	800976a <__swsetup_r+0x82>
 8009710:	06dd      	lsls	r5, r3, #27
 8009712:	d411      	bmi.n	8009738 <__swsetup_r+0x50>
 8009714:	2309      	movs	r3, #9
 8009716:	6033      	str	r3, [r6, #0]
 8009718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009722:	e03e      	b.n	80097a2 <__swsetup_r+0xba>
 8009724:	4b25      	ldr	r3, [pc, #148]	; (80097bc <__swsetup_r+0xd4>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d101      	bne.n	800972e <__swsetup_r+0x46>
 800972a:	68ac      	ldr	r4, [r5, #8]
 800972c:	e7eb      	b.n	8009706 <__swsetup_r+0x1e>
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <__swsetup_r+0xd8>)
 8009730:	429c      	cmp	r4, r3
 8009732:	bf08      	it	eq
 8009734:	68ec      	ldreq	r4, [r5, #12]
 8009736:	e7e6      	b.n	8009706 <__swsetup_r+0x1e>
 8009738:	0758      	lsls	r0, r3, #29
 800973a:	d512      	bpl.n	8009762 <__swsetup_r+0x7a>
 800973c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800973e:	b141      	cbz	r1, 8009752 <__swsetup_r+0x6a>
 8009740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <__swsetup_r+0x66>
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff fb67 	bl	8008e1c <_free_r>
 800974e:	2300      	movs	r3, #0
 8009750:	6363      	str	r3, [r4, #52]	; 0x34
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	2300      	movs	r3, #0
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f043 0308 	orr.w	r3, r3, #8
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	b94b      	cbnz	r3, 8009782 <__swsetup_r+0x9a>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009778:	d003      	beq.n	8009782 <__swsetup_r+0x9a>
 800977a:	4621      	mov	r1, r4
 800977c:	4630      	mov	r0, r6
 800977e:	f000 fa07 	bl	8009b90 <__smakebuf_r>
 8009782:	89a0      	ldrh	r0, [r4, #12]
 8009784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009788:	f010 0301 	ands.w	r3, r0, #1
 800978c:	d00a      	beq.n	80097a4 <__swsetup_r+0xbc>
 800978e:	2300      	movs	r3, #0
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	425b      	negs	r3, r3
 8009796:	61a3      	str	r3, [r4, #24]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	b943      	cbnz	r3, 80097ae <__swsetup_r+0xc6>
 800979c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097a0:	d1ba      	bne.n	8009718 <__swsetup_r+0x30>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	0781      	lsls	r1, r0, #30
 80097a6:	bf58      	it	pl
 80097a8:	6963      	ldrpl	r3, [r4, #20]
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	e7f4      	b.n	8009798 <__swsetup_r+0xb0>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e7f7      	b.n	80097a2 <__swsetup_r+0xba>
 80097b2:	bf00      	nop
 80097b4:	20000010 	.word	0x20000010
 80097b8:	0800a2a4 	.word	0x0800a2a4
 80097bc:	0800a2c4 	.word	0x0800a2c4
 80097c0:	0800a284 	.word	0x0800a284

080097c4 <abort>:
 80097c4:	b508      	push	{r3, lr}
 80097c6:	2006      	movs	r0, #6
 80097c8:	f000 fa52 	bl	8009c70 <raise>
 80097cc:	2001      	movs	r0, #1
 80097ce:	f7f7 fea5 	bl	800151c <_exit>
	...

080097d4 <__sflush_r>:
 80097d4:	898a      	ldrh	r2, [r1, #12]
 80097d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097da:	4605      	mov	r5, r0
 80097dc:	0710      	lsls	r0, r2, #28
 80097de:	460c      	mov	r4, r1
 80097e0:	d458      	bmi.n	8009894 <__sflush_r+0xc0>
 80097e2:	684b      	ldr	r3, [r1, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dc05      	bgt.n	80097f4 <__sflush_r+0x20>
 80097e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dc02      	bgt.n	80097f4 <__sflush_r+0x20>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097f6:	2e00      	cmp	r6, #0
 80097f8:	d0f9      	beq.n	80097ee <__sflush_r+0x1a>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009800:	682f      	ldr	r7, [r5, #0]
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	d032      	beq.n	800986c <__sflush_r+0x98>
 8009806:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	075a      	lsls	r2, r3, #29
 800980c:	d505      	bpl.n	800981a <__sflush_r+0x46>
 800980e:	6863      	ldr	r3, [r4, #4]
 8009810:	1ac0      	subs	r0, r0, r3
 8009812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009814:	b10b      	cbz	r3, 800981a <__sflush_r+0x46>
 8009816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009818:	1ac0      	subs	r0, r0, r3
 800981a:	2300      	movs	r3, #0
 800981c:	4602      	mov	r2, r0
 800981e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009820:	6a21      	ldr	r1, [r4, #32]
 8009822:	4628      	mov	r0, r5
 8009824:	47b0      	blx	r6
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	d106      	bne.n	800983a <__sflush_r+0x66>
 800982c:	6829      	ldr	r1, [r5, #0]
 800982e:	291d      	cmp	r1, #29
 8009830:	d82c      	bhi.n	800988c <__sflush_r+0xb8>
 8009832:	4a2a      	ldr	r2, [pc, #168]	; (80098dc <__sflush_r+0x108>)
 8009834:	40ca      	lsrs	r2, r1
 8009836:	07d6      	lsls	r6, r2, #31
 8009838:	d528      	bpl.n	800988c <__sflush_r+0xb8>
 800983a:	2200      	movs	r2, #0
 800983c:	6062      	str	r2, [r4, #4]
 800983e:	04d9      	lsls	r1, r3, #19
 8009840:	6922      	ldr	r2, [r4, #16]
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	d504      	bpl.n	8009850 <__sflush_r+0x7c>
 8009846:	1c42      	adds	r2, r0, #1
 8009848:	d101      	bne.n	800984e <__sflush_r+0x7a>
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	b903      	cbnz	r3, 8009850 <__sflush_r+0x7c>
 800984e:	6560      	str	r0, [r4, #84]	; 0x54
 8009850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009852:	602f      	str	r7, [r5, #0]
 8009854:	2900      	cmp	r1, #0
 8009856:	d0ca      	beq.n	80097ee <__sflush_r+0x1a>
 8009858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800985c:	4299      	cmp	r1, r3
 800985e:	d002      	beq.n	8009866 <__sflush_r+0x92>
 8009860:	4628      	mov	r0, r5
 8009862:	f7ff fadb 	bl	8008e1c <_free_r>
 8009866:	2000      	movs	r0, #0
 8009868:	6360      	str	r0, [r4, #52]	; 0x34
 800986a:	e7c1      	b.n	80097f0 <__sflush_r+0x1c>
 800986c:	6a21      	ldr	r1, [r4, #32]
 800986e:	2301      	movs	r3, #1
 8009870:	4628      	mov	r0, r5
 8009872:	47b0      	blx	r6
 8009874:	1c41      	adds	r1, r0, #1
 8009876:	d1c7      	bne.n	8009808 <__sflush_r+0x34>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0c4      	beq.n	8009808 <__sflush_r+0x34>
 800987e:	2b1d      	cmp	r3, #29
 8009880:	d001      	beq.n	8009886 <__sflush_r+0xb2>
 8009882:	2b16      	cmp	r3, #22
 8009884:	d101      	bne.n	800988a <__sflush_r+0xb6>
 8009886:	602f      	str	r7, [r5, #0]
 8009888:	e7b1      	b.n	80097ee <__sflush_r+0x1a>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	e7ad      	b.n	80097f0 <__sflush_r+0x1c>
 8009894:	690f      	ldr	r7, [r1, #16]
 8009896:	2f00      	cmp	r7, #0
 8009898:	d0a9      	beq.n	80097ee <__sflush_r+0x1a>
 800989a:	0793      	lsls	r3, r2, #30
 800989c:	680e      	ldr	r6, [r1, #0]
 800989e:	bf08      	it	eq
 80098a0:	694b      	ldreq	r3, [r1, #20]
 80098a2:	600f      	str	r7, [r1, #0]
 80098a4:	bf18      	it	ne
 80098a6:	2300      	movne	r3, #0
 80098a8:	eba6 0807 	sub.w	r8, r6, r7
 80098ac:	608b      	str	r3, [r1, #8]
 80098ae:	f1b8 0f00 	cmp.w	r8, #0
 80098b2:	dd9c      	ble.n	80097ee <__sflush_r+0x1a>
 80098b4:	6a21      	ldr	r1, [r4, #32]
 80098b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098b8:	4643      	mov	r3, r8
 80098ba:	463a      	mov	r2, r7
 80098bc:	4628      	mov	r0, r5
 80098be:	47b0      	blx	r6
 80098c0:	2800      	cmp	r0, #0
 80098c2:	dc06      	bgt.n	80098d2 <__sflush_r+0xfe>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d0:	e78e      	b.n	80097f0 <__sflush_r+0x1c>
 80098d2:	4407      	add	r7, r0
 80098d4:	eba8 0800 	sub.w	r8, r8, r0
 80098d8:	e7e9      	b.n	80098ae <__sflush_r+0xda>
 80098da:	bf00      	nop
 80098dc:	20400001 	.word	0x20400001

080098e0 <_fflush_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	b913      	cbnz	r3, 80098f0 <_fflush_r+0x10>
 80098ea:	2500      	movs	r5, #0
 80098ec:	4628      	mov	r0, r5
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	b118      	cbz	r0, 80098fa <_fflush_r+0x1a>
 80098f2:	6983      	ldr	r3, [r0, #24]
 80098f4:	b90b      	cbnz	r3, 80098fa <_fflush_r+0x1a>
 80098f6:	f000 f887 	bl	8009a08 <__sinit>
 80098fa:	4b14      	ldr	r3, [pc, #80]	; (800994c <_fflush_r+0x6c>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d11b      	bne.n	8009938 <_fflush_r+0x58>
 8009900:	686c      	ldr	r4, [r5, #4]
 8009902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0ef      	beq.n	80098ea <_fflush_r+0xa>
 800990a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800990c:	07d0      	lsls	r0, r2, #31
 800990e:	d404      	bmi.n	800991a <_fflush_r+0x3a>
 8009910:	0599      	lsls	r1, r3, #22
 8009912:	d402      	bmi.n	800991a <_fflush_r+0x3a>
 8009914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009916:	f000 f915 	bl	8009b44 <__retarget_lock_acquire_recursive>
 800991a:	4628      	mov	r0, r5
 800991c:	4621      	mov	r1, r4
 800991e:	f7ff ff59 	bl	80097d4 <__sflush_r>
 8009922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009924:	07da      	lsls	r2, r3, #31
 8009926:	4605      	mov	r5, r0
 8009928:	d4e0      	bmi.n	80098ec <_fflush_r+0xc>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	059b      	lsls	r3, r3, #22
 800992e:	d4dd      	bmi.n	80098ec <_fflush_r+0xc>
 8009930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009932:	f000 f908 	bl	8009b46 <__retarget_lock_release_recursive>
 8009936:	e7d9      	b.n	80098ec <_fflush_r+0xc>
 8009938:	4b05      	ldr	r3, [pc, #20]	; (8009950 <_fflush_r+0x70>)
 800993a:	429c      	cmp	r4, r3
 800993c:	d101      	bne.n	8009942 <_fflush_r+0x62>
 800993e:	68ac      	ldr	r4, [r5, #8]
 8009940:	e7df      	b.n	8009902 <_fflush_r+0x22>
 8009942:	4b04      	ldr	r3, [pc, #16]	; (8009954 <_fflush_r+0x74>)
 8009944:	429c      	cmp	r4, r3
 8009946:	bf08      	it	eq
 8009948:	68ec      	ldreq	r4, [r5, #12]
 800994a:	e7da      	b.n	8009902 <_fflush_r+0x22>
 800994c:	0800a2a4 	.word	0x0800a2a4
 8009950:	0800a2c4 	.word	0x0800a2c4
 8009954:	0800a284 	.word	0x0800a284

08009958 <std>:
 8009958:	2300      	movs	r3, #0
 800995a:	b510      	push	{r4, lr}
 800995c:	4604      	mov	r4, r0
 800995e:	e9c0 3300 	strd	r3, r3, [r0]
 8009962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009966:	6083      	str	r3, [r0, #8]
 8009968:	8181      	strh	r1, [r0, #12]
 800996a:	6643      	str	r3, [r0, #100]	; 0x64
 800996c:	81c2      	strh	r2, [r0, #14]
 800996e:	6183      	str	r3, [r0, #24]
 8009970:	4619      	mov	r1, r3
 8009972:	2208      	movs	r2, #8
 8009974:	305c      	adds	r0, #92	; 0x5c
 8009976:	f7fb fe15 	bl	80055a4 <memset>
 800997a:	4b05      	ldr	r3, [pc, #20]	; (8009990 <std+0x38>)
 800997c:	6263      	str	r3, [r4, #36]	; 0x24
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <std+0x3c>)
 8009980:	62a3      	str	r3, [r4, #40]	; 0x28
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <std+0x40>)
 8009984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009986:	4b05      	ldr	r3, [pc, #20]	; (800999c <std+0x44>)
 8009988:	6224      	str	r4, [r4, #32]
 800998a:	6323      	str	r3, [r4, #48]	; 0x30
 800998c:	bd10      	pop	{r4, pc}
 800998e:	bf00      	nop
 8009990:	08009ca9 	.word	0x08009ca9
 8009994:	08009ccb 	.word	0x08009ccb
 8009998:	08009d03 	.word	0x08009d03
 800999c:	08009d27 	.word	0x08009d27

080099a0 <_cleanup_r>:
 80099a0:	4901      	ldr	r1, [pc, #4]	; (80099a8 <_cleanup_r+0x8>)
 80099a2:	f000 b8af 	b.w	8009b04 <_fwalk_reent>
 80099a6:	bf00      	nop
 80099a8:	080098e1 	.word	0x080098e1

080099ac <__sfmoreglue>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	1e4a      	subs	r2, r1, #1
 80099b0:	2568      	movs	r5, #104	; 0x68
 80099b2:	4355      	muls	r5, r2
 80099b4:	460e      	mov	r6, r1
 80099b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ba:	f7ff fa7f 	bl	8008ebc <_malloc_r>
 80099be:	4604      	mov	r4, r0
 80099c0:	b140      	cbz	r0, 80099d4 <__sfmoreglue+0x28>
 80099c2:	2100      	movs	r1, #0
 80099c4:	e9c0 1600 	strd	r1, r6, [r0]
 80099c8:	300c      	adds	r0, #12
 80099ca:	60a0      	str	r0, [r4, #8]
 80099cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099d0:	f7fb fde8 	bl	80055a4 <memset>
 80099d4:	4620      	mov	r0, r4
 80099d6:	bd70      	pop	{r4, r5, r6, pc}

080099d8 <__sfp_lock_acquire>:
 80099d8:	4801      	ldr	r0, [pc, #4]	; (80099e0 <__sfp_lock_acquire+0x8>)
 80099da:	f000 b8b3 	b.w	8009b44 <__retarget_lock_acquire_recursive>
 80099de:	bf00      	nop
 80099e0:	200004cc 	.word	0x200004cc

080099e4 <__sfp_lock_release>:
 80099e4:	4801      	ldr	r0, [pc, #4]	; (80099ec <__sfp_lock_release+0x8>)
 80099e6:	f000 b8ae 	b.w	8009b46 <__retarget_lock_release_recursive>
 80099ea:	bf00      	nop
 80099ec:	200004cc 	.word	0x200004cc

080099f0 <__sinit_lock_acquire>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sinit_lock_acquire+0x8>)
 80099f2:	f000 b8a7 	b.w	8009b44 <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	200004c7 	.word	0x200004c7

080099fc <__sinit_lock_release>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sinit_lock_release+0x8>)
 80099fe:	f000 b8a2 	b.w	8009b46 <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	200004c7 	.word	0x200004c7

08009a08 <__sinit>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	f7ff fff0 	bl	80099f0 <__sinit_lock_acquire>
 8009a10:	69a3      	ldr	r3, [r4, #24]
 8009a12:	b11b      	cbz	r3, 8009a1c <__sinit+0x14>
 8009a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a18:	f7ff bff0 	b.w	80099fc <__sinit_lock_release>
 8009a1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a20:	6523      	str	r3, [r4, #80]	; 0x50
 8009a22:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <__sinit+0x68>)
 8009a24:	4a13      	ldr	r2, [pc, #76]	; (8009a74 <__sinit+0x6c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	bf04      	itt	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	61a3      	streq	r3, [r4, #24]
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 f820 	bl	8009a78 <__sfp>
 8009a38:	6060      	str	r0, [r4, #4]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f81c 	bl	8009a78 <__sfp>
 8009a40:	60a0      	str	r0, [r4, #8]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f818 	bl	8009a78 <__sfp>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	60e0      	str	r0, [r4, #12]
 8009a4c:	2104      	movs	r1, #4
 8009a4e:	6860      	ldr	r0, [r4, #4]
 8009a50:	f7ff ff82 	bl	8009958 <std>
 8009a54:	68a0      	ldr	r0, [r4, #8]
 8009a56:	2201      	movs	r2, #1
 8009a58:	2109      	movs	r1, #9
 8009a5a:	f7ff ff7d 	bl	8009958 <std>
 8009a5e:	68e0      	ldr	r0, [r4, #12]
 8009a60:	2202      	movs	r2, #2
 8009a62:	2112      	movs	r1, #18
 8009a64:	f7ff ff78 	bl	8009958 <std>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	61a3      	str	r3, [r4, #24]
 8009a6c:	e7d2      	b.n	8009a14 <__sinit+0xc>
 8009a6e:	bf00      	nop
 8009a70:	08009e30 	.word	0x08009e30
 8009a74:	080099a1 	.word	0x080099a1

08009a78 <__sfp>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	f7ff ffac 	bl	80099d8 <__sfp_lock_acquire>
 8009a80:	4b1e      	ldr	r3, [pc, #120]	; (8009afc <__sfp+0x84>)
 8009a82:	681e      	ldr	r6, [r3, #0]
 8009a84:	69b3      	ldr	r3, [r6, #24]
 8009a86:	b913      	cbnz	r3, 8009a8e <__sfp+0x16>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7ff ffbd 	bl	8009a08 <__sinit>
 8009a8e:	3648      	adds	r6, #72	; 0x48
 8009a90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	d503      	bpl.n	8009aa0 <__sfp+0x28>
 8009a98:	6833      	ldr	r3, [r6, #0]
 8009a9a:	b30b      	cbz	r3, 8009ae0 <__sfp+0x68>
 8009a9c:	6836      	ldr	r6, [r6, #0]
 8009a9e:	e7f7      	b.n	8009a90 <__sfp+0x18>
 8009aa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009aa4:	b9d5      	cbnz	r5, 8009adc <__sfp+0x64>
 8009aa6:	4b16      	ldr	r3, [pc, #88]	; (8009b00 <__sfp+0x88>)
 8009aa8:	60e3      	str	r3, [r4, #12]
 8009aaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aae:	6665      	str	r5, [r4, #100]	; 0x64
 8009ab0:	f000 f847 	bl	8009b42 <__retarget_lock_init_recursive>
 8009ab4:	f7ff ff96 	bl	80099e4 <__sfp_lock_release>
 8009ab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009abc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ac0:	6025      	str	r5, [r4, #0]
 8009ac2:	61a5      	str	r5, [r4, #24]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009acc:	f7fb fd6a 	bl	80055a4 <memset>
 8009ad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ad8:	4620      	mov	r0, r4
 8009ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009adc:	3468      	adds	r4, #104	; 0x68
 8009ade:	e7d9      	b.n	8009a94 <__sfp+0x1c>
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f7ff ff62 	bl	80099ac <__sfmoreglue>
 8009ae8:	4604      	mov	r4, r0
 8009aea:	6030      	str	r0, [r6, #0]
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d1d5      	bne.n	8009a9c <__sfp+0x24>
 8009af0:	f7ff ff78 	bl	80099e4 <__sfp_lock_release>
 8009af4:	230c      	movs	r3, #12
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	e7ee      	b.n	8009ad8 <__sfp+0x60>
 8009afa:	bf00      	nop
 8009afc:	08009e30 	.word	0x08009e30
 8009b00:	ffff0001 	.word	0xffff0001

08009b04 <_fwalk_reent>:
 8009b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b08:	4606      	mov	r6, r0
 8009b0a:	4688      	mov	r8, r1
 8009b0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b10:	2700      	movs	r7, #0
 8009b12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b16:	f1b9 0901 	subs.w	r9, r9, #1
 8009b1a:	d505      	bpl.n	8009b28 <_fwalk_reent+0x24>
 8009b1c:	6824      	ldr	r4, [r4, #0]
 8009b1e:	2c00      	cmp	r4, #0
 8009b20:	d1f7      	bne.n	8009b12 <_fwalk_reent+0xe>
 8009b22:	4638      	mov	r0, r7
 8009b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b28:	89ab      	ldrh	r3, [r5, #12]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d907      	bls.n	8009b3e <_fwalk_reent+0x3a>
 8009b2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b32:	3301      	adds	r3, #1
 8009b34:	d003      	beq.n	8009b3e <_fwalk_reent+0x3a>
 8009b36:	4629      	mov	r1, r5
 8009b38:	4630      	mov	r0, r6
 8009b3a:	47c0      	blx	r8
 8009b3c:	4307      	orrs	r7, r0
 8009b3e:	3568      	adds	r5, #104	; 0x68
 8009b40:	e7e9      	b.n	8009b16 <_fwalk_reent+0x12>

08009b42 <__retarget_lock_init_recursive>:
 8009b42:	4770      	bx	lr

08009b44 <__retarget_lock_acquire_recursive>:
 8009b44:	4770      	bx	lr

08009b46 <__retarget_lock_release_recursive>:
 8009b46:	4770      	bx	lr

08009b48 <__swhatbuf_r>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	460e      	mov	r6, r1
 8009b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	b096      	sub	sp, #88	; 0x58
 8009b54:	4614      	mov	r4, r2
 8009b56:	461d      	mov	r5, r3
 8009b58:	da07      	bge.n	8009b6a <__swhatbuf_r+0x22>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	89b3      	ldrh	r3, [r6, #12]
 8009b60:	061a      	lsls	r2, r3, #24
 8009b62:	d410      	bmi.n	8009b86 <__swhatbuf_r+0x3e>
 8009b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b68:	e00e      	b.n	8009b88 <__swhatbuf_r+0x40>
 8009b6a:	466a      	mov	r2, sp
 8009b6c:	f000 f902 	bl	8009d74 <_fstat_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	dbf2      	blt.n	8009b5a <__swhatbuf_r+0x12>
 8009b74:	9a01      	ldr	r2, [sp, #4]
 8009b76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b7e:	425a      	negs	r2, r3
 8009b80:	415a      	adcs	r2, r3
 8009b82:	602a      	str	r2, [r5, #0]
 8009b84:	e7ee      	b.n	8009b64 <__swhatbuf_r+0x1c>
 8009b86:	2340      	movs	r3, #64	; 0x40
 8009b88:	2000      	movs	r0, #0
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	b016      	add	sp, #88	; 0x58
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}

08009b90 <__smakebuf_r>:
 8009b90:	898b      	ldrh	r3, [r1, #12]
 8009b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b94:	079d      	lsls	r5, r3, #30
 8009b96:	4606      	mov	r6, r0
 8009b98:	460c      	mov	r4, r1
 8009b9a:	d507      	bpl.n	8009bac <__smakebuf_r+0x1c>
 8009b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	6163      	str	r3, [r4, #20]
 8009ba8:	b002      	add	sp, #8
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	ab01      	add	r3, sp, #4
 8009bae:	466a      	mov	r2, sp
 8009bb0:	f7ff ffca 	bl	8009b48 <__swhatbuf_r>
 8009bb4:	9900      	ldr	r1, [sp, #0]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff f97f 	bl	8008ebc <_malloc_r>
 8009bbe:	b948      	cbnz	r0, 8009bd4 <__smakebuf_r+0x44>
 8009bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc4:	059a      	lsls	r2, r3, #22
 8009bc6:	d4ef      	bmi.n	8009ba8 <__smakebuf_r+0x18>
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	f043 0302 	orr.w	r3, r3, #2
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	e7e3      	b.n	8009b9c <__smakebuf_r+0xc>
 8009bd4:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <__smakebuf_r+0x7c>)
 8009bd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	6020      	str	r0, [r4, #0]
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	9b00      	ldr	r3, [sp, #0]
 8009be4:	6163      	str	r3, [r4, #20]
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	6120      	str	r0, [r4, #16]
 8009bea:	b15b      	cbz	r3, 8009c04 <__smakebuf_r+0x74>
 8009bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	f000 f8d1 	bl	8009d98 <_isatty_r>
 8009bf6:	b128      	cbz	r0, 8009c04 <__smakebuf_r+0x74>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	f043 0301 	orr.w	r3, r3, #1
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	89a0      	ldrh	r0, [r4, #12]
 8009c06:	4305      	orrs	r5, r0
 8009c08:	81a5      	strh	r5, [r4, #12]
 8009c0a:	e7cd      	b.n	8009ba8 <__smakebuf_r+0x18>
 8009c0c:	080099a1 	.word	0x080099a1

08009c10 <_malloc_usable_size_r>:
 8009c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c14:	1f18      	subs	r0, r3, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfbc      	itt	lt
 8009c1a:	580b      	ldrlt	r3, [r1, r0]
 8009c1c:	18c0      	addlt	r0, r0, r3
 8009c1e:	4770      	bx	lr

08009c20 <_raise_r>:
 8009c20:	291f      	cmp	r1, #31
 8009c22:	b538      	push	{r3, r4, r5, lr}
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	d904      	bls.n	8009c34 <_raise_r+0x14>
 8009c2a:	2316      	movs	r3, #22
 8009c2c:	6003      	str	r3, [r0, #0]
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c36:	b112      	cbz	r2, 8009c3e <_raise_r+0x1e>
 8009c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c3c:	b94b      	cbnz	r3, 8009c52 <_raise_r+0x32>
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 f830 	bl	8009ca4 <_getpid_r>
 8009c44:	462a      	mov	r2, r5
 8009c46:	4601      	mov	r1, r0
 8009c48:	4620      	mov	r0, r4
 8009c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4e:	f000 b817 	b.w	8009c80 <_kill_r>
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d00a      	beq.n	8009c6c <_raise_r+0x4c>
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	d103      	bne.n	8009c62 <_raise_r+0x42>
 8009c5a:	2316      	movs	r3, #22
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	2001      	movs	r0, #1
 8009c60:	e7e7      	b.n	8009c32 <_raise_r+0x12>
 8009c62:	2400      	movs	r4, #0
 8009c64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c68:	4628      	mov	r0, r5
 8009c6a:	4798      	blx	r3
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e7e0      	b.n	8009c32 <_raise_r+0x12>

08009c70 <raise>:
 8009c70:	4b02      	ldr	r3, [pc, #8]	; (8009c7c <raise+0xc>)
 8009c72:	4601      	mov	r1, r0
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	f7ff bfd3 	b.w	8009c20 <_raise_r>
 8009c7a:	bf00      	nop
 8009c7c:	20000010 	.word	0x20000010

08009c80 <_kill_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_kill_r+0x20>)
 8009c84:	2300      	movs	r3, #0
 8009c86:	4604      	mov	r4, r0
 8009c88:	4608      	mov	r0, r1
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	602b      	str	r3, [r5, #0]
 8009c8e:	f7f7 fc35 	bl	80014fc <_kill>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d102      	bne.n	8009c9c <_kill_r+0x1c>
 8009c96:	682b      	ldr	r3, [r5, #0]
 8009c98:	b103      	cbz	r3, 8009c9c <_kill_r+0x1c>
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	bd38      	pop	{r3, r4, r5, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200004c0 	.word	0x200004c0

08009ca4 <_getpid_r>:
 8009ca4:	f7f7 bc22 	b.w	80014ec <_getpid>

08009ca8 <__sread>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	460c      	mov	r4, r1
 8009cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb0:	f000 f894 	bl	8009ddc <_read_r>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	bfab      	itete	ge
 8009cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cba:	89a3      	ldrhlt	r3, [r4, #12]
 8009cbc:	181b      	addge	r3, r3, r0
 8009cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cc2:	bfac      	ite	ge
 8009cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cc6:	81a3      	strhlt	r3, [r4, #12]
 8009cc8:	bd10      	pop	{r4, pc}

08009cca <__swrite>:
 8009cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cce:	461f      	mov	r7, r3
 8009cd0:	898b      	ldrh	r3, [r1, #12]
 8009cd2:	05db      	lsls	r3, r3, #23
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	4616      	mov	r6, r2
 8009cda:	d505      	bpl.n	8009ce8 <__swrite+0x1e>
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f000 f868 	bl	8009db8 <_lseek_r>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfe:	f000 b817 	b.w	8009d30 <_write_r>

08009d02 <__sseek>:
 8009d02:	b510      	push	{r4, lr}
 8009d04:	460c      	mov	r4, r1
 8009d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0a:	f000 f855 	bl	8009db8 <_lseek_r>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	bf15      	itete	ne
 8009d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d1e:	81a3      	strheq	r3, [r4, #12]
 8009d20:	bf18      	it	ne
 8009d22:	81a3      	strhne	r3, [r4, #12]
 8009d24:	bd10      	pop	{r4, pc}

08009d26 <__sclose>:
 8009d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2a:	f000 b813 	b.w	8009d54 <_close_r>
	...

08009d30 <_write_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	; (8009d50 <_write_r+0x20>)
 8009d34:	4604      	mov	r4, r0
 8009d36:	4608      	mov	r0, r1
 8009d38:	4611      	mov	r1, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7f7 fc13 	bl	800156a <_write>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_write_r+0x1e>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_write_r+0x1e>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	200004c0 	.word	0x200004c0

08009d54 <_close_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4d06      	ldr	r5, [pc, #24]	; (8009d70 <_close_r+0x1c>)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	602b      	str	r3, [r5, #0]
 8009d60:	f7f7 fc1f 	bl	80015a2 <_close>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_close_r+0x1a>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_close_r+0x1a>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	200004c0 	.word	0x200004c0

08009d74 <_fstat_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d07      	ldr	r5, [pc, #28]	; (8009d94 <_fstat_r+0x20>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	602b      	str	r3, [r5, #0]
 8009d82:	f7f7 fc1a 	bl	80015ba <_fstat>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d102      	bne.n	8009d90 <_fstat_r+0x1c>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	b103      	cbz	r3, 8009d90 <_fstat_r+0x1c>
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	bf00      	nop
 8009d94:	200004c0 	.word	0x200004c0

08009d98 <_isatty_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_isatty_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f7 fc19 	bl	80015da <_isatty>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_isatty_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_isatty_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	200004c0 	.word	0x200004c0

08009db8 <_lseek_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	; (8009dd8 <_lseek_r+0x20>)
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	602a      	str	r2, [r5, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f7f7 fc12 	bl	80015f0 <_lseek>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_lseek_r+0x1e>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_lseek_r+0x1e>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	200004c0 	.word	0x200004c0

08009ddc <_read_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d07      	ldr	r5, [pc, #28]	; (8009dfc <_read_r+0x20>)
 8009de0:	4604      	mov	r4, r0
 8009de2:	4608      	mov	r0, r1
 8009de4:	4611      	mov	r1, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	602a      	str	r2, [r5, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f7f7 fba0 	bl	8001530 <_read>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_read_r+0x1e>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_read_r+0x1e>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	200004c0 	.word	0x200004c0

08009e00 <_init>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr

08009e0c <_fini>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr
